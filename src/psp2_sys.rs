/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::libc::c_int;
pub type max_align_t = f64;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __int_least8_t = ::libc::c_char;
pub type __uint_least8_t = ::libc::c_uchar;
pub type __int_least16_t = ::libc::c_short;
pub type __uint_least16_t = ::libc::c_ushort;
pub type __int_least32_t = ::libc::c_int;
pub type __uint_least32_t = ::libc::c_uint;
pub type __int_least64_t = ::libc::c_long;
pub type __uint_least64_t = ::libc::c_ulong;
pub type __intptr_t = ::libc::c_long;
pub type __uintptr_t = ::libc::c_ulong;
pub type int8_t = i8;
pub type uint8_t = u8;
pub type int16_t = i16;
pub type uint16_t = u16;
pub type int32_t = i32;
pub type uint32_t = u32;
pub type int64_t = i64;
pub type uint64_t = u64;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::libc::c_char;
pub type uint_fast8_t = ::libc::c_uchar;
pub type int_fast16_t = ::libc::c_short;
pub type uint_fast16_t = ::libc::c_ushort;
pub type int_fast32_t = ::libc::c_int;
pub type uint_fast32_t = ::libc::c_uint;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type SceChar8 = int8_t;
pub type SceUChar8 = uint8_t;
pub type SceInt8 = int8_t;
pub type SceUInt8 = uint8_t;
pub type SceShort16 = int16_t;
pub type SceUShort16 = uint16_t;
pub type SceInt16 = int16_t;
pub type SceUInt16 = uint16_t;
pub type SceInt32 = int32_t;
pub type SceUInt32 = uint32_t;
pub type SceInt = int32_t;
pub type SceUInt = uint32_t;
pub type SceInt64 = int64_t;
pub type SceUInt64 = uint64_t;
pub type SceLong64 = int64_t;
pub type SceULong64 = uint64_t;
pub type SceSize = ::libc::c_uint;
pub type SceSSize = ::libc::c_int;
pub type SceBool = ::libc::c_int;
pub type Enum_Unnamed1 = u32;
pub const SCE_FALSE: Enum_Unnamed1 = 0;
pub const SCE_TRUE: Enum_Unnamed1 = 1;
pub type SceFloat = f32;
pub type SceFloat32 = f32;
pub type SceDouble = f64;
pub type SceDouble64 = f64;
pub type SceSByte = ::libc::c_char;
pub type SceSByte8 = ::libc::c_char;
pub type SceByte = ::libc::c_uchar;
pub type SceByte8 = ::libc::c_uchar;
pub type SceWChar16 = uint16_t;
pub type SceWChar32 = uint32_t;
pub type SceVoid = ::libc::c_void;
pub type ScePVoid = *mut ::libc::c_void;
pub type SceIntPtr = ::libc::c_int;
pub type SceUIntPtr = ::libc::c_uint;
pub type SceUIntVAddr = SceUIntPtr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIVector2 {
    pub x: SceInt,
    pub y: SceInt,
}
impl ::core::default::Default for SceIVector2 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFVector2 {
    pub x: SceFloat,
    pub y: SceFloat,
}
impl ::core::default::Default for SceFVector2 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIVector3 {
    pub x: SceInt,
    pub y: SceInt,
    pub z: SceInt,
}
impl ::core::default::Default for SceIVector3 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFVector3 {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
}
impl ::core::default::Default for SceFVector3 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIVector4 {
    pub x: SceInt,
    pub y: SceInt,
    pub z: SceInt,
    pub w: SceInt,
}
impl ::core::default::Default for SceIVector4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceUVector4 {
    pub x: SceUInt,
    pub y: SceUInt,
    pub z: SceUInt,
    pub w: SceUInt,
}
impl ::core::default::Default for SceUVector4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFVector4 {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
    pub w: SceFloat,
}
impl ::core::default::Default for SceFVector4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIMatrix2 {
    pub x: SceIVector2,
    pub y: SceIVector2,
}
impl ::core::default::Default for SceIMatrix2 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFMatrix2 {
    pub x: SceFVector2,
    pub y: SceFVector2,
}
impl ::core::default::Default for SceFMatrix2 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIMatrix3 {
    pub x: SceIVector3,
    pub y: SceIVector3,
    pub z: SceIVector3,
}
impl ::core::default::Default for SceIMatrix3 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFMatrix3 {
    pub x: SceFVector3,
    pub y: SceFVector3,
    pub z: SceFVector3,
}
impl ::core::default::Default for SceFMatrix3 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIMatrix4 {
    pub x: SceIVector4,
    pub y: SceIVector4,
    pub z: SceIVector4,
    pub w: SceIVector4,
}
impl ::core::default::Default for SceIMatrix4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceUMatrix4 {
    pub x: SceUVector4,
    pub y: SceUVector4,
    pub z: SceUVector4,
    pub w: SceUVector4,
}
impl ::core::default::Default for SceUMatrix4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFMatrix4 {
    pub x: SceFVector4,
    pub y: SceFVector4,
    pub z: SceFVector4,
    pub w: SceFVector4,
}
impl ::core::default::Default for SceFMatrix4 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFQuaternion {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
    pub w: SceFloat,
}
impl ::core::default::Default for SceFQuaternion {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFColor {
    pub r: SceFloat,
    pub g: SceFloat,
    pub b: SceFloat,
    pub a: SceFloat,
}
impl ::core::default::Default for SceFColor {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFPlane {
    pub a: SceFloat,
    pub b: SceFloat,
    pub c: SceFloat,
    pub d: SceFloat,
}
impl ::core::default::Default for SceFPlane {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceUnion32 {
    pub _bindgen_data_: [u64; 1usize],
}
impl SceUnion32 {
    pub unsafe fn ui(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn us(&mut self) -> *mut [::libc::c_ushort; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut [::libc::c_short; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uc(&mut self) -> *mut [::libc::c_uchar; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut f32 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn p(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceUnion32 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceUnion64 {
    pub _bindgen_data_: [u64; 1usize],
}
impl SceUnion64 {
    pub unsafe fn ull(&mut self) -> *mut SceULong64 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ll(&mut self) -> *mut SceLong64 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut [::libc::c_uint; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut [::libc::c_int; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn us(&mut self) -> *mut [::libc::c_ushort; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut [::libc::c_short; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uc(&mut self) -> *mut [::libc::c_uchar; 8usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut [f32; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fv(&mut self) -> *mut SceFVector2 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn iv(&mut self) -> *mut SceIVector2 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceUnion64 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceUnion128 {
    pub _bindgen_data_: [u64; 2usize],
}
impl SceUnion128 {
    pub unsafe fn ull(&mut self) -> *mut [SceULong64; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ll(&mut self) -> *mut [SceLong64; 2usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ui(&mut self) -> *mut [::libc::c_uint; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut [::libc::c_int; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn us(&mut self) -> *mut [::libc::c_ushort; 8usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut [::libc::c_short; 8usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uc(&mut self) -> *mut [::libc::c_uchar; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut [::libc::c_char; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut [f32; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fv(&mut self) -> *mut SceFVector4 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fq(&mut self) -> *mut SceFQuaternion {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fp(&mut self) -> *mut SceFPlane {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fc(&mut self) -> *mut SceFColor {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn iv(&mut self) -> *mut SceIVector4 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceUnion128 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceDateTime {
    pub year: ::libc::c_ushort,
    pub month: ::libc::c_ushort,
    pub day: ::libc::c_ushort,
    pub hour: ::libc::c_ushort,
    pub minute: ::libc::c_ushort,
    pub second: ::libc::c_ushort,
    pub microsecond: ::libc::c_uint,
}
impl ::core::default::Default for SceDateTime {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceMode = ::libc::c_int;
pub type SceOff = SceInt64;
pub type SceUID = ::libc::c_int;
pub type ScePID = ::libc::c_int;
pub type SceName = *mut ::libc::c_char;
pub type Enum_Unnamed2 = u32;
pub const SCE_APPMGR_ERROR_BUSY: Enum_Unnamed2 = 2155880448;
pub const SCE_APPMGR_ERROR_STATE: Enum_Unnamed2 = 2155880467;
pub const SCE_APPMGR_ERROR_NULL_POINTER: Enum_Unnamed2 = 2155880470;
pub const SCE_APPMGR_ERROR_INVALID: Enum_Unnamed2 = 2155880474;
pub const SCE_APPMGR_ERROR_INVALID_SELF_PATH: Enum_Unnamed2 = 2155880478;
pub const SCE_APPMGR_ERROR_TOO_LONG_ARGV: Enum_Unnamed2 = 2155880477;
pub type Enum_Unnamed3 = u32;
pub const SCE_APPMGR_SYSTEMEVENT_ON_RESUME: Enum_Unnamed3 = 268435459;
pub const SCE_APPMGR_SYSTEMEVENT_ON_STORE_PURCHASE: Enum_Unnamed3 = 268435460;
pub const SCE_APPMGR_SYSTEMEVENT_ON_NP_MESSAGE_ARRIVED: Enum_Unnamed3 =
    268435461;
pub const SCE_APPMGR_SYSTEMEVENT_ON_STORE_REDEMPTION: Enum_Unnamed3 =
    268435462;
pub type Enum_Unnamed4 = u32;
pub const SCE_APPMGR_INFOBAR_VISIBILITY_INVISIBLE: Enum_Unnamed4 = 0;
pub const SCE_APPMGR_INFOBAR_VISIBILITY_VISIBLE: Enum_Unnamed4 = 1;
pub type Enum_Unnamed5 = u32;
pub const SCE_APPMGR_INFOBAR_COLOR_BLACK: Enum_Unnamed5 = 0;
pub const SCE_APPMGR_INFOBAR_COLOR_WHITE: Enum_Unnamed5 = 1;
pub type Enum_Unnamed6 = u32;
pub const SCE_APPMGR_INFOBAR_TRANSPARENCY_OPAQUE: Enum_Unnamed6 = 0;
pub const SCE_APPMGR_INFOBAR_TRANSPARENCY_TRANSLUCENT: Enum_Unnamed6 = 1;
#[repr(C)]
#[derive(Copy)]
pub struct SceAppMgrSystemEvent {
    pub systemEvent: ::libc::c_int,
    pub reserved: [uint8_t; 60usize],
}
impl ::core::clone::Clone for SceAppMgrSystemEvent {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceAppMgrSystemEvent {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub enum SceAppMgrAppState { }
pub enum SceAppMgrExecOptParam { }
#[repr(C)]
#[derive(Copy)]
pub struct sceAppMgrLoadExecOptParam {
    pub reserved: [::libc::c_int; 64usize],
}
impl ::core::clone::Clone for sceAppMgrLoadExecOptParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for sceAppMgrLoadExecOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed7 = u32;
pub const SCE_APPUTIL_SAVEDATA_DATA_REMOVE_MODE_DEFAULT: Enum_Unnamed7 = 0;
pub type Enum_Unnamed8 = u32;
pub const SCE_APPUTIL_SAVEDATA_DATA_SAVE_MODE_FILE: Enum_Unnamed8 = 0;
pub type Enum_Unnamed9 = u32;
pub const SCE_APPUTIL_ERROR_PARAMETER: Enum_Unnamed9 = 2148533760;
pub const SCE_APPUTIL_ERROR_NOT_INITIALIZED: Enum_Unnamed9 = 2148533761;
pub const SCE_APPUTIL_ERROR_NO_MEMORY: Enum_Unnamed9 = 2148533762;
pub const SCE_APPUTIL_ERROR_BUSY: Enum_Unnamed9 = 2148533763;
pub const SCE_APPUTIL_ERROR_NOT_MOUNTED: Enum_Unnamed9 = 2148533764;
pub const SCE_APPUTIL_ERROR_NO_PERMISSION: Enum_Unnamed9 = 2148533765;
pub const SCE_APPUTIL_ERROR_APPEVENT_PARSE_INVALID_DATA: Enum_Unnamed9 =
    2148533792;
pub const SCE_APPUTIL_ERROR_SAVEDATA_SLOT_EXISTS: Enum_Unnamed9 = 2148533824;
pub const SCE_APPUTIL_ERROR_SAVEDATA_SLOT_NOT_FOUND: Enum_Unnamed9 =
    2148533825;
pub const SCE_APPUTIL_ERROR_SAVEDATA_NO_SPACE_QUOTA: Enum_Unnamed9 =
    2148533826;
pub const SCE_APPUTIL_ERROR_SAVEDATA_NO_SPACE_FS: Enum_Unnamed9 = 2148533827;
pub const SCE_APPUTIL_ERROR_PHOTO_DEVICE_NOT_FOUND: Enum_Unnamed9 =
    2148533888;
pub type SceAppUtilBootAttribute = ::libc::c_uint;
pub type SceAppUtilAppEventType = ::libc::c_uint;
pub type SceAppUtilSaveDataSlotId = ::libc::c_uint;
pub type SceAppUtilSaveDataSlotStatus = ::libc::c_uint;
pub type SceAppUtilSaveDataSaveMode = ::libc::c_uint;
pub type SceAppUtilSaveDataRemoveMode = ::libc::c_uint;
pub type SceAppUtilAppParamId = ::libc::c_uint;
pub type SceAppUtilBgdlStatusType = ::libc::c_uint;
pub enum SceAppUtilBgdlStatus { }
#[repr(C)]
#[derive(Copy)]
pub struct SceAppUtilInitParam {
    pub workBufSize: SceSize,
    pub reserved: [uint8_t; 60usize],
}
impl ::core::clone::Clone for SceAppUtilInitParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceAppUtilInitParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilBootParam {
    pub attr: SceAppUtilBootAttribute,
    pub appVersion: ::libc::c_uint,
    pub reserved: [uint8_t; 32usize],
}
impl ::core::default::Default for SceAppUtilBootParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilSaveDataMountPoint {
    pub data: [uint8_t; 16usize],
}
impl ::core::default::Default for SceAppUtilSaveDataMountPoint {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceAppUtilAppEventParam {
    pub type_: SceAppUtilAppEventType,
    pub dat: [uint8_t; 1024usize],
}
impl ::core::clone::Clone for SceAppUtilAppEventParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceAppUtilAppEventParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilMountPoint {
    pub data: [int8_t; 16usize],
}
impl ::core::default::Default for SceAppUtilMountPoint {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilSaveDataSlotEmptyParam {
    pub title: *mut SceWChar16,
    pub iconPath: *mut ::libc::c_char,
    pub iconBuf: *mut ::libc::c_void,
    pub iconBufSize: SceSize,
    pub reserved: [uint8_t; 32usize],
}
impl ::core::default::Default for SceAppUtilSaveDataSlotEmptyParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilSaveDataSlot {
    pub id: SceAppUtilSaveDataSlotId,
    pub status: SceAppUtilSaveDataSlotStatus,
    pub userParam: ::libc::c_int,
    pub emptyParam: *mut SceAppUtilSaveDataSlotEmptyParam,
}
impl ::core::default::Default for SceAppUtilSaveDataSlot {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceAppUtilSaveDataSlotParam {
    pub status: SceAppUtilSaveDataSlotStatus,
    pub title: [SceWChar16; 32usize],
    pub subTitle: [SceWChar16; 64usize],
    pub detail: [SceWChar16; 256usize],
    pub iconPath: [::libc::c_char; 64usize],
    pub userParam: ::libc::c_int,
    pub sizeKB: SceSize,
    pub modifiedTime: SceDateTime,
    pub reserved: [uint8_t; 48usize],
}
impl ::core::clone::Clone for SceAppUtilSaveDataSlotParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceAppUtilSaveDataSlotParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceAppUtilSaveDataSaveItem {
    pub dataPath: *const ::libc::c_char,
    pub buf: *const ::libc::c_void,
    pub pad: uint32_t,
    pub offset: SceOff,
    pub mode: SceAppUtilSaveDataSaveMode,
    pub reserved: [uint8_t; 36usize],
}
impl ::core::clone::Clone for SceAppUtilSaveDataSaveItem {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceAppUtilSaveDataSaveItem {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilSaveDataFile {
    pub filePath: *const ::libc::c_char,
    pub buf: *mut ::libc::c_void,
    pub bufSize: SceSize,
    pub offset: SceOff,
    pub mode: ::libc::c_uint,
    pub progDelta: ::libc::c_uint,
    pub reserved: [uint8_t; 32usize],
}
impl ::core::default::Default for SceAppUtilSaveDataFile {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilSaveDataFileSlot {
    pub id: ::libc::c_uint,
    pub slotParam: *mut SceAppUtilSaveDataSlotParam,
    pub reserved: [uint8_t; 32usize],
}
impl ::core::default::Default for SceAppUtilSaveDataFileSlot {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceAppUtilSaveDataRemoveItem {
    pub dataPath: *const ::libc::c_char,
    pub mode: SceAppUtilSaveDataRemoveMode,
    pub reserved: [uint8_t; 36usize],
}
impl ::core::clone::Clone for SceAppUtilSaveDataRemoveItem {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceAppUtilSaveDataRemoveItem {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilStoreBrowseParam {
    pub type_: ::libc::c_uint,
    pub id: *const ::libc::c_char,
}
impl ::core::default::Default for SceAppUtilStoreBrowseParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAppUtilWebBrowserParam {
    pub str: *const ::libc::c_char,
    pub strlen: SceSize,
    pub launchMode: ::libc::c_uint,
    pub reserved: ::libc::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceAppUtilWebBrowserParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed10 = u32;
pub const SCE_AUDIODEC_ERROR_API_FAIL: Enum_Unnamed10 = 2155806720;
pub const SCE_AUDIODEC_ERROR_INVALID_TYPE: Enum_Unnamed10 = 2155806721;
pub const SCE_AUDIODEC_ERROR_INVALID_INIT_PARAM: Enum_Unnamed10 = 2155806722;
pub const SCE_AUDIODEC_ERROR_ALREADY_INITIALIZED: Enum_Unnamed10 = 2155806723;
pub const SCE_AUDIODEC_ERROR_OUT_OF_MEMORY: Enum_Unnamed10 = 2155806724;
pub const SCE_AUDIODEC_ERROR_NOT_INITIALIZED: Enum_Unnamed10 = 2155806725;
pub const SCE_AUDIODEC_ERROR_A_HANDLE_IN_USE: Enum_Unnamed10 = 2155806726;
pub const SCE_AUDIODEC_ERROR_ALL_HANDLES_IN_USE: Enum_Unnamed10 = 2155806727;
pub const SCE_AUDIODEC_ERROR_INVALID_PTR: Enum_Unnamed10 = 2155806728;
pub const SCE_AUDIODEC_ERROR_INVALID_HANDLE: Enum_Unnamed10 = 2155806729;
pub const SCE_AUDIODEC_ERROR_NOT_HANDLE_IN_USE: Enum_Unnamed10 = 2155806730;
pub const SCE_AUDIODEC_ERROR_CH_SHORTAGE: Enum_Unnamed10 = 2155806731;
pub const SCE_AUDIODEC_ERROR_INVALID_WORD_LENGTH: Enum_Unnamed10 = 2155806732;
pub const SCE_AUDIODEC_ERROR_INVALID_SIZE: Enum_Unnamed10 = 2155806733;
pub const SCE_AUDIODEC_ERROR_UNSUPPORTED: Enum_Unnamed10 = 2155806734;
pub const SCE_AUDIODEC_ERROR_INVALID_NFRAMES: Enum_Unnamed10 = 2155806735;
pub const SCE_AUDIODEC_ERROR_INVALID_NSTREAMS: Enum_Unnamed10 = 2155806736;
pub const SCE_AUDIODEC_ERROR_DIFFERENT_TYPES: Enum_Unnamed10 = 2155806737;
pub const SCE_AUDIODEC_ERROR_SAME_HANDLES: Enum_Unnamed10 = 2155806738;
pub const SCE_AUDIODEC_AT9_ERROR_INVALID_CONFIG: Enum_Unnamed10 = 2155814912;
pub const SCE_AUDIODEC_MP3_ERROR_INVALID_CH: Enum_Unnamed10 = 2155816960;
pub const SCE_AUDIODEC_MP3_ERROR_INVALID_MPEG_VERSION: Enum_Unnamed10 =
    2155816961;
pub const SCE_AUDIODEC_AAC_ERROR_INVALID_CH: Enum_Unnamed10 = 2155819008;
pub const SCE_AUDIODEC_CELP_ERROR_INVALID_CONFIG: Enum_Unnamed10 = 2155821056;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInitStreamParam {
    pub size: SceUInt32,
    pub totalStreams: SceUInt32,
}
impl ::core::default::Default for SceAudiodecInitStreamParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInitChParam {
    pub size: SceUInt32,
    pub totalCh: SceUInt32,
}
impl ::core::default::Default for SceAudiodecInitChParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInitParam {
    pub _bindgen_data_: [u32; 2usize],
}
impl SceAudiodecInitParam {
    pub unsafe fn size(&mut self) -> *mut SceUInt32 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn at9(&mut self) -> *mut SceAudiodecInitChParam {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mp3(&mut self) -> *mut SceAudiodecInitStreamParam {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn aac(&mut self) -> *mut SceAudiodecInitStreamParam {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn celp(&mut self) -> *mut SceAudiodecInitStreamParam {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceAudiodecInitParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInfoAt9 {
    pub size: SceUInt32,
    pub configData: [SceUInt8; 4usize],
    pub ch: SceUInt32,
    pub bitRate: SceUInt32,
    pub samplingRate: SceUInt32,
    pub superFrameSize: SceUInt32,
    pub framesInSuperFrame: SceUInt32,
}
impl ::core::default::Default for SceAudiodecInfoAt9 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInfoMp3 {
    pub size: SceUInt32,
    pub ch: SceUInt32,
    pub version: SceUInt32,
}
impl ::core::default::Default for SceAudiodecInfoMp3 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInfoAac {
    pub size: SceUInt32,
    pub isAdts: SceUInt32,
    pub ch: SceUInt32,
    pub samplingRate: SceUInt32,
    pub isSbr: SceUInt32,
}
impl ::core::default::Default for SceAudiodecInfoAac {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInfoCelp {
    pub size: SceUInt32,
    pub excitationMode: SceUInt32,
    pub samplingRate: SceUInt32,
    pub bitRate: SceUInt32,
    pub lostCount: SceUInt32,
}
impl ::core::default::Default for SceAudiodecInfoCelp {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecInfo {
    pub _bindgen_data_: [u32; 7usize],
}
impl SceAudiodecInfo {
    pub unsafe fn size(&mut self) -> *mut SceUInt32 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn at9(&mut self) -> *mut SceAudiodecInfoAt9 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mp3(&mut self) -> *mut SceAudiodecInfoMp3 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn aac(&mut self) -> *mut SceAudiodecInfoAac {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn celp(&mut self) -> *mut SceAudiodecInfoCelp {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceAudiodecInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudiodecCtrl {
    pub size: SceUInt32,
    pub handle: SceInt32,
    pub pEs: *mut SceUInt8,
    pub inputEsSize: SceUInt32,
    pub maxEsSize: SceUInt32,
    pub pPcm: *mut ::libc::c_void,
    pub outputPcmSize: SceUInt32,
    pub maxPcmSize: SceUInt32,
    pub wordLength: SceUInt32,
    pub pInfo: *mut SceAudiodecInfo,
}
impl ::core::default::Default for SceAudiodecCtrl {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed11 = u32;
pub const SCE_ATRAC_ERROR_INVALID_POINTER: Enum_Unnamed11 = 2153971712;
pub const SCE_ATRAC_ERROR_INVALID_SIZE: Enum_Unnamed11 = 2153971713;
pub const SCE_ATRAC_ERROR_INVALID_WORD_LENGTH: Enum_Unnamed11 = 2153971714;
pub const SCE_ATRAC_ERROR_INVALID_TYPE: Enum_Unnamed11 = 2153971715;
pub const SCE_ATRAC_ERROR_INVALID_TOTAL_CH: Enum_Unnamed11 = 2153971716;
pub const SCE_ATRAC_ERROR_INVALID_ALIGNMENT: Enum_Unnamed11 = 2153971717;
pub const SCE_ATRAC_ERROR_ALREADY_CREATED: Enum_Unnamed11 = 2153971718;
pub const SCE_ATRAC_ERROR_NOT_CREATED: Enum_Unnamed11 = 2153971719;
pub const SCE_ATRAC_ERROR_SHORTAGE_OF_CH: Enum_Unnamed11 = 2153971720;
pub const SCE_ATRAC_ERROR_UNSUPPORTED_DATA: Enum_Unnamed11 = 2153971721;
pub const SCE_ATRAC_ERROR_INVALID_DATA: Enum_Unnamed11 = 2153971722;
pub const SCE_ATRAC_ERROR_READ_SIZE_IS_TOO_SMALL: Enum_Unnamed11 = 2153971723;
pub const SCE_ATRAC_ERROR_INVALID_HANDLE: Enum_Unnamed11 = 2153971724;
pub const SCE_ATRAC_ERROR_READ_SIZE_OVER_BUFFER: Enum_Unnamed11 = 2153971725;
pub const SCE_ATRAC_ERROR_MAIN_BUFFER_SIZE_IS_TOO_SMALL: Enum_Unnamed11 =
    2153971726;
pub const SCE_ATRAC_ERROR_SUB_BUFFER_SIZE_IS_TOO_SMALL: Enum_Unnamed11 =
    2153971727;
pub const SCE_ATRAC_ERROR_DATA_SHORTAGE_IN_BUFFER: Enum_Unnamed11 =
    2153971728;
pub const SCE_ATRAC_ERROR_ALL_DATA_WAS_DECODED: Enum_Unnamed11 = 2153971729;
pub const SCE_ATRAC_ERROR_INVALID_MAX_OUTPUT_SAMPLES: Enum_Unnamed11 =
    2153971730;
pub const SCE_ATRAC_ERROR_ADDED_DATA_IS_TOO_BIG: Enum_Unnamed11 = 2153971731;
pub const SCE_ATRAC_ERROR_NEED_SUB_BUFFER: Enum_Unnamed11 = 2153971732;
pub const SCE_ATRAC_ERROR_INVALID_SAMPLE: Enum_Unnamed11 = 2153971733;
pub const SCE_ATRAC_ERROR_NO_NEED_SUB_BUFFER: Enum_Unnamed11 = 2153971734;
pub const SCE_ATRAC_ERROR_INVALID_LOOP_STATUS: Enum_Unnamed11 = 2153971735;
pub const SCE_ATRAC_ERROR_REMAIN_VALID_HANDLE: Enum_Unnamed11 = 2153971736;
pub const SCE_ATRAC_ERROR_INVALID_LOOP_NUM: Enum_Unnamed11 = 2153971760;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAtracDecoderGroup {
    pub size: SceUInt32,
    pub wordLength: SceUInt32,
    pub totalCh: SceUInt32,
}
impl ::core::default::Default for SceAtracDecoderGroup {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAtracContentInfo {
    pub size: SceUInt32,
    pub atracType: SceUInt32,
    pub channel: SceUInt32,
    pub samplingRate: SceUInt32,
    pub endSample: SceInt32,
    pub loopStartSample: SceInt32,
    pub loopEndSample: SceInt32,
    pub bitRate: SceUInt32,
    pub fixedEncBlockSize: SceUInt32,
    pub fixedEncBlockSample: SceUInt32,
    pub frameSample: SceUInt32,
    pub loopBlockOffset: SceUInt32,
    pub loopBlockSize: SceUInt32,
}
impl ::core::default::Default for SceAtracContentInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAtracStreamInfo {
    pub size: SceUInt32,
    pub pWritePosition: *mut SceUChar8,
    pub readPosition: SceUInt32,
    pub writableSize: SceUInt32,
}
impl ::core::default::Default for SceAtracStreamInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed12 = u32;
pub const SCE_AUDIOENC_ERROR_API_FAIL: Enum_Unnamed12 = 2156265472;
pub const SCE_AUDIOENC_ERROR_INVALID_TYPE: Enum_Unnamed12 = 2156265473;
pub const SCE_AUDIOENC_ERROR_INVALID_INIT_PARAM: Enum_Unnamed12 = 2156265474;
pub const SCE_AUDIOENC_ERROR_ALREADY_INITIALIZED: Enum_Unnamed12 = 2156265475;
pub const SCE_AUDIOENC_ERROR_OUT_OF_MEMORY: Enum_Unnamed12 = 2156265476;
pub const SCE_AUDIOENC_ERROR_NOT_INITIALIZED: Enum_Unnamed12 = 2156265477;
pub const SCE_AUDIOENC_ERROR_A_HANDLE_IN_USE: Enum_Unnamed12 = 2156265478;
pub const SCE_AUDIOENC_ERROR_ALL_HANDLES_IN_USE: Enum_Unnamed12 = 2156265479;
pub const SCE_AUDIOENC_ERROR_INVALID_PTR: Enum_Unnamed12 = 2156265480;
pub const SCE_AUDIOENC_ERROR_INVALID_HANDLE: Enum_Unnamed12 = 2156265481;
pub const SCE_AUDIOENC_ERROR_NOT_HANDLE_IN_USE: Enum_Unnamed12 = 2156265482;
pub const SCE_AUDIOENC_ERROR_CH_SHORTAGE: Enum_Unnamed12 = 2156265483;
pub const SCE_AUDIOENC_ERROR_INVALID_WORD_LENGTH: Enum_Unnamed12 = 2156265484;
pub const SCE_AUDIOENC_ERROR_INVALID_SIZE: Enum_Unnamed12 = 2156265485;
pub const SCE_AUDIOENC_ERROR_INVALID_ALIGNMENT: Enum_Unnamed12 = 2156265486;
pub type Enum_Unnamed13 = u32;
pub const SCE_AUDIOENC_CELP_ERROR_INVALID_CONFIG: Enum_Unnamed13 = 2156269569;
pub type Enum_Unnamed14 = u32;
pub const SCE_AUDIOENC_CELP_BIT_RATE_3850BPS: Enum_Unnamed14 = 3850;
pub const SCE_AUDIOENC_CELP_BIT_RATE_4650BPS: Enum_Unnamed14 = 4650;
pub const SCE_AUDIOENC_CELP_BIT_RATE_5700BPS: Enum_Unnamed14 = 5700;
pub const SCE_AUDIOENC_CELP_BIT_RATE_7300BPS: Enum_Unnamed14 = 7300;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencInitStreamParam {
    pub size: SceSize,
    pub totalStreams: ::libc::c_uint,
}
impl ::core::default::Default for SceAudioencInitStreamParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencInfoCelp {
    pub size: SceSize,
    pub excitationMode: ::libc::c_uint,
    pub samplingRate: ::libc::c_uint,
    pub bitRate: ::libc::c_uint,
}
impl ::core::default::Default for SceAudioencInfoCelp {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencOptInfoCelp {
    pub size: SceSize,
    pub header: [uint8_t; 32usize],
    pub headerSize: SceSize,
    pub encoderVersion: ::libc::c_uint,
}
impl ::core::default::Default for SceAudioencOptInfoCelp {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencInitParam {
    pub _bindgen_data_: [u32; 2usize],
}
impl SceAudioencInitParam {
    pub unsafe fn size(&mut self) -> *mut SceSize {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn celp(&mut self) -> *mut SceAudioencInitStreamParam {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceAudioencInitParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencInfo {
    pub _bindgen_data_: [u32; 4usize],
}
impl SceAudioencInfo {
    pub unsafe fn size(&mut self) -> *mut SceSize {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn celp(&mut self) -> *mut SceAudioencInfoCelp {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceAudioencInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencOptInfo {
    pub _bindgen_data_: [u32; 11usize],
}
impl SceAudioencOptInfo {
    pub unsafe fn size(&mut self) -> *mut SceSize {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn celp(&mut self) -> *mut SceAudioencOptInfoCelp {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceAudioencOptInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceAudioencCtrl {
    pub size: SceSize,
    pub handle: ::libc::c_int,
    pub pInputPcm: *mut ::libc::c_void,
    pub inputPcmSize: SceSize,
    pub maxPcmSize: SceSize,
    pub pOutputEs: *mut ::libc::c_void,
    pub outputEsSize: SceSize,
    pub maxEsSize: SceSize,
    pub wordLength: SceSize,
    pub pInfo: *mut SceAudioencInfo,
    pub pOptInfo: *mut SceAudioencOptInfo,
}
impl ::core::default::Default for SceAudioencCtrl {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed15 = u32;
pub const SCE_AUDIO_IN_ERROR_FATAL: Enum_Unnamed15 = 2149974272;
pub const SCE_AUDIO_IN_ERROR_INVALID_PORT: Enum_Unnamed15 = 2149974273;
pub const SCE_AUDIO_IN_ERROR_INVALID_SIZE: Enum_Unnamed15 = 2149974274;
pub const SCE_AUDIO_IN_ERROR_INVALID_SAMPLE_FREQ: Enum_Unnamed15 = 2149974275;
pub const SCE_AUDIO_IN_ERROR_INVALID_PORT_TYPE: Enum_Unnamed15 = 2149974276;
pub const SCE_AUDIO_IN_ERROR_INVALID_POINTER: Enum_Unnamed15 = 2149974277;
pub const SCE_AUDIO_IN_ERROR_INVALID_PORT_PARAM: Enum_Unnamed15 = 2149974278;
pub const SCE_AUDIO_IN_ERROR_PORT_FULL: Enum_Unnamed15 = 2149974279;
pub const SCE_AUDIO_IN_ERROR_OUT_OF_MEMORY: Enum_Unnamed15 = 2149974280;
pub const SCE_AUDIO_IN_ERROR_NOT_OPENED: Enum_Unnamed15 = 2149974281;
pub const SCE_AUDIO_IN_ERROR_BUSY: Enum_Unnamed15 = 2149974282;
pub type Enum_Unnamed16 = u32;
pub const SCE_AUDIO_IN_PORT_TYPE_VOICE: Enum_Unnamed16 = 0;
pub const SCE_AUDIO_IN_PORT_TYPE_RAW: Enum_Unnamed16 = 2;
pub type Enum_Unnamed17 = u32;
pub const SCE_AUDIO_IN_PARAM_FORMAT_S16_MONO: Enum_Unnamed17 = 0;
pub const SCE_AUDIO_IN_GETSTATUS_MUTE: Enum_Unnamed17 = 1;
pub type Enum_Unnamed18 = u32;
pub const SCE_AUDIO_OUT_ERROR_NOT_OPENED: Enum_Unnamed18 = 2149974017;
pub const SCE_AUDIO_OUT_ERROR_BUSY: Enum_Unnamed18 = 2149974018;
pub const SCE_AUDIO_OUT_ERROR_INVALID_PORT: Enum_Unnamed18 = 2149974019;
pub const SCE_AUDIO_OUT_ERROR_INVALID_POINTER: Enum_Unnamed18 = 2149974020;
pub const SCE_AUDIO_OUT_ERROR_PORT_FULL: Enum_Unnamed18 = 2149974021;
pub const SCE_AUDIO_OUT_ERROR_INVALID_SIZE: Enum_Unnamed18 = 2149974022;
pub const SCE_AUDIO_OUT_ERROR_INVALID_FORMAT: Enum_Unnamed18 = 2149974023;
pub const SCE_AUDIO_OUT_ERROR_INVALID_SAMPLE_FREQ: Enum_Unnamed18 =
    2149974024;
pub const SCE_AUDIO_OUT_ERROR_INVALID_VOLUME: Enum_Unnamed18 = 2149974025;
pub const SCE_AUDIO_OUT_ERROR_INVALID_PORT_TYPE: Enum_Unnamed18 = 2149974026;
pub const SCE_AUDIO_OUT_ERROR_INVALID_FX_TYPE: Enum_Unnamed18 = 2149974027;
pub const SCE_AUDIO_OUT_ERROR_INVALID_CONF_TYPE: Enum_Unnamed18 = 2149974028;
pub const SCE_AUDIO_OUT_ERROR_OUT_OF_MEMORY: Enum_Unnamed18 = 2149974029;
pub type Enum_Unnamed19 = u32;
pub const SCE_AUDIO_OUT_PORT_TYPE_MAIN: Enum_Unnamed19 = 0;
pub const SCE_AUDIO_OUT_PORT_TYPE_BGM: Enum_Unnamed19 = 1;
pub const SCE_AUDIO_OUT_PORT_TYPE_VOICE: Enum_Unnamed19 = 2;
pub type Enum_Unnamed20 = u32;
pub const SCE_AUDIO_OUT_MODE_MONO: Enum_Unnamed20 = 0;
pub const SCE_AUDIO_OUT_MODE_STEREO: Enum_Unnamed20 = 1;
pub type Enum_Unnamed21 = u32;
pub const SCE_AUDIO_VOLUME_FLAG_L_CH: Enum_Unnamed21 = 1;
pub const SCE_AUDIO_VOLUME_FLAG_R_CH: Enum_Unnamed21 = 2;
pub type Enum_Unnamed22 = u32;
pub const SCE_AUDIO_OUT_CONFIG_TYPE_LEN: Enum_Unnamed22 = 0;
pub const SCE_AUDIO_OUT_CONFIG_TYPE_FREQ: Enum_Unnamed22 = 1;
pub const SCE_AUDIO_OUT_CONFIG_TYPE_MODE: Enum_Unnamed22 = 2;
pub type Enum_Unnamed23 = u32;
pub const SCE_AUDIO_ALC_OFF: Enum_Unnamed23 = 0;
pub const SCE_AUDIO_ALC_MODE1: Enum_Unnamed23 = 1;
pub const SCE_AUDIO_ALC_MODE_MAX: Enum_Unnamed23 = 2;
pub type Enum_Unnamed24 = u32;
pub const SCE_CAMERA_ERROR_PARAM: Enum_Unnamed24 = 2150498304;
pub const SCE_CAMERA_ERROR_ALREADY_INIT: Enum_Unnamed24 = 2150498305;
pub const SCE_CAMERA_ERROR_NOT_INIT: Enum_Unnamed24 = 2150498306;
pub const SCE_CAMERA_ERROR_ALREADY_OPEN: Enum_Unnamed24 = 2150498307;
pub const SCE_CAMERA_ERROR_NOT_OPEN: Enum_Unnamed24 = 2150498308;
pub const SCE_CAMERA_ERROR_ALREADY_START: Enum_Unnamed24 = 2150498309;
pub const SCE_CAMERA_ERROR_NOT_START: Enum_Unnamed24 = 2150498310;
pub const SCE_CAMERA_ERROR_FORMAT_UNKNOWN: Enum_Unnamed24 = 2150498311;
pub const SCE_CAMERA_ERROR_RESOLUTION_UNKNOWN: Enum_Unnamed24 = 2150498312;
pub const SCE_CAMERA_ERROR_BAD_FRAMERATE: Enum_Unnamed24 = 2150498313;
pub const SCE_CAMERA_ERROR_TIMEOUT: Enum_Unnamed24 = 2150498314;
pub const SCE_CAMERA_ERROR_EXCLUSIVE: Enum_Unnamed24 = 2150498315;
pub const SCE_CAMERA_ERROR_ATTRIBUTE_UNKNOWN: Enum_Unnamed24 = 2150498316;
pub const SCE_CAMERA_ERROR_MAX_PROCESS: Enum_Unnamed24 = 2150498317;
pub const SCE_CAMERA_ERROR_NOT_ACTIVE: Enum_Unnamed24 = 2150498318;
pub const SCE_CAMERA_ERROR_FATAL: Enum_Unnamed24 = 2150498559;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCameraInfo {
    pub size: SceSize,
    pub priority: uint16_t,
    pub format: uint16_t,
    pub resolution: uint16_t,
    pub framerate: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub range: uint16_t,
    pub pad: uint16_t,
    pub sizeIBase: SceSize,
    pub sizeUBase: SceSize,
    pub sizeVBase: SceSize,
    pub pIBase: *mut ::libc::c_void,
    pub pUBase: *mut ::libc::c_void,
    pub pVBase: *mut ::libc::c_void,
    pub pitch: uint16_t,
    pub buffer: uint16_t,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceCameraInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCameraRead {
    pub size: SceSize,
    pub mode: ::libc::c_int,
    pub pad: ::libc::c_int,
    pub status: ::libc::c_int,
    pub frame: uint64_t,
    pub timestamp: uint64_t,
    pub sizeIBase: SceSize,
    pub sizeUBase: SceSize,
    pub sizeVBase: SceSize,
    pub pIBase: *mut ::libc::c_void,
    pub pUBase: *mut ::libc::c_void,
    pub pVBase: *mut ::libc::c_void,
}
impl ::core::default::Default for SceCameraRead {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type _LOCK_T = ::libc::c_int;
pub type _LOCK_RECURSIVE_T = ::libc::c_int;
pub type _off_t = ::libc::c_long;
pub type __dev_t = ::libc::c_short;
pub type __uid_t = ::libc::c_ushort;
pub type __gid_t = ::libc::c_ushort;
pub type _off64_t = ::libc::c_longlong;
pub type _fpos_t = ::libc::c_long;
pub type _ssize_t = ::libc::c_long;
pub type wint_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed25,
}
impl ::core::default::Default for _mbstate_t {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed25 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed25 {
    pub unsafe fn __wch(&mut self) -> *mut wint_t {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_uchar; 4usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for Union_Unnamed25 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type _flock_t = _LOCK_RECURSIVE_T;
pub type _iconv_t = *mut ::libc::c_void;
pub type __ULong = ::libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: ::libc::c_int,
    pub _maxwds: ::libc::c_int,
    pub _sign: ::libc::c_int,
    pub _wds: ::libc::c_int,
    pub _x: [__ULong; 1usize],
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for _Bigint {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __tm {
    pub __tm_sec: ::libc::c_int,
    pub __tm_min: ::libc::c_int,
    pub __tm_hour: ::libc::c_int,
    pub __tm_mday: ::libc::c_int,
    pub __tm_mon: ::libc::c_int,
    pub __tm_year: ::libc::c_int,
    pub __tm_wday: ::libc::c_int,
    pub __tm_yday: ::libc::c_int,
    pub __tm_isdst: ::libc::c_int,
}
impl ::core::default::Default for __tm {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _on_exit_args {
    pub _fnargs: [*mut ::libc::c_void; 32usize],
    pub _dso_handle: [*mut ::libc::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
impl ::core::default::Default for _on_exit_args {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: ::libc::c_int,
    pub _fns: [::core::option::Option<extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
impl ::core::default::Default for _atexit {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for __sbuf {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _read: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                           arg2:
                                                               *mut ::libc::c_void,
                                                           arg3:
                                                               *mut ::libc::c_char,
                                                           arg4:
                                                               ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _write: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                            arg2:
                                                                *mut ::libc::c_void,
                                                            arg3:
                                                                *const ::libc::c_char,
                                                            arg4:
                                                                ::libc::c_int)
                                           -> ::libc::c_int>,
    pub _seek: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                           arg2:
                                                               *mut ::libc::c_void,
                                                           arg3: _fpos_t,
                                                           arg4:
                                                               ::libc::c_int)
                                          -> _fpos_t>,
    pub _close: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                            arg2:
                                                                *mut ::libc::c_void)
                                           -> ::libc::c_int>,
    pub _ub: __sbuf,
    pub _up: *mut ::libc::c_uchar,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: ::libc::c_int,
}
impl ::core::default::Default for __sFILE {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type __FILE = __sFILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: ::libc::c_int,
    pub _iobs: *mut __FILE,
}
impl ::core::default::Default for _glue {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _rand48 {
    pub _seed: [::libc::c_ushort; 3usize],
    pub _mult: [::libc::c_ushort; 3usize],
    pub _add: ::libc::c_ushort,
}
impl ::core::default::Default for _rand48 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _reent {
    pub _errno: ::libc::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: ::libc::c_int,
    pub _emergency: [::libc::c_char; 25usize],
    pub _current_category: ::libc::c_int,
    pub _current_locale: *const ::libc::c_char,
    pub __sdidinit: ::libc::c_int,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: ::libc::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: ::libc::c_int,
    pub _cvtbuf: *mut ::libc::c_char,
    pub _new: Union_Unnamed26,
    pub _atexit: *mut _atexit,
    pub _atexit0: _atexit,
    pub _sig_func: ::libc::c_void,
    pub __sglue: _glue,
    pub __sf: [__FILE; 3usize],
}
impl ::core::default::Default for _reent {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Union_Unnamed26 {
    pub _bindgen_data_: [u64; 32usize],
    pub _bindgen_data_2: [u64; 13usize]
}
impl Union_Unnamed26 {
    pub unsafe fn _reent(&mut self) -> *mut Struct_Unnamed27 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _unused(&mut self) -> *mut Struct_Unnamed28 {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for Union_Unnamed26 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed27 {
    pub _unused_rand: ::libc::c_uint,
    pub _strtok_last: *mut ::libc::c_char,
    pub _asctime_buf: [::libc::c_char; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: ::libc::c_int,
    pub _rand_next: ::libc::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [::libc::c_char; 8usize],
    pub _signal_buf: [::libc::c_char; 24usize],
    pub _getdate_err: ::libc::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: ::libc::c_int,
}
impl ::core::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed28 {
    pub _nextf: [*mut ::libc::c_uchar; 30usize],
    pub _nmalloc: [::libc::c_uint; 30usize],
}
impl ::core::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceSystemParamId = SceUInt32;
pub type Enum_Unnamed29 = u32;
pub const SCE_SYSTEM_PARAM_ID_LANG: Enum_Unnamed29 = 1;
pub const SCE_SYSTEM_PARAM_ID_ENTER_BUTTON: Enum_Unnamed29 = 2;
pub const SCE_SYSTEM_PARAM_ID_USERNAME: Enum_Unnamed29 = 3;
pub const SCE_SYSTEM_PARAM_ID_DATE_FORMAT: Enum_Unnamed29 = 4;
pub const SCE_SYSTEM_PARAM_ID_TIME_FORMAT: Enum_Unnamed29 = 5;
pub const SCE_SYSTEM_PARAM_ID_TIME_ZONE: Enum_Unnamed29 = 6;
pub const SCE_SYSTEM_PARAM_ID_DAYLIGHT_SAVINGS: Enum_Unnamed29 = 7;
pub type SceSystemParamLang = SceInt32;
pub type Enum_Unnamed30 = u32;
pub const SCE_SYSTEM_PARAM_LANG_JAPANESE: Enum_Unnamed30 = 0;
pub const SCE_SYSTEM_PARAM_LANG_ENGLISH_US: Enum_Unnamed30 = 1;
pub const SCE_SYSTEM_PARAM_LANG_FRENCH: Enum_Unnamed30 = 2;
pub const SCE_SYSTEM_PARAM_LANG_SPANISH: Enum_Unnamed30 = 3;
pub const SCE_SYSTEM_PARAM_LANG_GERMAN: Enum_Unnamed30 = 4;
pub const SCE_SYSTEM_PARAM_LANG_ITALIAN: Enum_Unnamed30 = 5;
pub const SCE_SYSTEM_PARAM_LANG_DUTCH: Enum_Unnamed30 = 6;
pub const SCE_SYSTEM_PARAM_LANG_PORTUGUESE: Enum_Unnamed30 = 7;
pub const SCE_SYSTEM_PARAM_LANG_RUSSIAN: Enum_Unnamed30 = 8;
pub const SCE_SYSTEM_PARAM_LANG_KOREAN: Enum_Unnamed30 = 9;
pub const SCE_SYSTEM_PARAM_LANG_CHINESE_T: Enum_Unnamed30 = 10;
pub const SCE_SYSTEM_PARAM_LANG_CHINESE_S: Enum_Unnamed30 = 11;
pub const SCE_SYSTEM_PARAM_LANG_FINNISH: Enum_Unnamed30 = 12;
pub const SCE_SYSTEM_PARAM_LANG_SWEDISH: Enum_Unnamed30 = 13;
pub const SCE_SYSTEM_PARAM_LANG_DANISH: Enum_Unnamed30 = 14;
pub const SCE_SYSTEM_PARAM_LANG_NORWEGIAN: Enum_Unnamed30 = 15;
pub const SCE_SYSTEM_PARAM_LANG_POLISH: Enum_Unnamed30 = 16;
pub const SCE_SYSTEM_PARAM_LANG_POLISH_BR: Enum_Unnamed30 = 17;
pub const SCE_SYSTEM_PARAM_LANG_ENGLISH_GB: Enum_Unnamed30 = 18;
pub type SceSystemParamEnterButtonAssign = SceInt32;
pub type Enum_Unnamed31 = u32;
pub const SCE_SYSTEM_PARAM_ENTER_BUTTON_CIRCLE: Enum_Unnamed31 = 0;
pub const SCE_SYSTEM_PARAM_ENTER_BUTTON_CROSS: Enum_Unnamed31 = 1;
pub type Enum_Unnamed32 = u32;
pub const SCE_SYSTEM_PARAM_DATE_FORMAT_YYYYMMDD: Enum_Unnamed32 = 0;
pub const SCE_SYSTEM_PARAM_DATE_FORMAT_DDMMYYYY: Enum_Unnamed32 = 1;
pub const SCE_SYSTEM_PARAM_DATE_FORMAT_MMDDYYYY: Enum_Unnamed32 = 2;
pub type Enum_Unnamed33 = u32;
pub const SCE_SYSTEM_PARAM_TIME_FORMAT_12HR: Enum_Unnamed33 = 0;
pub const SCE_SYSTEM_PARAM_TIME_FORMAT_24HR: Enum_Unnamed33 = 1;
pub type Enum_Unnamed34 = u32;
pub const SCE_GXM_ERROR_UNINITIALIZED: Enum_Unnamed34 = 2153447424;
pub const SCE_GXM_ERROR_ALREADY_INITIALIZED: Enum_Unnamed34 = 2153447425;
pub const SCE_GXM_ERROR_OUT_OF_MEMORY: Enum_Unnamed34 = 2153447426;
pub const SCE_GXM_ERROR_INVALID_VALUE: Enum_Unnamed34 = 2153447427;
pub const SCE_GXM_ERROR_INVALID_POINTER: Enum_Unnamed34 = 2153447428;
pub const SCE_GXM_ERROR_INVALID_ALIGNMENT: Enum_Unnamed34 = 2153447429;
pub const SCE_GXM_ERROR_NOT_WITHIN_SCENE: Enum_Unnamed34 = 2153447430;
pub const SCE_GXM_ERROR_WITHIN_SCENE: Enum_Unnamed34 = 2153447431;
pub const SCE_GXM_ERROR_NULL_PROGRAM: Enum_Unnamed34 = 2153447432;
pub const SCE_GXM_ERROR_UNSUPPORTED: Enum_Unnamed34 = 2153447433;
pub const SCE_GXM_ERROR_PATCHER_INTERNAL: Enum_Unnamed34 = 2153447434;
pub const SCE_GXM_ERROR_RESERVE_FAILED: Enum_Unnamed34 = 2153447435;
pub const SCE_GXM_ERROR_PROGRAM_IN_USE: Enum_Unnamed34 = 2153447436;
pub const SCE_GXM_ERROR_INVALID_INDEX_COUNT: Enum_Unnamed34 = 2153447437;
pub const SCE_GXM_ERROR_INVALID_POLYGON_MODE: Enum_Unnamed34 = 2153447438;
pub const SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_PRECISION: Enum_Unnamed34
          =
    2153447439;
pub const SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_COMPONENT_COUNT:
          Enum_Unnamed34 =
    2153447440;
pub const SCE_GXM_ERROR_UNIFORM_BUFFER_NOT_RESERVED: Enum_Unnamed34 =
    2153447441;
pub const SCE_GXM_ERROR_INVALID_AUXILIARY_SURFACE: Enum_Unnamed34 =
    2153447443;
pub const SCE_GXM_ERROR_INVALID_PRECOMPUTED_DRAW: Enum_Unnamed34 = 2153447444;
pub const SCE_GXM_ERROR_INVALID_PRECOMPUTED_VERTEX_STATE: Enum_Unnamed34 =
    2153447445;
pub const SCE_GXM_ERROR_INVALID_PRECOMPUTED_FRAGMENT_STATE: Enum_Unnamed34 =
    2153447446;
pub const SCE_GXM_ERROR_DRIVER: Enum_Unnamed34 = 2153447447;
pub type SceGxmDisplayQueueCallback =
    ::core::option::Option<unsafe extern "C" fn(callbackData:
                                                    *const ::libc::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmInitializeParams {
    pub flags: ::libc::c_uint,
    pub displayQueueMaxPendingCount: ::libc::c_uint,
    pub displayQueueCallback: SceGxmDisplayQueueCallback,
    pub displayQueueCallbackDataSize: ::libc::c_uint,
    pub parameterBufferSize: SceSize,
}
impl ::core::default::Default for SceGxmInitializeParams {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceGxmMemoryAttribFlags = u32;
pub const SCE_GXM_MEMORY_ATTRIB_READ: SceGxmMemoryAttribFlags = 1;
pub const SCE_GXM_MEMORY_ATTRIB_WRITE: SceGxmMemoryAttribFlags = 2;
pub const SCE_GXM_MEMORY_ATTRIB_RW: SceGxmMemoryAttribFlags = 3;
pub type SceGxmAttributeFormat = u32;
pub const SCE_GXM_ATTRIBUTE_FORMAT_U8: SceGxmAttributeFormat = 0;
pub const SCE_GXM_ATTRIBUTE_FORMAT_S8: SceGxmAttributeFormat = 1;
pub const SCE_GXM_ATTRIBUTE_FORMAT_U16: SceGxmAttributeFormat = 2;
pub const SCE_GXM_ATTRIBUTE_FORMAT_S16: SceGxmAttributeFormat = 3;
pub const SCE_GXM_ATTRIBUTE_FORMAT_U8N: SceGxmAttributeFormat = 4;
pub const SCE_GXM_ATTRIBUTE_FORMAT_S8N: SceGxmAttributeFormat = 5;
pub const SCE_GXM_ATTRIBUTE_FORMAT_U16N: SceGxmAttributeFormat = 6;
pub const SCE_GXM_ATTRIBUTE_FORMAT_S16N: SceGxmAttributeFormat = 7;
pub const SCE_GXM_ATTRIBUTE_FORMAT_F16: SceGxmAttributeFormat = 8;
pub const SCE_GXM_ATTRIBUTE_FORMAT_F32: SceGxmAttributeFormat = 9;
pub type SceGxmDepthStencilFormat = u32;
pub const SCE_GXM_DEPTH_STENCIL_FORMAT_DF32: SceGxmDepthStencilFormat =
    278528;
pub const SCE_GXM_DEPTH_STENCIL_FORMAT_S8: SceGxmDepthStencilFormat = 139264;
pub const SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8: SceGxmDepthStencilFormat =
    417792;
pub const SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24: SceGxmDepthStencilFormat =
    19292160;
pub const SCE_GXM_DEPTH_STENCIL_FORMAT_D16: SceGxmDepthStencilFormat =
    38027264;
pub type SceGxmPrimitiveType = u32;
pub const SCE_GXM_PRIMITIVE_TRIANGLES: SceGxmPrimitiveType = 0;
pub const SCE_GXM_PRIMITIVE_LINES: SceGxmPrimitiveType = 67108864;
pub const SCE_GXM_PRIMITIVE_POINTS: SceGxmPrimitiveType = 134217728;
pub const SCE_GXM_PRIMITIVE_TRIANGLE_STRIP: SceGxmPrimitiveType = 201326592;
pub const SCE_GXM_PRIMITIVE_TRIANGLE_FAN: SceGxmPrimitiveType = 268435456;
pub const SCE_GXM_PRIMITIVE_TRIANGLE_EDGES: SceGxmPrimitiveType = 335544320;
pub type SceGxmEdgeEnableFlags = u32;
pub const SCE_GXM_EDGE_ENABLE_01: SceGxmEdgeEnableFlags = 256;
pub const SCE_GXM_EDGE_ENABLE_12: SceGxmEdgeEnableFlags = 512;
pub const SCE_GXM_EDGE_ENABLE_20: SceGxmEdgeEnableFlags = 1024;
pub type SceGxmRegionClipMode = u32;
pub const SCE_GXM_REGION_CLIP_NONE: SceGxmRegionClipMode = 0;
pub const SCE_GXM_REGION_CLIP_ALL: SceGxmRegionClipMode = 1073741824;
pub const SCE_GXM_REGION_CLIP_OUTSIDE: SceGxmRegionClipMode = 2147483648;
pub const SCE_GXM_REGION_CLIP_INSIDE: SceGxmRegionClipMode = 3221225472;
pub type SceGxmDepthFunc = u32;
pub const SCE_GXM_DEPTH_FUNC_NEVER: SceGxmDepthFunc = 0;
pub const SCE_GXM_DEPTH_FUNC_LESS: SceGxmDepthFunc = 4194304;
pub const SCE_GXM_DEPTH_FUNC_EQUAL: SceGxmDepthFunc = 8388608;
pub const SCE_GXM_DEPTH_FUNC_LESS_EQUAL: SceGxmDepthFunc = 12582912;
pub const SCE_GXM_DEPTH_FUNC_GREATER: SceGxmDepthFunc = 16777216;
pub const SCE_GXM_DEPTH_FUNC_NOT_EQUAL: SceGxmDepthFunc = 20971520;
pub const SCE_GXM_DEPTH_FUNC_GREATER_EQUAL: SceGxmDepthFunc = 25165824;
pub const SCE_GXM_DEPTH_FUNC_ALWAYS: SceGxmDepthFunc = 29360128;
pub type SceGxmStencilFunc = u32;
pub const SCE_GXM_STENCIL_FUNC_NEVER: SceGxmStencilFunc = 0;
pub const SCE_GXM_STENCIL_FUNC_LESS: SceGxmStencilFunc = 33554432;
pub const SCE_GXM_STENCIL_FUNC_EQUAL: SceGxmStencilFunc = 67108864;
pub const SCE_GXM_STENCIL_FUNC_LESS_EQUAL: SceGxmStencilFunc = 100663296;
pub const SCE_GXM_STENCIL_FUNC_GREATER: SceGxmStencilFunc = 134217728;
pub const SCE_GXM_STENCIL_FUNC_NOT_EQUAL: SceGxmStencilFunc = 167772160;
pub const SCE_GXM_STENCIL_FUNC_GREATER_EQUAL: SceGxmStencilFunc = 201326592;
pub const SCE_GXM_STENCIL_FUNC_ALWAYS: SceGxmStencilFunc = 234881024;
pub type SceGxmStencilOp = u32;
pub const SCE_GXM_STENCIL_OP_KEEP: SceGxmStencilOp = 0;
pub const SCE_GXM_STENCIL_OP_ZERO: SceGxmStencilOp = 1;
pub const SCE_GXM_STENCIL_OP_REPLACE: SceGxmStencilOp = 2;
pub const SCE_GXM_STENCIL_OP_INCR: SceGxmStencilOp = 3;
pub const SCE_GXM_STENCIL_OP_DECR: SceGxmStencilOp = 4;
pub const SCE_GXM_STENCIL_OP_INVERT: SceGxmStencilOp = 5;
pub const SCE_GXM_STENCIL_OP_INCR_WRAP: SceGxmStencilOp = 6;
pub const SCE_GXM_STENCIL_OP_DECR_WRAP: SceGxmStencilOp = 7;
pub type SceGxmCullMode = u32;
pub const SCE_GXM_CULL_NONE: SceGxmCullMode = 0;
pub const SCE_GXM_CULL_CW: SceGxmCullMode = 1;
pub const SCE_GXM_CULL_CCW: SceGxmCullMode = 2;
pub type SceGxmPolygonMode = u32;
pub const SCE_GXM_POLYGON_MODE_TRIANGLE_FILL: SceGxmPolygonMode = 0;
pub const SCE_GXM_POLYGON_MODE_LINE: SceGxmPolygonMode = 32768;
pub const SCE_GXM_POLYGON_MODE_POINT_10UV: SceGxmPolygonMode = 65536;
pub const SCE_GXM_POLYGON_MODE_POINT: SceGxmPolygonMode = 98304;
pub const SCE_GXM_POLYGON_MODE_POINT_01UV: SceGxmPolygonMode = 131072;
pub const SCE_GXM_POLYGON_MODE_TRIANGLE_LINE: SceGxmPolygonMode = 163840;
pub const SCE_GXM_POLYGON_MODE_TRIANGLE_POINT: SceGxmPolygonMode = 196608;
pub type SceGxmColorSwizzle4Mode = u32;
pub const SCE_GXM_COLOR_SWIZZLE4_ABGR: SceGxmColorSwizzle4Mode = 0;
pub const SCE_GXM_COLOR_SWIZZLE4_ARGB: SceGxmColorSwizzle4Mode = 1048576;
pub const SCE_GXM_COLOR_SWIZZLE4_RGBA: SceGxmColorSwizzle4Mode = 2097152;
pub const SCE_GXM_COLOR_SWIZZLE4_BGRA: SceGxmColorSwizzle4Mode = 3145728;
pub type SceGxmColorSwizzle3Mode = u32;
pub const SCE_GXM_COLOR_SWIZZLE3_BGR: SceGxmColorSwizzle3Mode = 0;
pub const SCE_GXM_COLOR_SWIZZLE3_RGB: SceGxmColorSwizzle3Mode = 1048576;
pub type SceGxmColorSwizzle2Mode = u32;
pub const SCE_GXM_COLOR_SWIZZLE2_GR: SceGxmColorSwizzle2Mode = 0;
pub const SCE_GXM_COLOR_SWIZZLE2_RG: SceGxmColorSwizzle2Mode = 1048576;
pub const SCE_GXM_COLOR_SWIZZLE2_RA: SceGxmColorSwizzle2Mode = 2097152;
pub const SCE_GXM_COLOR_SWIZZLE2_AR: SceGxmColorSwizzle2Mode = 3145728;
pub type SceGxmColorSwizzle1Mode = u32;
pub const SCE_GXM_COLOR_SWIZZLE1_R: SceGxmColorSwizzle1Mode = 0;
pub const SCE_GXM_COLOR_SWIZZLE1_G: SceGxmColorSwizzle1Mode = 1048576;
pub const SCE_GXM_COLOR_SWIZZLE1_A: SceGxmColorSwizzle1Mode = 1048576;
pub type SceGxmColorBaseFormat = u32;
pub const SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8: SceGxmColorBaseFormat = 0;
pub const SCE_GXM_COLOR_BASE_FORMAT_U8U8U8: SceGxmColorBaseFormat = 268435456;
pub const SCE_GXM_COLOR_BASE_FORMAT_U5U6U5: SceGxmColorBaseFormat = 805306368;
pub const SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5: SceGxmColorBaseFormat =
    1073741824;
pub const SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4: SceGxmColorBaseFormat =
    1342177280;
pub const SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2: SceGxmColorBaseFormat =
    1610612736;
pub const SCE_GXM_COLOR_BASE_FORMAT_F16: SceGxmColorBaseFormat = 4026531840;
pub const SCE_GXM_COLOR_BASE_FORMAT_F16F16: SceGxmColorBaseFormat = 8388608;
pub const SCE_GXM_COLOR_BASE_FORMAT_F32: SceGxmColorBaseFormat = 276824064;
pub const SCE_GXM_COLOR_BASE_FORMAT_S16: SceGxmColorBaseFormat = 545259520;
pub const SCE_GXM_COLOR_BASE_FORMAT_S16S16: SceGxmColorBaseFormat = 813694976;
pub const SCE_GXM_COLOR_BASE_FORMAT_U16: SceGxmColorBaseFormat = 1082130432;
pub const SCE_GXM_COLOR_BASE_FORMAT_U16U16: SceGxmColorBaseFormat =
    1350565888;
pub const SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10: SceGxmColorBaseFormat =
    1619001344;
pub const SCE_GXM_COLOR_BASE_FORMAT_U8: SceGxmColorBaseFormat = 2155872256;
pub const SCE_GXM_COLOR_BASE_FORMAT_S8: SceGxmColorBaseFormat = 2424307712;
pub const SCE_GXM_COLOR_BASE_FORMAT_S5S5U6: SceGxmColorBaseFormat =
    2692743168;
pub const SCE_GXM_COLOR_BASE_FORMAT_U8U8: SceGxmColorBaseFormat = 2961178624;
pub const SCE_GXM_COLOR_BASE_FORMAT_S8S8: SceGxmColorBaseFormat = 3229614080;
pub const SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8: SceGxmColorBaseFormat =
    3498049536;
pub const SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8: SceGxmColorBaseFormat =
    3766484992;
pub const SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16: SceGxmColorBaseFormat =
    16777216;
pub const SCE_GXM_COLOR_BASE_FORMAT_F32F32: SceGxmColorBaseFormat = 285212672;
pub const SCE_GXM_COLOR_BASE_FORMAT_F11F11F10: SceGxmColorBaseFormat =
    553648128;
pub const SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9: SceGxmColorBaseFormat =
    822083584;
pub const SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10: SceGxmColorBaseFormat =
    1090519040;
pub type SceGxmColorFormat = u32;
pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR: SceGxmColorFormat = 0;
pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB: SceGxmColorFormat = 1048576;
pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_RGBA: SceGxmColorFormat = 2097152;
pub const SCE_GXM_COLOR_FORMAT_U8U8U8U8_BGRA: SceGxmColorFormat = 3145728;
pub const SCE_GXM_COLOR_FORMAT_U8U8U8_BGR: SceGxmColorFormat = 268435456;
pub const SCE_GXM_COLOR_FORMAT_U8U8U8_RGB: SceGxmColorFormat = 269484032;
pub const SCE_GXM_COLOR_FORMAT_U5U6U5_BGR: SceGxmColorFormat = 805306368;
pub const SCE_GXM_COLOR_FORMAT_U5U6U5_RGB: SceGxmColorFormat = 806354944;
pub const SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR: SceGxmColorFormat = 1073741824;
pub const SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB: SceGxmColorFormat = 1074790400;
pub const SCE_GXM_COLOR_FORMAT_U5U5U5U1_RGBA: SceGxmColorFormat = 1075838976;
pub const SCE_GXM_COLOR_FORMAT_U5U5U5U1_BGRA: SceGxmColorFormat = 1076887552;
pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR: SceGxmColorFormat = 1342177280;
pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB: SceGxmColorFormat = 1343225856;
pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_RGBA: SceGxmColorFormat = 1344274432;
pub const SCE_GXM_COLOR_FORMAT_U4U4U4U4_BGRA: SceGxmColorFormat = 1345323008;
pub const SCE_GXM_COLOR_FORMAT_U8U3U3U2_ARGB: SceGxmColorFormat = 1610612736;
pub const SCE_GXM_COLOR_FORMAT_F16_R: SceGxmColorFormat = 4026531840;
pub const SCE_GXM_COLOR_FORMAT_F16_G: SceGxmColorFormat = 4027580416;
pub const SCE_GXM_COLOR_FORMAT_F16F16_GR: SceGxmColorFormat = 8388608;
pub const SCE_GXM_COLOR_FORMAT_F16F16_RG: SceGxmColorFormat = 9437184;
pub const SCE_GXM_COLOR_FORMAT_F32_R: SceGxmColorFormat = 276824064;
pub const SCE_GXM_COLOR_FORMAT_S16_R: SceGxmColorFormat = 545259520;
pub const SCE_GXM_COLOR_FORMAT_S16_G: SceGxmColorFormat = 546308096;
pub const SCE_GXM_COLOR_FORMAT_S16S16_GR: SceGxmColorFormat = 813694976;
pub const SCE_GXM_COLOR_FORMAT_S16S16_RG: SceGxmColorFormat = 814743552;
pub const SCE_GXM_COLOR_FORMAT_U16_R: SceGxmColorFormat = 1082130432;
pub const SCE_GXM_COLOR_FORMAT_U16_G: SceGxmColorFormat = 1083179008;
pub const SCE_GXM_COLOR_FORMAT_U16U16_GR: SceGxmColorFormat = 1350565888;
pub const SCE_GXM_COLOR_FORMAT_U16U16_RG: SceGxmColorFormat = 1351614464;
pub const SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR: SceGxmColorFormat =
    1619001344;
pub const SCE_GXM_COLOR_FORMAT_U2U10U10U10_ARGB: SceGxmColorFormat =
    1620049920;
pub const SCE_GXM_COLOR_FORMAT_U10U10U10U2_RGBA: SceGxmColorFormat =
    1621098496;
pub const SCE_GXM_COLOR_FORMAT_U10U10U10U2_BGRA: SceGxmColorFormat =
    1622147072;
pub const SCE_GXM_COLOR_FORMAT_U8_R: SceGxmColorFormat = 2155872256;
pub const SCE_GXM_COLOR_FORMAT_U8_A: SceGxmColorFormat = 2156920832;
pub const SCE_GXM_COLOR_FORMAT_S8_R: SceGxmColorFormat = 2424307712;
pub const SCE_GXM_COLOR_FORMAT_S8_A: SceGxmColorFormat = 2425356288;
pub const SCE_GXM_COLOR_FORMAT_U6S5S5_BGR: SceGxmColorFormat = 2692743168;
pub const SCE_GXM_COLOR_FORMAT_S5S5U6_RGB: SceGxmColorFormat = 2693791744;
pub const SCE_GXM_COLOR_FORMAT_U8U8_GR: SceGxmColorFormat = 2961178624;
pub const SCE_GXM_COLOR_FORMAT_U8U8_RG: SceGxmColorFormat = 2962227200;
pub const SCE_GXM_COLOR_FORMAT_U8U8_RA: SceGxmColorFormat = 2963275776;
pub const SCE_GXM_COLOR_FORMAT_U8U8_AR: SceGxmColorFormat = 2964324352;
pub const SCE_GXM_COLOR_FORMAT_S8S8_GR: SceGxmColorFormat = 3229614080;
pub const SCE_GXM_COLOR_FORMAT_S8S8_RG: SceGxmColorFormat = 3230662656;
pub const SCE_GXM_COLOR_FORMAT_S8S8_RA: SceGxmColorFormat = 3231711232;
pub const SCE_GXM_COLOR_FORMAT_S8S8_AR: SceGxmColorFormat = 3232759808;
pub const SCE_GXM_COLOR_FORMAT_U8S8S8U8_ABGR: SceGxmColorFormat = 3498049536;
pub const SCE_GXM_COLOR_FORMAT_U8U8S8S8_ARGB: SceGxmColorFormat = 3499098112;
pub const SCE_GXM_COLOR_FORMAT_U8S8S8U8_RGBA: SceGxmColorFormat = 3500146688;
pub const SCE_GXM_COLOR_FORMAT_S8S8U8U8_BGRA: SceGxmColorFormat = 3501195264;
pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_ABGR: SceGxmColorFormat = 3766484992;
pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_ARGB: SceGxmColorFormat = 3767533568;
pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_RGBA: SceGxmColorFormat = 3768582144;
pub const SCE_GXM_COLOR_FORMAT_S8S8S8S8_BGRA: SceGxmColorFormat = 3769630720;
pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_ABGR: SceGxmColorFormat =
    16777216;
pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_ARGB: SceGxmColorFormat =
    17825792;
pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_RGBA: SceGxmColorFormat =
    18874368;
pub const SCE_GXM_COLOR_FORMAT_F16F16F16F16_BGRA: SceGxmColorFormat =
    19922944;
pub const SCE_GXM_COLOR_FORMAT_F32F32_GR: SceGxmColorFormat = 285212672;
pub const SCE_GXM_COLOR_FORMAT_F32F32_RG: SceGxmColorFormat = 286261248;
pub const SCE_GXM_COLOR_FORMAT_F10F11F11_BGR: SceGxmColorFormat = 553648128;
pub const SCE_GXM_COLOR_FORMAT_F11F11F10_RGB: SceGxmColorFormat = 554696704;
pub const SCE_GXM_COLOR_FORMAT_SE5M9M9M9_BGR: SceGxmColorFormat = 822083584;
pub const SCE_GXM_COLOR_FORMAT_SE5M9M9M9_RGB: SceGxmColorFormat = 823132160;
pub const SCE_GXM_COLOR_FORMAT_U2F10F10F10_ABGR: SceGxmColorFormat =
    1090519040;
pub const SCE_GXM_COLOR_FORMAT_U2F10F10F10_ARGB: SceGxmColorFormat =
    1091567616;
pub const SCE_GXM_COLOR_FORMAT_F10F10F10U2_RGBA: SceGxmColorFormat =
    1092616192;
pub const SCE_GXM_COLOR_FORMAT_F10F10F10U2_BGRA: SceGxmColorFormat =
    1093664768;
pub const SCE_GXM_COLOR_FORMAT_A8B8G8R8: SceGxmColorFormat = 0;
pub const SCE_GXM_COLOR_FORMAT_A8R8G8B8: SceGxmColorFormat = 1048576;
pub const SCE_GXM_COLOR_FORMAT_R5G6B5: SceGxmColorFormat = 806354944;
pub const SCE_GXM_COLOR_FORMAT_A1R5G5B5: SceGxmColorFormat = 1074790400;
pub const SCE_GXM_COLOR_FORMAT_A4R4G4B4: SceGxmColorFormat = 1343225856;
pub const SCE_GXM_COLOR_FORMAT_A8: SceGxmColorFormat = 2156920832;
pub type SceGxmColorSurfaceType = u32;
pub const SCE_GXM_COLOR_SURFACE_LINEAR: SceGxmColorSurfaceType = 0;
pub const SCE_GXM_COLOR_SURFACE_TILED: SceGxmColorSurfaceType = 67108864;
pub const SCE_GXM_COLOR_SURFACE_SWIZZLED: SceGxmColorSurfaceType = 134217728;
pub type SceGxmColorSurfaceGammaMode = u32;
pub const SCE_GXM_COLOR_SURFACE_GAMMA_NONE: SceGxmColorSurfaceGammaMode = 0;
pub const SCE_GXM_COLOR_SURFACE_GAMMA_R: SceGxmColorSurfaceGammaMode = 4096;
pub const SCE_GXM_COLOR_SURFACE_GAMMA_GR: SceGxmColorSurfaceGammaMode = 12288;
pub const SCE_GXM_COLOR_SURFACE_GAMMA_BGR: SceGxmColorSurfaceGammaMode = 4096;
pub type SceGxmColorSurfaceDitherMode = u32;
pub const SCE_GXM_COLOR_SURFACE_DITHER_DISABLED: SceGxmColorSurfaceDitherMode
          =
    0;
pub const SCE_GXM_COLOR_SURFACE_DITHER_ENABLED: SceGxmColorSurfaceDitherMode =
    8;
pub type SceGxmDepthStencilSurfaceType = u32;
pub const SCE_GXM_DEPTH_STENCIL_SURFACE_LINEAR: SceGxmDepthStencilSurfaceType
          =
    0;
pub const SCE_GXM_DEPTH_STENCIL_SURFACE_TILED: SceGxmDepthStencilSurfaceType =
    69632;
pub type SceGxmOutputRegisterFormat = u32;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_DECLARED: SceGxmOutputRegisterFormat
          =
    0;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_UCHAR4: SceGxmOutputRegisterFormat =
    1;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_CHAR4: SceGxmOutputRegisterFormat =
    2;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_USHORT2: SceGxmOutputRegisterFormat =
    3;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_SHORT2: SceGxmOutputRegisterFormat =
    4;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF4: SceGxmOutputRegisterFormat =
    5;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF2: SceGxmOutputRegisterFormat =
    6;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT2: SceGxmOutputRegisterFormat =
    7;
pub const SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT: SceGxmOutputRegisterFormat =
    8;
pub type SceGxmMultisampleMode = u32;
pub const SCE_GXM_MULTISAMPLE_NONE: SceGxmMultisampleMode = 0;
pub const SCE_GXM_MULTISAMPLE_2X: SceGxmMultisampleMode = 1;
pub const SCE_GXM_MULTISAMPLE_4X: SceGxmMultisampleMode = 2;
pub type SceGxmTextureSwizzle4Mode = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE4_ABGR: SceGxmTextureSwizzle4Mode = 0;
pub const SCE_GXM_TEXTURE_SWIZZLE4_ARGB: SceGxmTextureSwizzle4Mode = 4096;
pub const SCE_GXM_TEXTURE_SWIZZLE4_RGBA: SceGxmTextureSwizzle4Mode = 8192;
pub const SCE_GXM_TEXTURE_SWIZZLE4_BGRA: SceGxmTextureSwizzle4Mode = 12288;
pub const SCE_GXM_TEXTURE_SWIZZLE4_1BGR: SceGxmTextureSwizzle4Mode = 16384;
pub const SCE_GXM_TEXTURE_SWIZZLE4_1RGB: SceGxmTextureSwizzle4Mode = 20480;
pub const SCE_GXM_TEXTURE_SWIZZLE4_RGB1: SceGxmTextureSwizzle4Mode = 24576;
pub const SCE_GXM_TEXTURE_SWIZZLE4_BGR1: SceGxmTextureSwizzle4Mode = 28672;
pub type SceGxmTextureSwizzle3Mode = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE3_BGR: SceGxmTextureSwizzle3Mode = 0;
pub const SCE_GXM_TEXTURE_SWIZZLE3_RGB: SceGxmTextureSwizzle3Mode = 4096;
pub type SceGxmTextureSwizzle2Mode = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE2_GR: SceGxmTextureSwizzle2Mode = 0;
pub const SCE_GXM_TEXTURE_SWIZZLE2_00GR: SceGxmTextureSwizzle2Mode = 4096;
pub const SCE_GXM_TEXTURE_SWIZZLE2_GRRR: SceGxmTextureSwizzle2Mode = 8192;
pub const SCE_GXM_TEXTURE_SWIZZLE2_RGGG: SceGxmTextureSwizzle2Mode = 12288;
pub const SCE_GXM_TEXTURE_SWIZZLE2_GRGR: SceGxmTextureSwizzle2Mode = 16384;
pub const SCE_GXM_TEXTURE_SWIZZLE2_00RG: SceGxmTextureSwizzle2Mode = 20480;
pub type SceGxmTextureSwizzle2ModeAlt = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE2_SD: SceGxmTextureSwizzle2ModeAlt = 0;
pub const SCE_GXM_TEXTURE_SWIZZLE2_DS: SceGxmTextureSwizzle2ModeAlt = 4096;
pub type SceGxmTextureSwizzle1Mode = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE1_R: SceGxmTextureSwizzle1Mode = 0;
pub const SCE_GXM_TEXTURE_SWIZZLE1_000R: SceGxmTextureSwizzle1Mode = 4096;
pub const SCE_GXM_TEXTURE_SWIZZLE1_111R: SceGxmTextureSwizzle1Mode = 8192;
pub const SCE_GXM_TEXTURE_SWIZZLE1_RRRR: SceGxmTextureSwizzle1Mode = 12288;
pub const SCE_GXM_TEXTURE_SWIZZLE1_0RRR: SceGxmTextureSwizzle1Mode = 16384;
pub const SCE_GXM_TEXTURE_SWIZZLE1_1RRR: SceGxmTextureSwizzle1Mode = 20480;
pub const SCE_GXM_TEXTURE_SWIZZLE1_R000: SceGxmTextureSwizzle1Mode = 24576;
pub const SCE_GXM_TEXTURE_SWIZZLE1_R111: SceGxmTextureSwizzle1Mode = 28672;
pub type SceGxmTextureSwizzleYUV422Mode = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0: SceGxmTextureSwizzleYUV422Mode =
    0;
pub const SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0: SceGxmTextureSwizzleYUV422Mode =
    4096;
pub const SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0: SceGxmTextureSwizzleYUV422Mode =
    8192;
pub const SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0: SceGxmTextureSwizzleYUV422Mode =
    12288;
pub const SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1: SceGxmTextureSwizzleYUV422Mode =
    16384;
pub const SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1: SceGxmTextureSwizzleYUV422Mode =
    20480;
pub const SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1: SceGxmTextureSwizzleYUV422Mode =
    24576;
pub const SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1: SceGxmTextureSwizzleYUV422Mode =
    28672;
pub type SceGxmTextureSwizzleYUV420Mode = u32;
pub const SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0: SceGxmTextureSwizzleYUV420Mode =
    0;
pub const SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0: SceGxmTextureSwizzleYUV420Mode =
    4096;
pub const SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1: SceGxmTextureSwizzleYUV420Mode =
    8192;
pub const SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1: SceGxmTextureSwizzleYUV420Mode =
    12288;
pub type SceGxmTextureBaseFormat = u32;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8: SceGxmTextureBaseFormat = 0;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8: SceGxmTextureBaseFormat = 16777216;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4: SceGxmTextureBaseFormat =
    33554432;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2: SceGxmTextureBaseFormat =
    50331648;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5: SceGxmTextureBaseFormat =
    67108864;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5: SceGxmTextureBaseFormat =
    83886080;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6: SceGxmTextureBaseFormat =
    100663296;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U8: SceGxmTextureBaseFormat =
    117440512;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8S8: SceGxmTextureBaseFormat =
    134217728;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U16: SceGxmTextureBaseFormat =
    150994944;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S16: SceGxmTextureBaseFormat =
    167772160;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F16: SceGxmTextureBaseFormat =
    184549376;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8: SceGxmTextureBaseFormat =
    201326592;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8: SceGxmTextureBaseFormat =
    218103808;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10: SceGxmTextureBaseFormat =
    234881024;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U16U16: SceGxmTextureBaseFormat =
    251658240;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S16S16: SceGxmTextureBaseFormat =
    268435456;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F16F16: SceGxmTextureBaseFormat =
    285212672;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F32: SceGxmTextureBaseFormat =
    301989888;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F32M: SceGxmTextureBaseFormat =
    318767104;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8: SceGxmTextureBaseFormat =
    335544320;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_X8U24: SceGxmTextureBaseFormat =
    352321536;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U32: SceGxmTextureBaseFormat =
    385875968;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S32: SceGxmTextureBaseFormat =
    402653184;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9: SceGxmTextureBaseFormat =
    419430400;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10: SceGxmTextureBaseFormat =
    436207616;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16: SceGxmTextureBaseFormat =
    452984832;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16: SceGxmTextureBaseFormat =
    469762048;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16: SceGxmTextureBaseFormat =
    486539264;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_F32F32: SceGxmTextureBaseFormat =
    503316480;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U32U32: SceGxmTextureBaseFormat =
    520093696;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP: SceGxmTextureBaseFormat =
    2147483648;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP: SceGxmTextureBaseFormat =
    2164260864;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP: SceGxmTextureBaseFormat =
    2181038080;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP: SceGxmTextureBaseFormat =
    2197815296;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC1: SceGxmTextureBaseFormat =
    2231369728;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC2: SceGxmTextureBaseFormat =
    2248146944;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_UBC3: SceGxmTextureBaseFormat =
    2264924160;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2: SceGxmTextureBaseFormat =
    2415919104;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3: SceGxmTextureBaseFormat =
    2432696320;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_YUV422: SceGxmTextureBaseFormat =
    2449473536;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_P4: SceGxmTextureBaseFormat =
    2483027968;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_P8: SceGxmTextureBaseFormat =
    2499805184;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8: SceGxmTextureBaseFormat =
    2550136832;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8: SceGxmTextureBaseFormat =
    2566914048;
pub const SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10: SceGxmTextureBaseFormat =
    2583691264;
pub type SceGxmTextureFormat = u32;
pub const SCE_GXM_TEXTURE_FORMAT_U8_000R: SceGxmTextureFormat = 4096;
pub const SCE_GXM_TEXTURE_FORMAT_U8_111R: SceGxmTextureFormat = 8192;
pub const SCE_GXM_TEXTURE_FORMAT_U8_RRRR: SceGxmTextureFormat = 12288;
pub const SCE_GXM_TEXTURE_FORMAT_U8_0RRR: SceGxmTextureFormat = 16384;
pub const SCE_GXM_TEXTURE_FORMAT_U8_1RRR: SceGxmTextureFormat = 20480;
pub const SCE_GXM_TEXTURE_FORMAT_U8_R000: SceGxmTextureFormat = 24576;
pub const SCE_GXM_TEXTURE_FORMAT_U8_R111: SceGxmTextureFormat = 28672;
pub const SCE_GXM_TEXTURE_FORMAT_U8_R: SceGxmTextureFormat = 0;
pub const SCE_GXM_TEXTURE_FORMAT_S8_000R: SceGxmTextureFormat = 16781312;
pub const SCE_GXM_TEXTURE_FORMAT_S8_111R: SceGxmTextureFormat = 16785408;
pub const SCE_GXM_TEXTURE_FORMAT_S8_RRRR: SceGxmTextureFormat = 16789504;
pub const SCE_GXM_TEXTURE_FORMAT_S8_0RRR: SceGxmTextureFormat = 16793600;
pub const SCE_GXM_TEXTURE_FORMAT_S8_1RRR: SceGxmTextureFormat = 16797696;
pub const SCE_GXM_TEXTURE_FORMAT_S8_R000: SceGxmTextureFormat = 16801792;
pub const SCE_GXM_TEXTURE_FORMAT_S8_R111: SceGxmTextureFormat = 16805888;
pub const SCE_GXM_TEXTURE_FORMAT_S8_R: SceGxmTextureFormat = 16777216;
pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ABGR: SceGxmTextureFormat =
    33554432;
pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB: SceGxmTextureFormat =
    33558528;
pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_RGBA: SceGxmTextureFormat =
    33562624;
pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_BGRA: SceGxmTextureFormat =
    33566720;
pub const SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1BGR: SceGxmTextureFormat =
    33570816;
pub const SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1RGB: SceGxmTextureFormat =
    33574912;
pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_RGB1: SceGxmTextureFormat =
    33579008;
pub const SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_BGR1: SceGxmTextureFormat =
    33583104;
pub const SCE_GXM_TEXTURE_FORMAT_U8U3U3U2_ARGB: SceGxmTextureFormat =
    50331648;
pub const SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ABGR: SceGxmTextureFormat =
    67108864;
pub const SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB: SceGxmTextureFormat =
    67112960;
pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_RGBA: SceGxmTextureFormat =
    67117056;
pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_BGRA: SceGxmTextureFormat =
    67121152;
pub const SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1BGR: SceGxmTextureFormat =
    67125248;
pub const SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1RGB: SceGxmTextureFormat =
    67129344;
pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_RGB1: SceGxmTextureFormat =
    67133440;
pub const SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_BGR1: SceGxmTextureFormat =
    67137536;
pub const SCE_GXM_TEXTURE_FORMAT_U5U6U5_BGR: SceGxmTextureFormat = 83886080;
pub const SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB: SceGxmTextureFormat = 83890176;
pub const SCE_GXM_TEXTURE_FORMAT_U6S5S5_BGR: SceGxmTextureFormat = 100663296;
pub const SCE_GXM_TEXTURE_FORMAT_S5S5U6_RGB: SceGxmTextureFormat = 100667392;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8_00GR: SceGxmTextureFormat = 117444608;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR: SceGxmTextureFormat = 117448704;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG: SceGxmTextureFormat = 117452800;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8_GRGR: SceGxmTextureFormat = 117456896;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8_00RG: SceGxmTextureFormat = 117460992;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8_GR: SceGxmTextureFormat = 117440512;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8_00GR: SceGxmTextureFormat = 134221824;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8_GRRR: SceGxmTextureFormat = 134225920;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8_RGGG: SceGxmTextureFormat = 134230016;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8_GRGR: SceGxmTextureFormat = 134234112;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8_00RG: SceGxmTextureFormat = 134238208;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8_GR: SceGxmTextureFormat = 134217728;
pub const SCE_GXM_TEXTURE_FORMAT_U16_000R: SceGxmTextureFormat = 150999040;
pub const SCE_GXM_TEXTURE_FORMAT_U16_111R: SceGxmTextureFormat = 151003136;
pub const SCE_GXM_TEXTURE_FORMAT_U16_RRRR: SceGxmTextureFormat = 151007232;
pub const SCE_GXM_TEXTURE_FORMAT_U16_0RRR: SceGxmTextureFormat = 151011328;
pub const SCE_GXM_TEXTURE_FORMAT_U16_1RRR: SceGxmTextureFormat = 151015424;
pub const SCE_GXM_TEXTURE_FORMAT_U16_R000: SceGxmTextureFormat = 151019520;
pub const SCE_GXM_TEXTURE_FORMAT_U16_R111: SceGxmTextureFormat = 151023616;
pub const SCE_GXM_TEXTURE_FORMAT_U16_R: SceGxmTextureFormat = 150994944;
pub const SCE_GXM_TEXTURE_FORMAT_S16_000R: SceGxmTextureFormat = 167776256;
pub const SCE_GXM_TEXTURE_FORMAT_S16_111R: SceGxmTextureFormat = 167780352;
pub const SCE_GXM_TEXTURE_FORMAT_S16_RRRR: SceGxmTextureFormat = 167784448;
pub const SCE_GXM_TEXTURE_FORMAT_S16_0RRR: SceGxmTextureFormat = 167788544;
pub const SCE_GXM_TEXTURE_FORMAT_S16_1RRR: SceGxmTextureFormat = 167792640;
pub const SCE_GXM_TEXTURE_FORMAT_S16_R000: SceGxmTextureFormat = 167796736;
pub const SCE_GXM_TEXTURE_FORMAT_S16_R111: SceGxmTextureFormat = 167800832;
pub const SCE_GXM_TEXTURE_FORMAT_S16_R: SceGxmTextureFormat = 167772160;
pub const SCE_GXM_TEXTURE_FORMAT_F16_000R: SceGxmTextureFormat = 184553472;
pub const SCE_GXM_TEXTURE_FORMAT_F16_111R: SceGxmTextureFormat = 184557568;
pub const SCE_GXM_TEXTURE_FORMAT_F16_RRRR: SceGxmTextureFormat = 184561664;
pub const SCE_GXM_TEXTURE_FORMAT_F16_0RRR: SceGxmTextureFormat = 184565760;
pub const SCE_GXM_TEXTURE_FORMAT_F16_1RRR: SceGxmTextureFormat = 184569856;
pub const SCE_GXM_TEXTURE_FORMAT_F16_R000: SceGxmTextureFormat = 184573952;
pub const SCE_GXM_TEXTURE_FORMAT_F16_R111: SceGxmTextureFormat = 184578048;
pub const SCE_GXM_TEXTURE_FORMAT_F16_R: SceGxmTextureFormat = 184549376;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR: SceGxmTextureFormat =
    201326592;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB: SceGxmTextureFormat =
    201330688;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_RGBA: SceGxmTextureFormat =
    201334784;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_BGRA: SceGxmTextureFormat =
    201338880;
pub const SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1BGR: SceGxmTextureFormat =
    201342976;
pub const SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1RGB: SceGxmTextureFormat =
    201347072;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_RGB1: SceGxmTextureFormat =
    201351168;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_BGR1: SceGxmTextureFormat =
    201355264;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ABGR: SceGxmTextureFormat =
    218103808;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ARGB: SceGxmTextureFormat =
    218107904;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_RGBA: SceGxmTextureFormat =
    218112000;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_BGRA: SceGxmTextureFormat =
    218116096;
pub const SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1BGR: SceGxmTextureFormat =
    218120192;
pub const SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1RGB: SceGxmTextureFormat =
    218124288;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_RGB1: SceGxmTextureFormat =
    218128384;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_BGR1: SceGxmTextureFormat =
    218132480;
pub const SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ABGR: SceGxmTextureFormat =
    234881024;
pub const SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ARGB: SceGxmTextureFormat =
    234885120;
pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_RGBA: SceGxmTextureFormat =
    234889216;
pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_BGRA: SceGxmTextureFormat =
    234893312;
pub const SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1BGR: SceGxmTextureFormat =
    234897408;
pub const SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1RGB: SceGxmTextureFormat =
    234901504;
pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_RGB1: SceGxmTextureFormat =
    234905600;
pub const SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_BGR1: SceGxmTextureFormat =
    234909696;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16_00GR: SceGxmTextureFormat = 251662336;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16_GRRR: SceGxmTextureFormat = 251666432;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16_RGGG: SceGxmTextureFormat = 251670528;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16_GRGR: SceGxmTextureFormat = 251674624;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16_00RG: SceGxmTextureFormat = 251678720;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16_GR: SceGxmTextureFormat = 251658240;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16_00GR: SceGxmTextureFormat = 268439552;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16_GRRR: SceGxmTextureFormat = 268443648;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16_RGGG: SceGxmTextureFormat = 268447744;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16_GRGR: SceGxmTextureFormat = 268451840;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16_00RG: SceGxmTextureFormat = 268455936;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16_GR: SceGxmTextureFormat = 268435456;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16_00GR: SceGxmTextureFormat = 285216768;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR: SceGxmTextureFormat = 285220864;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG: SceGxmTextureFormat = 285224960;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16_GRGR: SceGxmTextureFormat = 285229056;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16_00RG: SceGxmTextureFormat = 285233152;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16_GR: SceGxmTextureFormat = 285212672;
pub const SCE_GXM_TEXTURE_FORMAT_F32_000R: SceGxmTextureFormat = 301993984;
pub const SCE_GXM_TEXTURE_FORMAT_F32_111R: SceGxmTextureFormat = 301998080;
pub const SCE_GXM_TEXTURE_FORMAT_F32_RRRR: SceGxmTextureFormat = 302002176;
pub const SCE_GXM_TEXTURE_FORMAT_F32_0RRR: SceGxmTextureFormat = 302006272;
pub const SCE_GXM_TEXTURE_FORMAT_F32_1RRR: SceGxmTextureFormat = 302010368;
pub const SCE_GXM_TEXTURE_FORMAT_F32_R000: SceGxmTextureFormat = 302014464;
pub const SCE_GXM_TEXTURE_FORMAT_F32_R111: SceGxmTextureFormat = 302018560;
pub const SCE_GXM_TEXTURE_FORMAT_F32_R: SceGxmTextureFormat = 301989888;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_000R: SceGxmTextureFormat = 318771200;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_111R: SceGxmTextureFormat = 318775296;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_RRRR: SceGxmTextureFormat = 318779392;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_0RRR: SceGxmTextureFormat = 318783488;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_1RRR: SceGxmTextureFormat = 318787584;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_R000: SceGxmTextureFormat = 318791680;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_R111: SceGxmTextureFormat = 318795776;
pub const SCE_GXM_TEXTURE_FORMAT_F32M_R: SceGxmTextureFormat = 318767104;
pub const SCE_GXM_TEXTURE_FORMAT_X8S8S8U8_1BGR: SceGxmTextureFormat =
    335544320;
pub const SCE_GXM_TEXTURE_FORMAT_X8U8S8S8_1RGB: SceGxmTextureFormat =
    335548416;
pub const SCE_GXM_TEXTURE_FORMAT_X8U24_SD: SceGxmTextureFormat = 352321536;
pub const SCE_GXM_TEXTURE_FORMAT_U24X8_DS: SceGxmTextureFormat = 352325632;
pub const SCE_GXM_TEXTURE_FORMAT_U32_000R: SceGxmTextureFormat = 385880064;
pub const SCE_GXM_TEXTURE_FORMAT_U32_111R: SceGxmTextureFormat = 385884160;
pub const SCE_GXM_TEXTURE_FORMAT_U32_RRRR: SceGxmTextureFormat = 385888256;
pub const SCE_GXM_TEXTURE_FORMAT_U32_0RRR: SceGxmTextureFormat = 385892352;
pub const SCE_GXM_TEXTURE_FORMAT_U32_1RRR: SceGxmTextureFormat = 385896448;
pub const SCE_GXM_TEXTURE_FORMAT_U32_R000: SceGxmTextureFormat = 385900544;
pub const SCE_GXM_TEXTURE_FORMAT_U32_R111: SceGxmTextureFormat = 385904640;
pub const SCE_GXM_TEXTURE_FORMAT_U32_R: SceGxmTextureFormat = 385875968;
pub const SCE_GXM_TEXTURE_FORMAT_S32_000R: SceGxmTextureFormat = 402657280;
pub const SCE_GXM_TEXTURE_FORMAT_S32_111R: SceGxmTextureFormat = 402661376;
pub const SCE_GXM_TEXTURE_FORMAT_S32_RRRR: SceGxmTextureFormat = 402665472;
pub const SCE_GXM_TEXTURE_FORMAT_S32_0RRR: SceGxmTextureFormat = 402669568;
pub const SCE_GXM_TEXTURE_FORMAT_S32_1RRR: SceGxmTextureFormat = 402673664;
pub const SCE_GXM_TEXTURE_FORMAT_S32_R000: SceGxmTextureFormat = 402677760;
pub const SCE_GXM_TEXTURE_FORMAT_S32_R111: SceGxmTextureFormat = 402681856;
pub const SCE_GXM_TEXTURE_FORMAT_S32_R: SceGxmTextureFormat = 402653184;
pub const SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_BGR: SceGxmTextureFormat =
    419430400;
pub const SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_RGB: SceGxmTextureFormat =
    419434496;
pub const SCE_GXM_TEXTURE_FORMAT_F10F11F11_BGR: SceGxmTextureFormat =
    436207616;
pub const SCE_GXM_TEXTURE_FORMAT_F11F11F10_RGB: SceGxmTextureFormat =
    436211712;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ABGR: SceGxmTextureFormat =
    452984832;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ARGB: SceGxmTextureFormat =
    452988928;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_RGBA: SceGxmTextureFormat =
    452993024;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_BGRA: SceGxmTextureFormat =
    452997120;
pub const SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1BGR: SceGxmTextureFormat =
    453001216;
pub const SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1RGB: SceGxmTextureFormat =
    453005312;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_RGB1: SceGxmTextureFormat =
    453009408;
pub const SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_BGR1: SceGxmTextureFormat =
    453013504;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ABGR: SceGxmTextureFormat =
    469762048;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ARGB: SceGxmTextureFormat =
    469766144;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_RGBA: SceGxmTextureFormat =
    469770240;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_BGRA: SceGxmTextureFormat =
    469774336;
pub const SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1BGR: SceGxmTextureFormat =
    469778432;
pub const SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1RGB: SceGxmTextureFormat =
    469782528;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_RGB1: SceGxmTextureFormat =
    469786624;
pub const SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_BGR1: SceGxmTextureFormat =
    469790720;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ABGR: SceGxmTextureFormat =
    486539264;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ARGB: SceGxmTextureFormat =
    486543360;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_RGBA: SceGxmTextureFormat =
    486547456;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_BGRA: SceGxmTextureFormat =
    486551552;
pub const SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1BGR: SceGxmTextureFormat =
    486555648;
pub const SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1RGB: SceGxmTextureFormat =
    486559744;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_RGB1: SceGxmTextureFormat =
    486563840;
pub const SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_BGR1: SceGxmTextureFormat =
    486567936;
pub const SCE_GXM_TEXTURE_FORMAT_F32F32_00GR: SceGxmTextureFormat = 503320576;
pub const SCE_GXM_TEXTURE_FORMAT_F32F32_GRRR: SceGxmTextureFormat = 503324672;
pub const SCE_GXM_TEXTURE_FORMAT_F32F32_RGGG: SceGxmTextureFormat = 503328768;
pub const SCE_GXM_TEXTURE_FORMAT_F32F32_GRGR: SceGxmTextureFormat = 503332864;
pub const SCE_GXM_TEXTURE_FORMAT_F32F32_00RG: SceGxmTextureFormat = 503336960;
pub const SCE_GXM_TEXTURE_FORMAT_F32F32_GR: SceGxmTextureFormat = 503316480;
pub const SCE_GXM_TEXTURE_FORMAT_U32U32_00GR: SceGxmTextureFormat = 520097792;
pub const SCE_GXM_TEXTURE_FORMAT_U32U32_GRRR: SceGxmTextureFormat = 520101888;
pub const SCE_GXM_TEXTURE_FORMAT_U32U32_RGGG: SceGxmTextureFormat = 520105984;
pub const SCE_GXM_TEXTURE_FORMAT_U32U32_GRGR: SceGxmTextureFormat = 520110080;
pub const SCE_GXM_TEXTURE_FORMAT_U32U32_00RG: SceGxmTextureFormat = 520114176;
pub const SCE_GXM_TEXTURE_FORMAT_U32U32_GR: SceGxmTextureFormat = 520093696;
pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR: SceGxmTextureFormat =
    2147483648;
pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_1BGR: SceGxmTextureFormat =
    2147500032;
pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR: SceGxmTextureFormat =
    2164260864;
pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_1BGR: SceGxmTextureFormat =
    2164277248;
pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR: SceGxmTextureFormat =
    2181038080;
pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_1BGR: SceGxmTextureFormat =
    2181054464;
pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR: SceGxmTextureFormat =
    2197815296;
pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_1BGR: SceGxmTextureFormat =
    2197831680;
pub const SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR: SceGxmTextureFormat = 2231369728;
pub const SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR: SceGxmTextureFormat = 2248146944;
pub const SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR: SceGxmTextureFormat = 2264924160;
pub const SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC0: SceGxmTextureFormat =
    2415919104;
pub const SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC0: SceGxmTextureFormat =
    2415923200;
pub const SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC1: SceGxmTextureFormat =
    2415927296;
pub const SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC1: SceGxmTextureFormat =
    2415931392;
pub const SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC0: SceGxmTextureFormat =
    2432696320;
pub const SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC0: SceGxmTextureFormat =
    2432700416;
pub const SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC1: SceGxmTextureFormat =
    2432704512;
pub const SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC1: SceGxmTextureFormat =
    2432708608;
pub const SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC0: SceGxmTextureFormat =
    2449473536;
pub const SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0: SceGxmTextureFormat =
    2449477632;
pub const SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC0: SceGxmTextureFormat =
    2449481728;
pub const SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0: SceGxmTextureFormat =
    2449485824;
pub const SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC1: SceGxmTextureFormat =
    2449489920;
pub const SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC1: SceGxmTextureFormat =
    2449494016;
pub const SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC1: SceGxmTextureFormat =
    2449498112;
pub const SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC1: SceGxmTextureFormat =
    2449502208;
pub const SCE_GXM_TEXTURE_FORMAT_P4_ABGR: SceGxmTextureFormat = 2483027968;
pub const SCE_GXM_TEXTURE_FORMAT_P4_ARGB: SceGxmTextureFormat = 2483032064;
pub const SCE_GXM_TEXTURE_FORMAT_P4_RGBA: SceGxmTextureFormat = 2483036160;
pub const SCE_GXM_TEXTURE_FORMAT_P4_BGRA: SceGxmTextureFormat = 2483040256;
pub const SCE_GXM_TEXTURE_FORMAT_P4_1BGR: SceGxmTextureFormat = 2483044352;
pub const SCE_GXM_TEXTURE_FORMAT_P4_1RGB: SceGxmTextureFormat = 2483048448;
pub const SCE_GXM_TEXTURE_FORMAT_P4_RGB1: SceGxmTextureFormat = 2483052544;
pub const SCE_GXM_TEXTURE_FORMAT_P4_BGR1: SceGxmTextureFormat = 2483056640;
pub const SCE_GXM_TEXTURE_FORMAT_P8_ABGR: SceGxmTextureFormat = 2499805184;
pub const SCE_GXM_TEXTURE_FORMAT_P8_ARGB: SceGxmTextureFormat = 2499809280;
pub const SCE_GXM_TEXTURE_FORMAT_P8_RGBA: SceGxmTextureFormat = 2499813376;
pub const SCE_GXM_TEXTURE_FORMAT_P8_BGRA: SceGxmTextureFormat = 2499817472;
pub const SCE_GXM_TEXTURE_FORMAT_P8_1BGR: SceGxmTextureFormat = 2499821568;
pub const SCE_GXM_TEXTURE_FORMAT_P8_1RGB: SceGxmTextureFormat = 2499825664;
pub const SCE_GXM_TEXTURE_FORMAT_P8_RGB1: SceGxmTextureFormat = 2499829760;
pub const SCE_GXM_TEXTURE_FORMAT_P8_BGR1: SceGxmTextureFormat = 2499833856;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8_BGR: SceGxmTextureFormat = 2550136832;
pub const SCE_GXM_TEXTURE_FORMAT_U8U8U8_RGB: SceGxmTextureFormat = 2550140928;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8_BGR: SceGxmTextureFormat = 2566914048;
pub const SCE_GXM_TEXTURE_FORMAT_S8S8S8_RGB: SceGxmTextureFormat = 2566918144;
pub const SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ABGR: SceGxmTextureFormat =
    2583691264;
pub const SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ARGB: SceGxmTextureFormat =
    2583695360;
pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_RGBA: SceGxmTextureFormat =
    2583699456;
pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_BGRA: SceGxmTextureFormat =
    2583703552;
pub const SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1BGR: SceGxmTextureFormat =
    2583707648;
pub const SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1RGB: SceGxmTextureFormat =
    2583711744;
pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_RGB1: SceGxmTextureFormat =
    2583715840;
pub const SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_BGR1: SceGxmTextureFormat =
    2583719936;
pub const SCE_GXM_TEXTURE_FORMAT_L8: SceGxmTextureFormat = 20480;
pub const SCE_GXM_TEXTURE_FORMAT_A8: SceGxmTextureFormat = 24576;
pub const SCE_GXM_TEXTURE_FORMAT_R8: SceGxmTextureFormat = 4096;
pub const SCE_GXM_TEXTURE_FORMAT_A4R4G4B4: SceGxmTextureFormat = 33558528;
pub const SCE_GXM_TEXTURE_FORMAT_A1R5G5B5: SceGxmTextureFormat = 67112960;
pub const SCE_GXM_TEXTURE_FORMAT_R5G6B5: SceGxmTextureFormat = 83890176;
pub const SCE_GXM_TEXTURE_FORMAT_A8L8: SceGxmTextureFormat = 117448704;
pub const SCE_GXM_TEXTURE_FORMAT_L8A8: SceGxmTextureFormat = 117452800;
pub const SCE_GXM_TEXTURE_FORMAT_G8R8: SceGxmTextureFormat = 117444608;
pub const SCE_GXM_TEXTURE_FORMAT_L16: SceGxmTextureFormat = 151015424;
pub const SCE_GXM_TEXTURE_FORMAT_A16: SceGxmTextureFormat = 151019520;
pub const SCE_GXM_TEXTURE_FORMAT_R16: SceGxmTextureFormat = 150999040;
pub const SCE_GXM_TEXTURE_FORMAT_D16: SceGxmTextureFormat = 150994944;
pub const SCE_GXM_TEXTURE_FORMAT_LF16: SceGxmTextureFormat = 184569856;
pub const SCE_GXM_TEXTURE_FORMAT_AF16: SceGxmTextureFormat = 184573952;
pub const SCE_GXM_TEXTURE_FORMAT_RF16: SceGxmTextureFormat = 184553472;
pub const SCE_GXM_TEXTURE_FORMAT_A8R8G8B8: SceGxmTextureFormat = 201330688;
pub const SCE_GXM_TEXTURE_FORMAT_A8B8G8R8: SceGxmTextureFormat = 201326592;
pub const SCE_GXM_TEXTURE_FORMAT_AF16LF16: SceGxmTextureFormat = 285220864;
pub const SCE_GXM_TEXTURE_FORMAT_LF16AF16: SceGxmTextureFormat = 285224960;
pub const SCE_GXM_TEXTURE_FORMAT_GF16RF16: SceGxmTextureFormat = 285216768;
pub const SCE_GXM_TEXTURE_FORMAT_LF32M: SceGxmTextureFormat = 318787584;
pub const SCE_GXM_TEXTURE_FORMAT_AF32M: SceGxmTextureFormat = 318791680;
pub const SCE_GXM_TEXTURE_FORMAT_RF32M: SceGxmTextureFormat = 318771200;
pub const SCE_GXM_TEXTURE_FORMAT_DF32M: SceGxmTextureFormat = 318767104;
pub const SCE_GXM_TEXTURE_FORMAT_VYUY: SceGxmTextureFormat = 2449485824;
pub const SCE_GXM_TEXTURE_FORMAT_YVYU: SceGxmTextureFormat = 2449477632;
pub const SCE_GXM_TEXTURE_FORMAT_UBC1: SceGxmTextureFormat = 2231369728;
pub const SCE_GXM_TEXTURE_FORMAT_UBC2: SceGxmTextureFormat = 2248146944;
pub const SCE_GXM_TEXTURE_FORMAT_UBC3: SceGxmTextureFormat = 2264924160;
pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP: SceGxmTextureFormat = 2147483648;
pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP: SceGxmTextureFormat = 2164260864;
pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP: SceGxmTextureFormat = 2181038080;
pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP: SceGxmTextureFormat = 2197815296;
pub type SceGxmTextureAnisoMode = u32;
pub const SCE_GXM_TEXTURE_ANISO_DISABLED: SceGxmTextureAnisoMode = 0;
pub const SCE_GXM_TEXTURE_ANISO_ENABLED: SceGxmTextureAnisoMode = 16384;
pub type SceGxmTextureType = u32;
pub const SCE_GXM_TEXTURE_SWIZZLED: SceGxmTextureType = 0;
pub const SCE_GXM_TEXTURE_CUBE: SceGxmTextureType = 1073741824;
pub const SCE_GXM_TEXTURE_LINEAR: SceGxmTextureType = 1610612736;
pub const SCE_GXM_TEXTURE_TILED: SceGxmTextureType = 2147483648;
pub const SCE_GXM_TEXTURE_LINEAR_STRIDED: SceGxmTextureType = 3221225472;
pub type SceGxmTextureFilter = u32;
pub const SCE_GXM_TEXTURE_FILTER_POINT: SceGxmTextureFilter = 0;
pub const SCE_GXM_TEXTURE_FILTER_LINEAR: SceGxmTextureFilter = 1;
pub const SCE_GXM_TEXTURE_FILTER_ANISO_LINEAR: SceGxmTextureFilter = 2;
pub const SCE_GXM_TEXTURE_FILTER_ANISO_POINT: SceGxmTextureFilter = 3;
pub type SceGxmTextureMipFilter = u32;
pub const SCE_GXM_TEXTURE_MIP_FILTER_DISABLED: SceGxmTextureMipFilter = 0;
pub const SCE_GXM_TEXTURE_MIP_FILTER_ENABLED: SceGxmTextureMipFilter = 512;
pub type SceGxmTextureAddrMode = u32;
pub const SCE_GXM_TEXTURE_ADDR_REPEAT: SceGxmTextureAddrMode = 0;
pub const SCE_GXM_TEXTURE_ADDR_MIRROR: SceGxmTextureAddrMode = 1;
pub const SCE_GXM_TEXTURE_ADDR_CLAMP: SceGxmTextureAddrMode = 2;
pub const SCE_GXM_TEXTURE_ADDR_MIRROR_CLAMP: SceGxmTextureAddrMode = 3;
pub const SCE_GXM_TEXTURE_ADDR_REPEAT_IGNORE_BORDER: SceGxmTextureAddrMode =
    4;
pub const SCE_GXM_TEXTURE_ADDR_CLAMP_FULL_BORDER: SceGxmTextureAddrMode = 5;
pub const SCE_GXM_TEXTURE_ADDR_CLAMP_IGNORE_BORDER: SceGxmTextureAddrMode = 6;
pub const SCE_GXM_TEXTURE_ADDR_CLAMP_HALF_BORDER: SceGxmTextureAddrMode = 7;
pub type SceGxmTextureGammaMode = u32;
pub const SCE_GXM_TEXTURE_GAMMA_NONE: SceGxmTextureGammaMode = 0;
pub const SCE_GXM_TEXTURE_GAMMA_R: SceGxmTextureGammaMode = 134217728;
pub const SCE_GXM_TEXTURE_GAMMA_GR: SceGxmTextureGammaMode = 402653184;
pub const SCE_GXM_TEXTURE_GAMMA_BGR: SceGxmTextureGammaMode = 134217728;
pub type SceGxmIndexFormat = u32;
pub const SCE_GXM_INDEX_FORMAT_U16: SceGxmIndexFormat = 0;
pub const SCE_GXM_INDEX_FORMAT_U32: SceGxmIndexFormat = 16777216;
pub type SceGxmIndexSource = u32;
pub const SCE_GXM_INDEX_SOURCE_INDEX_16BIT: SceGxmIndexSource = 0;
pub const SCE_GXM_INDEX_SOURCE_INDEX_32BIT: SceGxmIndexSource = 1;
pub const SCE_GXM_INDEX_SOURCE_INSTANCE_16BIT: SceGxmIndexSource = 2;
pub const SCE_GXM_INDEX_SOURCE_INSTANCE_32BIT: SceGxmIndexSource = 3;
pub type SceGxmFragmentProgramMode = u32;
pub const SCE_GXM_FRAGMENT_PROGRAM_DISABLED: SceGxmFragmentProgramMode =
    2097152;
pub const SCE_GXM_FRAGMENT_PROGRAM_ENABLED: SceGxmFragmentProgramMode = 0;
pub type SceGxmDepthWriteMode = u32;
pub const SCE_GXM_DEPTH_WRITE_DISABLED: SceGxmDepthWriteMode = 1048576;
pub const SCE_GXM_DEPTH_WRITE_ENABLED: SceGxmDepthWriteMode = 0;
pub type SceGxmLineFillLastPixelMode = u32;
pub const SCE_GXM_LINE_FILL_LAST_PIXEL_DISABLED: SceGxmLineFillLastPixelMode =
    0;
pub const SCE_GXM_LINE_FILL_LAST_PIXEL_ENABLED: SceGxmLineFillLastPixelMode =
    524288;
pub type SceGxmTwoSidedMode = u32;
pub const SCE_GXM_TWO_SIDED_DISABLED: SceGxmTwoSidedMode = 0;
pub const SCE_GXM_TWO_SIDED_ENABLED: SceGxmTwoSidedMode = 2048;
pub type SceGxmWClampMode = u32;
pub const SCE_GXM_WCLAMP_MODE_DISABLED: SceGxmWClampMode = 0;
pub const SCE_GXM_WCLAMP_MODE_ENABLED: SceGxmWClampMode = 32768;
pub type SceGxmViewportMode = u32;
pub const SCE_GXM_VIEWPORT_DISABLED: SceGxmViewportMode = 65536;
pub const SCE_GXM_VIEWPORT_ENABLED: SceGxmViewportMode = 0;
pub type SceGxmWBufferMode = u32;
pub const SCE_GXM_WBUFFER_DISABLED: SceGxmWBufferMode = 0;
pub const SCE_GXM_WBUFFER_ENABLED: SceGxmWBufferMode = 16384;
pub type SceGxmDepthStencilForceLoadMode = u32;
pub const SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_DISABLED:
          SceGxmDepthStencilForceLoadMode =
    0;
pub const SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_ENABLED:
          SceGxmDepthStencilForceLoadMode =
    2;
pub type SceGxmDepthStencilForceStoreMode = u32;
pub const SCE_GXM_DEPTH_STENCIL_FORCE_STORE_DISABLED:
          SceGxmDepthStencilForceStoreMode =
    0;
pub const SCE_GXM_DEPTH_STENCIL_FORCE_STORE_ENABLED:
          SceGxmDepthStencilForceStoreMode =
    4;
pub type SceGxmSceneFlags = u32;
pub const SCE_GXM_SCENE_FRAGMENT_SET_DEPENDENCY: SceGxmSceneFlags = 1;
pub const SCE_GXM_SCENE_VERTEX_WAIT_FOR_DEPENDENCY: SceGxmSceneFlags = 2;
pub type SceGxmMidSceneFlags = u32;
pub const SCE_GXM_MIDSCENE_PRESERVE_DEFAULT_UNIFORM_BUFFERS:
          SceGxmMidSceneFlags =
    1;
pub type SceGxmColorSurfaceScaleMode = u32;
pub const SCE_GXM_COLOR_SURFACE_SCALE_NONE: SceGxmColorSurfaceScaleMode = 0;
pub const SCE_GXM_COLOR_SURFACE_SCALE_MSAA_DOWNSCALE:
          SceGxmColorSurfaceScaleMode =
    1;
pub type SceGxmOutputRegisterSize = u32;
pub const SCE_GXM_OUTPUT_REGISTER_SIZE_32BIT: SceGxmOutputRegisterSize = 0;
pub const SCE_GXM_OUTPUT_REGISTER_SIZE_64BIT: SceGxmOutputRegisterSize = 1;
pub type SceGxmVisibilityTestMode = u32;
pub const SCE_GXM_VISIBILITY_TEST_DISABLED: SceGxmVisibilityTestMode = 0;
pub const SCE_GXM_VISIBILITY_TEST_ENABLED: SceGxmVisibilityTestMode = 16384;
pub type SceGxmVisibilityTestOp = u32;
pub const SCE_GXM_VISIBILITY_TEST_OP_INCREMENT: SceGxmVisibilityTestOp = 0;
pub const SCE_GXM_VISIBILITY_TEST_OP_SET: SceGxmVisibilityTestOp = 262144;
pub type SceGxmBlendFunc = u32;
pub const SCE_GXM_BLEND_FUNC_NONE: SceGxmBlendFunc = 0;
pub const SCE_GXM_BLEND_FUNC_ADD: SceGxmBlendFunc = 1;
pub const SCE_GXM_BLEND_FUNC_SUBTRACT: SceGxmBlendFunc = 2;
pub const SCE_GXM_BLEND_FUNC_REVERSE_SUBTRACT: SceGxmBlendFunc = 3;
pub type SceGxmBlendFactor = u32;
pub const SCE_GXM_BLEND_FACTOR_ZERO: SceGxmBlendFactor = 0;
pub const SCE_GXM_BLEND_FACTOR_ONE: SceGxmBlendFactor = 1;
pub const SCE_GXM_BLEND_FACTOR_SRC_COLOR: SceGxmBlendFactor = 2;
pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: SceGxmBlendFactor = 3;
pub const SCE_GXM_BLEND_FACTOR_SRC_ALPHA: SceGxmBlendFactor = 4;
pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: SceGxmBlendFactor = 5;
pub const SCE_GXM_BLEND_FACTOR_DST_COLOR: SceGxmBlendFactor = 6;
pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_COLOR: SceGxmBlendFactor = 7;
pub const SCE_GXM_BLEND_FACTOR_DST_ALPHA: SceGxmBlendFactor = 8;
pub const SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: SceGxmBlendFactor = 9;
pub const SCE_GXM_BLEND_FACTOR_SRC_ALPHA_SATURATE: SceGxmBlendFactor = 10;
pub const SCE_GXM_BLEND_FACTOR_DST_ALPHA_SATURATE: SceGxmBlendFactor = 11;
pub type SceGxmColorMask = u32;
pub const SCE_GXM_COLOR_MASK_NONE: SceGxmColorMask = 0;
pub const SCE_GXM_COLOR_MASK_A: SceGxmColorMask = 1;
pub const SCE_GXM_COLOR_MASK_R: SceGxmColorMask = 2;
pub const SCE_GXM_COLOR_MASK_G: SceGxmColorMask = 4;
pub const SCE_GXM_COLOR_MASK_B: SceGxmColorMask = 8;
pub const SCE_GXM_COLOR_MASK_ALL: SceGxmColorMask = 15;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmBlendInfo {
    pub colorMask: SceGxmColorMask,
    pub _bindgen_bitfield_1_: SceGxmBlendFunc,
    pub _bindgen_bitfield_2_: SceGxmBlendFunc,
    pub _bindgen_bitfield_3_: SceGxmBlendFactor,
    pub _bindgen_bitfield_4_: SceGxmBlendFactor,
    pub _bindgen_bitfield_5_: SceGxmBlendFactor,
    pub _bindgen_bitfield_6_: SceGxmBlendFactor,
}
impl ::core::default::Default for SceGxmBlendInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub enum SceGxmRenderTarget { }
pub enum SceGxmSyncObject { }
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmVertexAttribute {
    pub streamIndex: ::libc::c_ushort,
    pub offset: ::libc::c_ushort,
    pub format: SceGxmAttributeFormat,
    pub componentCount: ::libc::c_uchar,
    pub regIndex: ::libc::c_ushort,
}
impl ::core::default::Default for SceGxmVertexAttribute {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmVertexStream {
    pub stride: ::libc::c_ushort,
    pub indexSource: ::libc::c_ushort,
}
impl ::core::default::Default for SceGxmVertexStream {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmTexture {
    pub controlWords: [::libc::c_uint; 4usize],
}
impl ::core::default::Default for SceGxmTexture {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmColorSurface {
    pub pbeSidebandWord: ::libc::c_uint,
    pub pbeEmitWords: [::libc::c_uint; 6usize],
    pub outputRegisterSize: ::libc::c_uint,
    pub backgroundTex: SceGxmTexture,
}
impl ::core::default::Default for SceGxmColorSurface {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmDepthStencilSurface {
    pub zlsControl: ::libc::c_uint,
    pub depthData: *mut ::libc::c_void,
    pub stencilData: *mut ::libc::c_void,
    pub backgroundDepth: f32,
    pub backgroundControl: ::libc::c_uint,
}
impl ::core::default::Default for SceGxmDepthStencilSurface {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmAuxiliarySurface {
    pub colorFormat: uint32_t,
    pub type_: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub stride: uint32_t,
    pub data: *mut ::libc::c_void,
}
impl ::core::default::Default for SceGxmAuxiliarySurface {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmNotification {
    pub address: *mut ::libc::c_uint,
    pub value: ::libc::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceGxmNotification {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmValidRegion {
    pub xMin: ::libc::c_uint,
    pub yMin: ::libc::c_uint,
    pub xMax: ::libc::c_uint,
    pub yMax: ::libc::c_uint,
}
impl ::core::default::Default for SceGxmValidRegion {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub enum SceGxmContext { }
pub type Enum_Unnamed35 = u32;
pub const SCE_GXM_MINIMUM_CONTEXT_HOST_MEM_SIZE: Enum_Unnamed35 = 2048;
pub const SCE_GXM_DEFAULT_PARAMETER_BUFFER_SIZE: Enum_Unnamed35 = 16777216;
pub const SCE_GXM_DEFAULT_VDM_RING_BUFFER_SIZE: Enum_Unnamed35 = 131072;
pub const SCE_GXM_DEFAULT_VERTEX_RING_BUFFER_SIZE: Enum_Unnamed35 = 2097152;
pub const SCE_GXM_DEFAULT_FRAGMENT_RING_BUFFER_SIZE: Enum_Unnamed35 = 524288;
pub const SCE_GXM_DEFAULT_FRAGMENT_USSE_RING_BUFFER_SIZE: Enum_Unnamed35 =
    16384;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmContextParams {
    pub hostMem: *mut ::libc::c_void,
    pub hostMemSize: SceSize,
    pub vdmRingBufferMem: *mut ::libc::c_void,
    pub vdmRingBufferMemSize: SceSize,
    pub vertexRingBufferMem: *mut ::libc::c_void,
    pub vertexRingBufferMemSize: SceSize,
    pub fragmentRingBufferMem: *mut ::libc::c_void,
    pub fragmentRingBufferMemSize: SceSize,
    pub fragmentUsseRingBufferMem: *mut ::libc::c_void,
    pub fragmentUsseRingBufferMemSize: SceSize,
    pub fragmentUsseRingBufferOffset: ::libc::c_uint,
}
impl ::core::default::Default for SceGxmContextParams {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub enum SceGxmVertexProgram { }
pub enum SceGxmFragmentProgram { }
pub type Enum_Unnamed36 = u32;
pub const SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT: Enum_Unnamed36 = 7;
pub const SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT: Enum_Unnamed36 = 9;
pub const SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT: Enum_Unnamed36 = 11;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmPrecomputedVertexState {
    pub data: [::libc::c_uint; 7usize],
}
impl ::core::default::Default for SceGxmPrecomputedVertexState {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmPrecomputedFragmentState {
    pub data: [::libc::c_uint; 9usize],
}
impl ::core::default::Default for SceGxmPrecomputedFragmentState {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmPrecomputedDraw {
    pub data: [::libc::c_uint; 11usize],
}
impl ::core::default::Default for SceGxmPrecomputedDraw {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed37 = u32;
pub const SCE_GXM_MAX_VERTEX_ATTRIBUTES: Enum_Unnamed37 = 16;
pub const SCE_GXM_MAX_VERTEX_STREAMS: Enum_Unnamed37 = 4;
pub const SCE_GXM_MAX_TEXTURE_UNITS: Enum_Unnamed37 = 16;
pub const SCE_GXM_MAX_UNIFORM_BUFFERS: Enum_Unnamed37 = 8;
pub const SCE_GXM_MAX_AUXILIARY_SURFACES: Enum_Unnamed37 = 3;
pub type Enum_Unnamed38 = u32;
pub const SCE_GXM_TILE_SHIFTX: Enum_Unnamed38 = 5;
pub const SCE_GXM_TILE_SHIFTY: Enum_Unnamed38 = 5;
pub const SCE_GXM_TILE_SIZEX: Enum_Unnamed38 = 32;
pub const SCE_GXM_TILE_SIZEY: Enum_Unnamed38 = 32;
pub type Enum_Unnamed39 = u32;
pub const SCE_GXM_COLOR_SURFACE_ALIGNMENT: Enum_Unnamed39 = 4;
pub const SCE_GXM_TEXTURE_ALIGNMENT: Enum_Unnamed39 = 16;
pub const SCE_GXM_DEPTHSTENCIL_SURFACE_ALIGNMENT: Enum_Unnamed39 = 16;
pub const SCE_GXM_PALETTE_ALIGNMENT: Enum_Unnamed39 = 64;
pub enum SceGxmProgram { }
pub enum SceGxmProgramParameter { }
pub type SceGxmProgramType = u32;
pub const SCE_GXM_VERTEX_PROGRAM: SceGxmProgramType = 0;
pub const SCE_GXM_FRAGMENT_PROGRAM: SceGxmProgramType = 1;
pub type SceGxmParameterCategory = u32;
pub const SCE_GXM_PARAMETER_CATEGORY_ATTRIBUTE: SceGxmParameterCategory = 0;
pub const SCE_GXM_PARAMETER_CATEGORY_UNIFORM: SceGxmParameterCategory = 1;
pub const SCE_GXM_PARAMETER_CATEGORY_SAMPLER: SceGxmParameterCategory = 2;
pub const SCE_GXM_PARAMETER_CATEGORY_AUXILIARY_SURFACE:
          SceGxmParameterCategory =
    3;
pub const SCE_GXM_PARAMETER_CATEGORY_UNIFORM_BUFFER: SceGxmParameterCategory =
    4;
pub type SceGxmParameterType = u32;
pub const SCE_GXM_PARAMETER_TYPE_F32: SceGxmParameterType = 0;
pub const SCE_GXM_PARAMETER_TYPE_F16: SceGxmParameterType = 1;
pub const SCE_GXM_PARAMETER_TYPE_C10: SceGxmParameterType = 2;
pub const SCE_GXM_PARAMETER_TYPE_U32: SceGxmParameterType = 3;
pub const SCE_GXM_PARAMETER_TYPE_S32: SceGxmParameterType = 4;
pub const SCE_GXM_PARAMETER_TYPE_U16: SceGxmParameterType = 5;
pub const SCE_GXM_PARAMETER_TYPE_S16: SceGxmParameterType = 6;
pub const SCE_GXM_PARAMETER_TYPE_U8: SceGxmParameterType = 7;
pub const SCE_GXM_PARAMETER_TYPE_S8: SceGxmParameterType = 8;
pub const SCE_GXM_PARAMETER_TYPE_AGGREGATE: SceGxmParameterType = 9;
pub type SceGxmParameterSemantic = u32;
pub const SCE_GXM_PARAMETER_SEMANTIC_NONE: SceGxmParameterSemantic = 0;
pub const SCE_GXM_PARAMETER_SEMANTIC_ATTR: SceGxmParameterSemantic = 1;
pub const SCE_GXM_PARAMETER_SEMANTIC_BCOL: SceGxmParameterSemantic = 2;
pub const SCE_GXM_PARAMETER_SEMANTIC_BINORMAL: SceGxmParameterSemantic = 3;
pub const SCE_GXM_PARAMETER_SEMANTIC_BLENDINDICES: SceGxmParameterSemantic =
    4;
pub const SCE_GXM_PARAMETER_SEMANTIC_BLENDWEIGHT: SceGxmParameterSemantic = 5;
pub const SCE_GXM_PARAMETER_SEMANTIC_COLOR: SceGxmParameterSemantic = 6;
pub const SCE_GXM_PARAMETER_SEMANTIC_DIFFUSE: SceGxmParameterSemantic = 7;
pub const SCE_GXM_PARAMETER_SEMANTIC_FOGCOORD: SceGxmParameterSemantic = 8;
pub const SCE_GXM_PARAMETER_SEMANTIC_NORMAL: SceGxmParameterSemantic = 9;
pub const SCE_GXM_PARAMETER_SEMANTIC_POINTSIZE: SceGxmParameterSemantic = 10;
pub const SCE_GXM_PARAMETER_SEMANTIC_POSITION: SceGxmParameterSemantic = 11;
pub const SCE_GXM_PARAMETER_SEMANTIC_SPECULAR: SceGxmParameterSemantic = 12;
pub const SCE_GXM_PARAMETER_SEMANTIC_TANGENT: SceGxmParameterSemantic = 13;
pub const SCE_GXM_PARAMETER_SEMANTIC_TEXCOORD: SceGxmParameterSemantic = 14;
pub enum SceGxmShaderPatcher { }
pub enum SceGxmRegisteredProgram { }
pub type SceGxmShaderPatcherId = *mut SceGxmRegisteredProgram;
pub type SceGxmShaderPatcherHostAllocCallback =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::libc::c_void,
                                                size: SceSize)
                               -> *mut ::libc::c_void>;
pub type SceGxmShaderPatcherHostFreeCallback =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::libc::c_void,
                                                mem: *mut ::libc::c_void)>;
pub type SceGxmShaderPatcherBufferAllocCallback =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::libc::c_void,
                                                size: SceSize)
                               -> *mut ::libc::c_void>;
pub type SceGxmShaderPatcherBufferFreeCallback =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::libc::c_void,
                                                mem: *mut ::libc::c_void)>;
pub type SceGxmShaderPatcherUsseAllocCallback =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::libc::c_void,
                                                size: SceSize,
                                                usseOffset:
                                                    *mut ::libc::c_uint)
                               -> *mut ::libc::c_void>;
pub type SceGxmShaderPatcherUsseFreeCallback =
    ::core::option::Option<unsafe extern "C" fn(userData: *mut ::libc::c_void,
                                                mem: *mut ::libc::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmShaderPatcherParams {
    pub userData: *mut ::libc::c_void,
    pub hostAllocCallback: SceGxmShaderPatcherHostAllocCallback,
    pub hostFreeCallback: SceGxmShaderPatcherHostFreeCallback,
    pub bufferAllocCallback: SceGxmShaderPatcherBufferAllocCallback,
    pub bufferFreeCallback: SceGxmShaderPatcherBufferFreeCallback,
    pub bufferMem: *mut ::libc::c_void,
    pub bufferMemSize: SceSize,
    pub vertexUsseAllocCallback: SceGxmShaderPatcherUsseAllocCallback,
    pub vertexUsseFreeCallback: SceGxmShaderPatcherUsseFreeCallback,
    pub vertexUsseMem: *mut ::libc::c_void,
    pub vertexUsseMemSize: SceSize,
    pub vertexUsseOffset: ::libc::c_uint,
    pub fragmentUsseAllocCallback: SceGxmShaderPatcherUsseAllocCallback,
    pub fragmentUsseFreeCallback: SceGxmShaderPatcherUsseFreeCallback,
    pub fragmentUsseMem: *mut ::libc::c_void,
    pub fragmentUsseMemSize: SceSize,
    pub fragmentUsseOffset: ::libc::c_uint,
}
impl ::core::default::Default for SceGxmShaderPatcherParams {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceGxmRenderTargetFlags = u32;
pub const SCE_GXM_RENDER_TARGET_CUSTOM_MULTISAMPLE_LOCATIONS:
          SceGxmRenderTargetFlags =
    1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmRenderTargetParams {
    pub flags: uint32_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub scenesPerFrame: uint16_t,
    pub multisampleMode: uint16_t,
    pub multisampleLocations: uint32_t,
    pub driverMemBlock: SceUID,
}
impl ::core::default::Default for SceGxmRenderTargetParams {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed40 = u32;
pub const SCE_COMMON_DIALOG_ERROR_BUSY: Enum_Unnamed40 = 2147615745;
pub const SCE_COMMON_DIALOG_ERROR_NULL: Enum_Unnamed40 = 2147615746;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_ARGUMENT: Enum_Unnamed40 =
    2147615747;
pub const SCE_COMMON_DIALOG_ERROR_NOT_RUNNING: Enum_Unnamed40 = 2147615748;
pub const SCE_COMMON_DIALOG_ERROR_NOT_SUPPORTED: Enum_Unnamed40 = 2147615749;
pub const SCE_COMMON_DIALOG_ERROR_ILLEGAL_CALLER_THREAD: Enum_Unnamed40 =
    2147615750;
pub const SCE_COMMON_DIALOG_ERROR_NOT_CONFIGURED: Enum_Unnamed40 = 2147615751;
pub const SCE_COMMON_DIALOG_ERROR_NOT_AVAILABLE: Enum_Unnamed40 = 2147615752;
pub const SCE_COMMON_DIALOG_ERROR_NOT_FINISHED: Enum_Unnamed40 = 2147615760;
pub const SCE_COMMON_DIALOG_ERROR_NOT_IN_USE: Enum_Unnamed40 = 2147615761;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_COLOR_FORMAT: Enum_Unnamed40 =
    2147615776;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_SURFACE_RESOLUTION: Enum_Unnamed40 =
    2147615777;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_SURFACE_STRIDE: Enum_Unnamed40 =
    2147615778;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_SURFACE_TYPE: Enum_Unnamed40 =
    2147615779;
pub const SCE_COMMON_DIALOG_ERROR_WITHIN_SCENE: Enum_Unnamed40 = 2147615780;
pub const SCE_COMMON_DIALOG_ERROR_IME_IN_USE: Enum_Unnamed40 = 2147615792;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_LANGUAGE: Enum_Unnamed40 =
    2147615793;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_ENTER_BUTTON_ASSIGN: Enum_Unnamed40
          =
    2147615794;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_INFOBAR_PARAM: Enum_Unnamed40 =
    2147615795;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_BG_COLOR: Enum_Unnamed40 =
    2147615796;
pub const SCE_COMMON_DIALOG_ERROR_INVALID_DIMMER_COLOR: Enum_Unnamed40 =
    2147615797;
pub const SCE_COMMON_DIALOG_ERROR_UNEXPECTED_FATAL: Enum_Unnamed40 =
    2147615871;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCommonDialogConfigParam {
    pub language: SceSystemParamLang,
    pub enterButtonAssign: SceSystemParamEnterButtonAssign,
    pub reserved: [SceUInt8; 32usize],
}
impl ::core::default::Default for SceCommonDialogConfigParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceCommonDialogStatus = u32;
pub const SCE_COMMON_DIALOG_STATUS_NONE: SceCommonDialogStatus = 0;
pub const SCE_COMMON_DIALOG_STATUS_RUNNING: SceCommonDialogStatus = 1;
pub const SCE_COMMON_DIALOG_STATUS_FINISHED: SceCommonDialogStatus = 2;
pub type SceCommonDialogResult = u32;
pub const SCE_COMMON_DIALOG_RESULT_OK: SceCommonDialogResult = 0;
pub const SCE_COMMON_DIALOG_RESULT_USER_CANCELED: SceCommonDialogResult = 1;
pub const SCE_COMMON_DIALOG_RESULT_ABORTED: SceCommonDialogResult = 2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCommonDialogRenderTargetInfo {
    pub depthSurfaceData: ScePVoid,
    pub colorSurfaceData: ScePVoid,
    pub surfaceType: SceGxmColorSurfaceType,
    pub colorFormat: SceGxmColorFormat,
    pub width: SceUInt32,
    pub height: SceUInt32,
    pub strideInPixels: SceUInt32,
    pub reserved: [SceUInt8; 32usize],
}
impl ::core::default::Default for SceCommonDialogRenderTargetInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCommonDialogUpdateParam {
    pub renderTarget: SceCommonDialogRenderTargetInfo,
    pub displaySyncObject: *mut SceGxmSyncObject,
    pub reserved: [SceUInt8; 32usize],
}
impl ::core::default::Default for SceCommonDialogUpdateParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCommonDialogInfobarParam {
    pub visibility: SceInt32,
    pub color: SceInt32,
    pub transparency: SceInt32,
    pub reserved: [SceUInt8; 32usize],
}
impl ::core::default::Default for SceCommonDialogInfobarParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCommonDialogColor {
    pub r: SceUInt8,
    pub g: SceUInt8,
    pub b: SceUInt8,
    pub a: SceUInt8,
}
impl ::core::default::Default for SceCommonDialogColor {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceCommonDialogBgColor = SceCommonDialogColor;
#[repr(C)]
#[derive(Copy)]
pub struct SceCommonDialogParam {
    pub infobarParam: *mut SceCommonDialogInfobarParam,
    pub bgColor: *mut SceCommonDialogColor,
    pub dimmerColor: *mut SceCommonDialogColor,
    pub reserved: [SceUInt8; 60usize],
    pub magic: SceUInt32,
}
impl ::core::clone::Clone for SceCommonDialogParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceCommonDialogParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed41 = u32;
pub const SCE_CTRL_ERROR_INVALID_ARG: Enum_Unnamed41 = 2150891521;
pub const SCE_CTRL_ERROR_PRIV_REQUIRED: Enum_Unnamed41 = 2150891522;
pub const SCE_CTRL_ERROR_FATAL: Enum_Unnamed41 = 2150891775;
pub type Enum_Unnamed42 = u32;
pub const SCE_CTRL_SELECT: Enum_Unnamed42 = 1;
pub const SCE_CTRL_START: Enum_Unnamed42 = 8;
pub const SCE_CTRL_UP: Enum_Unnamed42 = 16;
pub const SCE_CTRL_RIGHT: Enum_Unnamed42 = 32;
pub const SCE_CTRL_DOWN: Enum_Unnamed42 = 64;
pub const SCE_CTRL_LEFT: Enum_Unnamed42 = 128;
pub const SCE_CTRL_LTRIGGER: Enum_Unnamed42 = 256;
pub const SCE_CTRL_RTRIGGER: Enum_Unnamed42 = 512;
pub const SCE_CTRL_TRIANGLE: Enum_Unnamed42 = 4096;
pub const SCE_CTRL_CIRCLE: Enum_Unnamed42 = 8192;
pub const SCE_CTRL_CROSS: Enum_Unnamed42 = 16384;
pub const SCE_CTRL_SQUARE: Enum_Unnamed42 = 32768;
pub const SCE_CTRL_ANY: Enum_Unnamed42 = 65536;
pub type Enum_Unnamed43 = u32;
pub const SCE_CTRL_MODE_DIGITAL: Enum_Unnamed43 = 0;
pub const SCE_CTRL_MODE_ANALOG: Enum_Unnamed43 = 1;
pub const SCE_CTRL_MODE_ANALOG_WIDE: Enum_Unnamed43 = 2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCtrlData {
    pub timeStamp: uint64_t,
    pub buttons: ::libc::c_uint,
    pub lx: ::libc::c_uchar,
    pub ly: ::libc::c_uchar,
    pub rx: ::libc::c_uchar,
    pub ry: ::libc::c_uchar,
    pub reserved: [uint8_t; 16usize],
}
impl ::core::default::Default for SceCtrlData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCtrlRapidFireRule {
    pub Mask: ::libc::c_uint,
    pub Trigger: ::libc::c_uint,
    pub Target: ::libc::c_uint,
    pub Delay: ::libc::c_uint,
    pub Make: ::libc::c_uint,
    pub Break: ::libc::c_uint,
}
impl ::core::default::Default for SceCtrlRapidFireRule {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceCtrlActuator {
    pub enable: ::libc::c_int,
    pub unk: ::libc::c_int,
}
impl ::core::default::Default for SceCtrlActuator {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed44 = u32;
pub const SCE_DISPLAY_ERROR_OK: Enum_Unnamed44 = 0;
pub const SCE_DISPLAY_ERROR_INVALID_HEAD: Enum_Unnamed44 = 2150170624;
pub const SCE_DISPLAY_ERROR_INVALID_VALUE: Enum_Unnamed44 = 2150170625;
pub const SCE_DISPLAY_ERROR_INVALID_ADDR: Enum_Unnamed44 = 2150170626;
pub const SCE_DISPLAY_ERROR_INVALID_PIXELFORMAT: Enum_Unnamed44 = 2150170627;
pub const SCE_DISPLAY_ERROR_INVALID_PITCH: Enum_Unnamed44 = 2150170628;
pub const SCE_DISPLAY_ERROR_INVALID_RESOLUTION: Enum_Unnamed44 = 2150170629;
pub const SCE_DISPLAY_ERROR_INVALID_UPDATETIMING: Enum_Unnamed44 = 2150170630;
pub const SCE_DISPLAY_ERROR_NO_FRAME_BUFFER: Enum_Unnamed44 = 2150170631;
pub const SCE_DISPLAY_ERROR_NO_PIXEL_DATA: Enum_Unnamed44 = 2150170632;
pub type Enum_Unnamed45 = u32;
pub const SCE_DISPLAY_SETBUF_IMMEDIATE: Enum_Unnamed45 = 0;
pub const SCE_DISPLAY_SETBUF_NEXTFRAME: Enum_Unnamed45 = 1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceDisplayFrameBuf {
    pub size: SceSize,
    pub base: *mut ::libc::c_void,
    pub pitch: ::libc::c_uint,
    pub pixelformat: ::libc::c_uint,
    pub width: ::libc::c_uint,
    pub height: ::libc::c_uint,
}
impl ::core::default::Default for SceDisplayFrameBuf {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed46 = u32;
pub const SCE_FIBER_ERROR_NULL: Enum_Unnamed46 = 2153316353;
pub const SCE_FIBER_ERROR_ALIGNMENT: Enum_Unnamed46 = 2153316354;
pub const SCE_FIBER_ERROR_RANGE: Enum_Unnamed46 = 2153316355;
pub const SCE_FIBER_ERROR_INVALID: Enum_Unnamed46 = 2153316356;
pub const SCE_FIBER_ERROR_PERMISSION: Enum_Unnamed46 = 2153316357;
pub const SCE_FIBER_ERROR_STATE: Enum_Unnamed46 = 2153316358;
pub const SCE_FIBER_ERROR_BUSY: Enum_Unnamed46 = 2153316359;
pub const SCE_FIBER_ERROR_AGAIN: Enum_Unnamed46 = 2153316360;
pub const SCE_FIBER_ERROR_FATAL: Enum_Unnamed46 = 2153316361;
#[repr(C)]
#[derive(Copy)]
pub struct SceFiber {
    pub reserved: [::libc::c_char; 128usize],
}
impl ::core::clone::Clone for SceFiber {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceFiber {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceFiberOptParam {
    pub reserved: [::libc::c_char; 128usize],
}
impl ::core::clone::Clone for SceFiberOptParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceFiberOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceFiberEntry =
    ::core::option::Option<extern "C" fn(argOnInitialize: SceUInt32,
                                         argOnRun: SceUInt32)>;
#[repr(C)]
#[derive(Copy)]
pub struct SceFiberInfo {
    pub entry: SceFiberEntry,
    pub argOnInitialize: SceUInt32,
    pub addrContext: *mut ::libc::c_void,
    pub sizeContext: SceSize,
    pub name: [::libc::c_char; 32usize],
    pub padding: [::libc::c_uint; 80usize],
}
impl ::core::clone::Clone for SceFiberInfo {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceFiberInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceGxtErrorCode = u32;
pub const SCE_OK: SceGxtErrorCode = 0;
pub const SCE_GXT_ERROR_INVALID_ALIGNMENT: SceGxtErrorCode = 1;
pub const SCE_GXT_ERROR_INVALID_VALUE: SceGxtErrorCode = 2;
pub const SCE_GXT_ERROR_INVALID_POINTER: SceGxtErrorCode = 3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxtHeader {
    pub tag: uint32_t,
    pub version: uint32_t,
    pub numTextures: uint32_t,
    pub dataOffset: uint32_t,
    pub dataSize: uint32_t,
    pub numP4Palettes: uint32_t,
    pub numP8Palettes: uint32_t,
    pub pad: uint32_t,
}
impl ::core::default::Default for SceGxtHeader {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxtTextureInfo {
    pub dataOffset: uint32_t,
    pub dataSize: uint32_t,
    pub paletteIndex: uint32_t,
    pub flags: uint32_t,
    pub controlWords: [uint32_t; 4usize],
}
impl ::core::default::Default for SceGxtTextureInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceImeCharFilter =
    ::core::option::Option<extern "C" fn(ch: SceWChar16) -> SceInt32>;
#[repr(C)]
#[derive(Copy)]
pub struct SceImeDialogParam {
    pub sdkVersion: SceUInt32,
    pub inputMethod: SceUInt32,
    pub supportedLanguages: SceUInt64,
    pub languagesForced: SceBool,
    pub type_: SceUInt32,
    pub option: SceUInt32,
    pub filter: SceImeCharFilter,
    pub dialogMode: SceUInt32,
    pub textBoxMode: SceUInt32,
    pub title: *const SceWChar16,
    pub maxTextLength: SceUInt32,
    pub initialText: *mut SceWChar16,
    pub inputTextBuffer: *mut SceWChar16,
    pub commonParam: SceCommonDialogParam,
    pub reserved: [SceChar8; 36usize],
}
impl ::core::clone::Clone for SceImeDialogParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceImeDialogParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceImeDialogResult {
    pub result: SceInt32,
    pub button: SceInt32,
    pub reserved: [SceChar8; 28usize],
}
impl ::core::default::Default for SceImeDialogResult {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type __off_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
pub type __loff_t = ::libc::c_longlong;
pub type __suseconds_t = ::libc::c_long;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type uint_ = ::libc::c_uint;
pub type ulong = ::libc::c_ulong;
pub type clock_t = ::libc::c_ulong;
pub type time_t = ::libc::c_long;
pub type daddr_t = ::libc::c_long;
pub type caddr_t = *mut ::libc::c_char;
pub type ino_t = ::libc::c_ushort;
pub type off_t = _off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = ::libc::c_int;
pub type key_t = ::libc::c_long;
pub type ssize_t = isize;
pub type mode_t = ::libc::c_uint;
pub type nlink_t = ::libc::c_ushort;
pub type fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _types_fd_set {
    pub fds_bits: [fd_mask; 1usize],
}
impl ::core::default::Default for _types_fd_set {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type clockid_t = ::libc::c_ulong;
pub type timer_t = ::libc::c_ulong;
pub type useconds_t = ::libc::c_ulong;
pub type suseconds_t = __suseconds_t;
pub type sbintime_t = __int64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::libc::c_long,
}
impl ::core::default::Default for timespec {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
impl ::core::default::Default for itimerspec {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
}
impl ::core::default::Default for tm {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __tzrule_struct {
    pub ch: ::libc::c_char,
    pub m: ::libc::c_int,
    pub n: ::libc::c_int,
    pub d: ::libc::c_int,
    pub s: ::libc::c_int,
    pub change: time_t,
    pub offset: ::libc::c_long,
}
impl ::core::default::Default for __tzrule_struct {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type __tzrule_type = __tzrule_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __tzinfo_struct {
    pub __tznorth: ::libc::c_int,
    pub __tzyear: ::libc::c_int,
    pub __tzrule: [__tzrule_type; 2usize],
}
impl ::core::default::Default for __tzinfo_struct {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type __tzinfo_type = __tzinfo_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceRtcTick {
    pub tick: SceUInt64,
}
impl ::core::default::Default for SceRtcTick {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceSslCert = ::libc::c_void;
pub type SceSslCertName = ::libc::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceSslMemoryPoolStats {
    pub poolSize: ::libc::c_uint,
    pub maxInuseSize: ::libc::c_uint,
    pub currentInuseSize: ::libc::c_uint,
    pub reserved: ::libc::c_int,
}
impl ::core::default::Default for SceSslMemoryPoolStats {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed47 = u32;
pub const SCE_MSG_DIALOG_ERROR_PARAM: Enum_Unnamed47 = 2148534785;
pub type Enum_Unnamed48 = u32;
pub const SCE_MSG_DIALOG_USER_MSG_SIZE: Enum_Unnamed48 = 512;
pub type SceMsgDialogMode = SceInt32;
pub type Enum_Unnamed49 = u32;
pub const SCE_MSG_DIALOG_MODE_INVALID: Enum_Unnamed49 = 0;
pub const SCE_MSG_DIALOG_MODE_USER_MSG: Enum_Unnamed49 = 1;
pub const SCE_MSG_DIALOG_MODE_SYSTEM_MSG: Enum_Unnamed49 = 2;
pub const SCE_MSG_DIALOG_MODE_ERROR_CODE: Enum_Unnamed49 = 3;
pub const SCE_MSG_DIALOG_MODE_PROGRESS_BAR: Enum_Unnamed49 = 4;
pub type SceMsgDialogSystemMessageType = SceInt32;
pub type Enum_Unnamed50 = u32;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_INVALID: Enum_Unnamed50 = 0;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_WAIT: Enum_Unnamed50 = 1;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_NOSPACE: Enum_Unnamed50 = 2;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_MAGNETIC_CALIBRATION: Enum_Unnamed50 = 3;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_WAIT_SMALL: Enum_Unnamed50 = 5;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_WAIT_CANCEL: Enum_Unnamed50 = 6;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_NEED_MC_CONTINUE: Enum_Unnamed50 = 7;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_NEED_MC_OPERATION: Enum_Unnamed50 = 8;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_TRC_MIC_DISABLED: Enum_Unnamed50 = 100;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_TRC_WIFI_REQUIRED_OPERATION:
          Enum_Unnamed50 =
    101;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_TRC_WIFI_REQUIRED_APPLICATION:
          Enum_Unnamed50 =
    102;
pub const SCE_MSG_DIALOG_SYSMSG_TYPE_TRC_EMPTY_STORE: Enum_Unnamed50 = 103;
pub type SceMsgDialogButtonType = SceInt32;
pub type Enum_Unnamed51 = u32;
pub const SCE_MSG_DIALOG_BUTTON_TYPE_OK: Enum_Unnamed51 = 0;
pub const SCE_MSG_DIALOG_BUTTON_TYPE_YESNO: Enum_Unnamed51 = 1;
pub const SCE_MSG_DIALOG_BUTTON_TYPE_NONE: Enum_Unnamed51 = 2;
pub const SCE_MSG_DIALOG_BUTTON_TYPE_OK_CANCEL: Enum_Unnamed51 = 3;
pub const SCE_MSG_DIALOG_BUTTON_TYPE_CANCEL: Enum_Unnamed51 = 4;
pub type SceMsgDialogButtonId = SceInt32;
pub type Enum_Unnamed52 = u32;
pub const SCE_MSG_DIALOG_BUTTON_ID_INVALID: Enum_Unnamed52 = 0;
pub const SCE_MSG_DIALOG_BUTTON_ID_OK: Enum_Unnamed52 = 1;
pub const SCE_MSG_DIALOG_BUTTON_ID_YES: Enum_Unnamed52 = 1;
pub const SCE_MSG_DIALOG_BUTTON_ID_NO: Enum_Unnamed52 = 2;
pub type SceMsgDialogProgressBarType = SceInt32;
pub type Enum_Unnamed53 = u32;
pub const SCE_MSG_DIALOG_PROGRESSBAR_TYPE_PERCENTAGE: Enum_Unnamed53 = 0;
pub type SceMsgDialogProgressBarTarget = SceInt32;
pub type Enum_Unnamed54 = u32;
pub const SCE_MSG_DIALOG_PROGRESSBAR_TARGET_BAR_DEFAULT: Enum_Unnamed54 = 0;
pub type SceMsgDialogEnvFlag = SceUInt32;
pub type Enum_Unnamed55 = u32;
pub const SCE_MSG_DIALOG_ENV_FLAG_DEFAULT: Enum_Unnamed55 = 0;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMsgDialogUserMessageParam {
    pub buttonType: SceMsgDialogButtonType,
    pub msg: *const SceChar8,
    pub reserved: [SceChar8; 32usize],
}
impl ::core::default::Default for SceMsgDialogUserMessageParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMsgDialogSystemMessageParam {
    pub sysMsgType: SceMsgDialogSystemMessageType,
    pub value: SceInt32,
    pub reserved: [SceChar8; 32usize],
}
impl ::core::default::Default for SceMsgDialogSystemMessageParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMsgDialogErrorCodeParam {
    pub errorCode: SceInt32,
    pub reserved: [SceChar8; 32usize],
}
impl ::core::default::Default for SceMsgDialogErrorCodeParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMsgDialogProgressBarParam {
    pub barType: SceMsgDialogProgressBarType,
    pub sysMsgParam: SceMsgDialogSystemMessageParam,
    pub msg: *const SceChar8,
    pub reserved: [SceInt32; 8usize],
}
impl ::core::default::Default for SceMsgDialogProgressBarParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMsgDialogParam {
    pub sdkVersion: SceUInt32,
    pub commonParam: SceCommonDialogParam,
    pub mode: SceMsgDialogMode,
    pub userMsgParam: *mut SceMsgDialogUserMessageParam,
    pub sysMsgParam: *mut SceMsgDialogSystemMessageParam,
    pub errorCodeParam: *mut SceMsgDialogErrorCodeParam,
    pub progBarParam: *mut SceMsgDialogProgressBarParam,
    pub flag: SceMsgDialogEnvFlag,
    pub reserved: [SceChar8; 32usize],
}
impl ::core::default::Default for SceMsgDialogParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMsgDialogResult {
    pub mode: SceMsgDialogMode,
    pub result: SceInt32,
    pub buttonId: SceMsgDialogButtonId,
    pub reserved: [SceChar8; 32usize],
}
impl ::core::default::Default for SceMsgDialogResult {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sceModuleInfo {
    pub attr: uint16_t,
    pub ver: uint16_t,
    pub name: [::libc::c_char; 27usize],
    pub type_: uint8_t,
    pub gp: *mut ::libc::c_void,
    pub expTop: uint32_t,
    pub expBtm: uint32_t,
    pub impTop: uint32_t,
    pub impBtm: uint32_t,
    pub nid: uint32_t,
    pub unk: [uint32_t; 3usize],
    pub start: uint32_t,
    pub stop: uint32_t,
    pub exidxTop: uint32_t,
    pub exidxBtm: uint32_t,
    pub extabTop: uint32_t,
    pub extabBtm: uint32_t,
}
impl ::core::default::Default for _sceModuleInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceModuleInfo = _sceModuleInfo;
#[repr(C)]
#[derive(Copy)]
pub struct SceMotionState {
    pub timestamp: ::libc::c_uint,
    pub acceleration: SceFVector3,
    pub angularVelocity: SceFVector3,
    pub reserved1: [uint8_t; 12usize],
    pub deviceQuat: SceFQuaternion,
    pub rotationMatrix: SceUMatrix4,
    pub nedMatrix: SceUMatrix4,
    pub reserved2: uint32_t,
    pub basicOrientation: SceFVector3,
    pub hostTimestamp: SceULong64,
    pub reserved: [uint8_t; 40usize],
}
impl ::core::clone::Clone for SceMotionState {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceMotionState {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceMotionSensorState {
    pub accelerometer: SceFVector3,
    pub gyro: SceFVector3,
    pub reserved1: [uint8_t; 12usize],
    pub timestamp: ::libc::c_uint,
    pub counter: ::libc::c_uint,
    pub reserved2: uint32_t,
    pub hostTimestamp: SceULong64,
    pub reserved3: [uint8_t; 8usize],
}
impl ::core::default::Default for SceMotionSensorState {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceFontLibHandle = *mut ::libc::c_void;
pub type SceFontHandle = *mut ::libc::c_void;
pub type Enum_Unnamed56 = u32;
pub const SCE_FONT_ERROR_OUT_OF_MEMORY: Enum_Unnamed56 = 2152071169;
pub const SCE_FONT_ERROR_INVALID_LIBID: Enum_Unnamed56 = 2152071170;
pub const SCE_FONT_ERROR_INVALID_PARAMETER: Enum_Unnamed56 = 2152071171;
pub const SCE_FONT_ERROR_HANDLER_OPEN_FAILED: Enum_Unnamed56 = 2152071173;
pub const SCE_FONT_ERROR_TOO_MANY_OPEN_FONTS: Enum_Unnamed56 = 2152071177;
pub const SCE_FONT_ERROR_INVALID_FONT_DATA: Enum_Unnamed56 = 2152071178;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceSceFontNewLibParams {
    pub userData: *mut ::libc::c_void,
    pub numFonts: ::libc::c_uint,
    pub cacheData: *mut ::libc::c_void,
    pub allocFunc: ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut ::libc::c_void,
                                                               arg2:
                                                                   ::libc::c_uint)
                                              -> *mut ::libc::c_void>,
    pub freeFunc: ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::libc::c_void,
                                                              arg2:
                                                                  *mut ::libc::c_void)>,
    pub openFunc: *mut ::libc::c_void,
    pub closeFunc: *mut ::libc::c_void,
    pub readFunc: *mut ::libc::c_void,
    pub seekFunc: *mut ::libc::c_void,
    pub errorFunc: *mut ::libc::c_void,
    pub ioFinishFunc: *mut ::libc::c_void,
}
impl ::core::default::Default for SceSceFontNewLibParams {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceFontNewLibParams = SceSceFontNewLibParams;
pub type SceFontFamilyCode = u32;
pub const SCE_FONT_FAMILY_DEFAULT: SceFontFamilyCode = 0;
pub const SCE_FONT_FAMILY_SANS_SERIF: SceFontFamilyCode = 1;
pub const SCE_FONT_FAMILY_SERIF: SceFontFamilyCode = 2;
pub const SCE_FONT_FAMILY_ROUNDED: SceFontFamilyCode = 3;
pub type SceFontStyleCode = u32;
pub const SCE_FONT_STYLE_DEFAULT: SceFontStyleCode = 0;
pub const SCE_FONT_STYLE_REGULAR: SceFontStyleCode = 1;
pub const SCE_FONT_STYLE_ITALIC: SceFontStyleCode = 2;
pub const SCE_FONT_STYLE_NARROW: SceFontStyleCode = 3;
pub const SCE_FONT_STYLE_NARROW_ITALIC: SceFontStyleCode = 4;
pub const SCE_FONT_STYLE_BOLD: SceFontStyleCode = 5;
pub const SCE_FONT_STYLE_BOLD_ITALIC: SceFontStyleCode = 6;
pub const SCE_FONT_STYLE_BLACK: SceFontStyleCode = 7;
pub const SCE_FONT_STYLE_BLACK_ITALIC: SceFontStyleCode = 8;
pub const SCE_FONT_STYLE_L: SceFontStyleCode = 101;
pub const SCE_FONT_STYLE_M: SceFontStyleCode = 102;
pub const SCE_FONT_STYLE_DB: SceFontStyleCode = 103;
pub const SCE_FONT_STYLE_B: SceFontStyleCode = 104;
pub const SCE_FONT_STYLE_EB: SceFontStyleCode = 105;
pub const SCE_FONT_STYLE_UB: SceFontStyleCode = 106;
pub type SceFontLanguageCode = u32;
pub const SCE_FONT_LANGUAGE_DEFAULT: SceFontLanguageCode = 0;
pub const SCE_FONT_LANGUAGE_JAPANESE: SceFontLanguageCode = 1;
pub const SCE_FONT_LANGUAGE_LATIN: SceFontLanguageCode = 2;
pub const SCE_FONT_LANGUAGE_KOREAN: SceFontLanguageCode = 3;
pub const SCE_FONT_LANGUAGE_CHINESE: SceFontLanguageCode = 4;
pub const SCE_FONT_LANGUAGE_CJK: SceFontLanguageCode = 5;
pub type SceFontPixelFormatCode = u32;
pub const SCE_FONT_PIXELFORMAT_4: SceFontPixelFormatCode = 0;
pub const SCE_FONT_PIXELFORMAT_4_REV: SceFontPixelFormatCode = 1;
pub const SCE_FONT_PIXELFORMAT_8: SceFontPixelFormatCode = 2;
pub const SCE_FONT_PIXELFORMAT_24: SceFontPixelFormatCode = 3;
pub const SCE_FONT_PIXELFORMAT_32: SceFontPixelFormatCode = 4;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFontImageRect {
    pub width: ::libc::c_ushort,
    pub height: ::libc::c_ushort,
}
impl ::core::default::Default for SceFontImageRect {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFontGlyphImage {
    pub pixelFormat: ::libc::c_uint,
    pub xPos64: ::libc::c_int,
    pub yPos64: ::libc::c_int,
    pub bufWidth: ::libc::c_ushort,
    pub bufHeight: ::libc::c_ushort,
    pub bytesPerLine: ::libc::c_ushort,
    pub pad: ::libc::c_ushort,
    pub bufferPtr: ::libc::c_uint,
}
impl ::core::default::Default for SceFontGlyphImage {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceFontStyle {
    pub fontH: f32,
    pub fontV: f32,
    pub fontHRes: f32,
    pub fontVRes: f32,
    pub fontWeight: f32,
    pub fontFamily: ::libc::c_ushort,
    pub fontStyle: ::libc::c_ushort,
    pub fontStyleSub: ::libc::c_ushort,
    pub fontLanguage: ::libc::c_ushort,
    pub fontRegion: ::libc::c_ushort,
    pub fontCountry: ::libc::c_ushort,
    pub fontName: [::libc::c_char; 64usize],
    pub fontFileName: [::libc::c_char; 64usize],
    pub fontAttributes: ::libc::c_uint,
    pub fontExpire: ::libc::c_uint,
}
impl ::core::clone::Clone for SceFontStyle {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceFontStyle {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFontCharInfo {
    pub bitmapWidth: ::libc::c_uint,
    pub bitmapHeight: ::libc::c_uint,
    pub bitmapLeft: ::libc::c_uint,
    pub bitmapTop: ::libc::c_uint,
    pub sfp26Width: ::libc::c_uint,
    pub sfp26Height: ::libc::c_uint,
    pub sfp26Ascender: ::libc::c_int,
    pub sfp26Descender: ::libc::c_int,
    pub sfp26BearingHX: ::libc::c_int,
    pub sfp26BearingHY: ::libc::c_int,
    pub sfp26BearingVX: ::libc::c_int,
    pub sfp26BearingVY: ::libc::c_int,
    pub sfp26AdvanceH: ::libc::c_int,
    pub sfp26AdvanceV: ::libc::c_int,
    pub shadowFlags: ::libc::c_short,
    pub shadowId: ::libc::c_short,
}
impl ::core::default::Default for SceFontCharInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceFontInfo {
    pub maxGlyphWidthI: ::libc::c_uint,
    pub maxGlyphHeightI: ::libc::c_uint,
    pub maxGlyphAscenderI: ::libc::c_uint,
    pub maxGlyphDescenderI: ::libc::c_uint,
    pub maxGlyphLeftXI: ::libc::c_uint,
    pub maxGlyphBaseYI: ::libc::c_uint,
    pub minGlyphCenterXI: ::libc::c_uint,
    pub maxGlyphTopYI: ::libc::c_uint,
    pub maxGlyphAdvanceXI: ::libc::c_uint,
    pub maxGlyphAdvanceYI: ::libc::c_uint,
    pub maxGlyphWidthF: f32,
    pub maxGlyphHeightF: f32,
    pub maxGlyphAscenderF: f32,
    pub maxGlyphDescenderF: f32,
    pub maxGlyphLeftXF: f32,
    pub maxGlyphBaseYF: f32,
    pub minGlyphCenterXF: f32,
    pub maxGlyphTopYF: f32,
    pub maxGlyphAdvanceXF: f32,
    pub maxGlyphAdvanceYF: f32,
    pub maxGlyphWidth: ::libc::c_short,
    pub maxGlyphHeight: ::libc::c_short,
    pub charMapLength: ::libc::c_uint,
    pub shadowMapLength: ::libc::c_uint,
    pub fontStyle: SceFontStyle,
    pub BPP: uint8_t,
    pub pad: [uint8_t; 3usize],
}
impl ::core::default::Default for SceFontInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PhotoExportParam {
    pub version: ::libc::c_int,
    pub photoTitle: *const SceWChar32,
    pub gameTitle: *const SceWChar32,
    pub gameComment: *const SceWChar32,
    pub reserved: [::libc::c_int; 8usize],
}
impl ::core::default::Default for PhotoExportParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type ScePowerCallback =
    ::core::option::Option<extern "C" fn(unknown: ::libc::c_int,
                                         powerInfo: ::libc::c_int)>;
pub type Enum_Unnamed57 = u32;
pub const SCE_SCREENSHOT_ERROR_INVALID_ARGUMENT: Enum_Unnamed57 = 2148544257;
pub const SCE_SCREENSHOT_ERROR_NO_MEMORY: Enum_Unnamed57 = 2148544258;
pub const SCE_SCREENSHOT_ERROR_FILE_NOT_FOUND: Enum_Unnamed57 = 2148544259;
pub const SCE_SCREENSHOT_ERROR_NOT_SUPPORTED_FORMAT: Enum_Unnamed57 =
    2148544260;
pub const SCE_SCREENSHOT_ERROR_MEDIA_FULL: Enum_Unnamed57 = 2148544261;
pub const SCE_SCREENSHOT_ERROR_INTERNAL: Enum_Unnamed57 = 2148544262;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ScreenshotParam {
    pub photoTitle: *const SceWChar32,
    pub gameTitle: *const SceWChar32,
    pub gameComment: *const SceWChar32,
    pub reserved: *mut ::libc::c_void,
}
impl ::core::default::Default for ScreenshotParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceSqliteMallocMethods {
    pub xMalloc: ::core::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                            -> *mut ::libc::c_void>,
    pub xRealloc: ::core::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::libc::c_void,
                                                              arg2:
                                                                  ::libc::c_int)
                                             -> *mut ::libc::c_void>,
    pub xFree: ::core::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::libc::c_void)>,
}
impl ::core::default::Default for SceSqliteMallocMethods {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed58 = u32;
pub const SCE_SYSMODULE_LOADED: Enum_Unnamed58 = 0;
pub const SCE_SYSMODULE_ERROR_INVALID_VALUE: Enum_Unnamed58 = 2153385984;
pub const SCE_SYSMODULE_ERROR_UNLOADED: Enum_Unnamed58 = 2153385985;
pub const SCE_SYSMODULE_ERROR_FATAL: Enum_Unnamed58 = 2153386239;
pub type Enum_Unnamed59 = u32;
pub const SCE_SYSMODULE_INVALID: Enum_Unnamed59 = 0;
pub const SCE_SYSMODULE_NET: Enum_Unnamed59 = 1;
pub const SCE_SYSMODULE_HTTP: Enum_Unnamed59 = 2;
pub const SCE_SYSMODULE_SSL: Enum_Unnamed59 = 3;
pub const SCE_SYSMODULE_HTTPS: Enum_Unnamed59 = 4;
pub const SCE_SYSMODULE_PERF: Enum_Unnamed59 = 5;
pub const SCE_SYSMODULE_FIBER: Enum_Unnamed59 = 6;
pub const SCE_SYSMODULE_ULT: Enum_Unnamed59 = 7;
pub const SCE_SYSMODULE_DBG: Enum_Unnamed59 = 8;
pub const SCE_SYSMODULE_RAZOR_CAPTURE: Enum_Unnamed59 = 9;
pub const SCE_SYSMODULE_RAZOR_HUD: Enum_Unnamed59 = 10;
pub const SCE_SYSMODULE_NGS: Enum_Unnamed59 = 11;
pub const SCE_SYSMODULE_SULPHA: Enum_Unnamed59 = 12;
pub const SCE_SYSMODULE_SAS: Enum_Unnamed59 = 13;
pub const SCE_SYSMODULE_PGF: Enum_Unnamed59 = 14;
pub const SCE_SYSMODULE_APPUTIL: Enum_Unnamed59 = 15;
pub const SCE_SYSMODULE_FIOS2: Enum_Unnamed59 = 16;
pub const SCE_SYSMODULE_IME: Enum_Unnamed59 = 17;
pub const SCE_SYSMODULE_NP_BASIC: Enum_Unnamed59 = 18;
pub const SCE_SYSMODULE_SYSTEM_GESTURE: Enum_Unnamed59 = 19;
pub const SCE_SYSMODULE_LOCATION: Enum_Unnamed59 = 20;
pub const SCE_SYSMODULE_NP: Enum_Unnamed59 = 21;
pub const SCE_SYSMODULE_PHOTO_EXPORT: Enum_Unnamed59 = 22;
pub const SCE_SYSMODULE_XML: Enum_Unnamed59 = 23;
pub const SCE_SYSMODULE_NP_COMMERCE2: Enum_Unnamed59 = 24;
pub const SCE_SYSMODULE_NP_UTILITY: Enum_Unnamed59 = 25;
pub const SCE_SYSMODULE_VOICE: Enum_Unnamed59 = 26;
pub const SCE_SYSMODULE_VOICEQOS: Enum_Unnamed59 = 27;
pub const SCE_SYSMODULE_NP_MATCHING2: Enum_Unnamed59 = 28;
pub const SCE_SYSMODULE_SCREEN_SHOT: Enum_Unnamed59 = 29;
pub const SCE_SYSMODULE_NP_SCORE_RANKING: Enum_Unnamed59 = 30;
pub const SCE_SYSMODULE_SQLITE: Enum_Unnamed59 = 31;
pub const SCE_SYSMODULE_RUDP: Enum_Unnamed59 = 33;
pub const SCE_SYSMODULE_CODECENGINE_PERF: Enum_Unnamed59 = 34;
pub const SCE_SYSMODULE_LIVEAREA: Enum_Unnamed59 = 35;
pub const SCE_SYSMODULE_NP_ACTIVITY: Enum_Unnamed59 = 36;
pub const SCE_SYSMODULE_NP_TROPHY: Enum_Unnamed59 = 37;
pub const SCE_SYSMODULE_NP_MESSAGE: Enum_Unnamed59 = 38;
pub const SCE_SYSMODULE_SHUTTER_SOUND: Enum_Unnamed59 = 39;
pub const SCE_SYSMODULE_CLIPBOARD: Enum_Unnamed59 = 40;
pub const SCE_SYSMODULE_NP_PARTY: Enum_Unnamed59 = 41;
pub const SCE_SYSMODULE_NET_ADHOC_MATCHING: Enum_Unnamed59 = 42;
pub const SCE_SYSMODULE_NEAR_UTIL: Enum_Unnamed59 = 43;
pub const SCE_SYSMODULE_NP_TUS: Enum_Unnamed59 = 44;
pub const SCE_SYSMODULE_MP4: Enum_Unnamed59 = 45;
pub const SCE_SYSMODULE_HANDWRITING: Enum_Unnamed59 = 47;
pub const SCE_SYSMODULE_ATRAC: Enum_Unnamed59 = 48;
pub const SCE_SYSMODULE_NP_SNS_FACEBOOK: Enum_Unnamed59 = 49;
pub const SCE_SYSMODULE_FACE: Enum_Unnamed59 = 56;
pub const SCE_SYSMODULE_SMART: Enum_Unnamed59 = 57;
pub type Enum_Unnamed60 = u32;
pub const SCE_TOUCH_MAX_REPORT: Enum_Unnamed60 = 8;
pub type Enum_Unnamed61 = u32;
pub const SCE_TOUCH_PORT_FRONT: Enum_Unnamed61 = 0;
pub const SCE_TOUCH_PORT_BACK: Enum_Unnamed61 = 1;
pub const SCE_TOUCH_PORT_MAX_NUM: Enum_Unnamed61 = 2;
pub type Enum_Unnamed62 = u32;
pub const SCE_TOUCH_SAMPLING_STATE_STOP: Enum_Unnamed62 = 0;
pub const SCE_TOUCH_SAMPLING_STATE_START: Enum_Unnamed62 = 1;
pub type Enum_Unnamed63 = u32;
pub const SCE_TOUCH_REPORT_INFO_HIDE_UPPER_LAYER: Enum_Unnamed63 = 1;
pub type Enum_Unnamed64 = u32;
pub const SCE_TOUCH_ERROR_INVALID_ARG: Enum_Unnamed64 = 2150957057;
pub const SCE_TOUCH_ERROR_PRIV_REQUIRED: Enum_Unnamed64 = 2150957058;
pub const SCE_TOUCH_ERROR_FATAL: Enum_Unnamed64 = 2150957311;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceTouchPanelInfo {
    pub minAaX: SceInt16,
    pub minAaY: SceInt16,
    pub maxAaX: SceInt16,
    pub maxAaY: SceInt16,
    pub minDispX: SceInt16,
    pub minDispY: SceInt16,
    pub maxDispX: SceInt16,
    pub maxDispY: SceInt16,
    pub minForce: SceUInt8,
    pub maxForce: SceUInt8,
    pub reserved: [SceUInt8; 30usize],
}
impl ::core::default::Default for SceTouchPanelInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceTouchReport {
    pub id: SceUInt8,
    pub force: SceUInt8,
    pub x: SceInt16,
    pub y: SceInt16,
    pub reserved: [SceUInt8; 8usize],
    pub info: SceUInt16,
}
impl ::core::default::Default for SceTouchReport {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceTouchData {
    pub timeStamp: SceUInt64,
    pub status: SceUInt32,
    pub reportNum: SceUInt32,
    pub report: [SceTouchReport; 8usize],
}
impl ::core::default::Default for SceTouchData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed65 = u32;
pub const SCE_S_IFMT: Enum_Unnamed65 = 61440;
pub const SCE_S_IFLNK: Enum_Unnamed65 = 16384;
pub const SCE_S_IFDIR: Enum_Unnamed65 = 4096;
pub const SCE_S_IFREG: Enum_Unnamed65 = 8192;
pub const SCE_S_ISUID: Enum_Unnamed65 = 2048;
pub const SCE_S_ISGID: Enum_Unnamed65 = 1024;
pub const SCE_S_ISVTX: Enum_Unnamed65 = 512;
pub const SCE_S_IRWXO: Enum_Unnamed65 = 448;
pub const SCE_S_IROTH: Enum_Unnamed65 = 256;
pub const SCE_S_IWOTH: Enum_Unnamed65 = 128;
pub const SCE_S_IXOTH: Enum_Unnamed65 = 64;
pub const SCE_S_IRWXG: Enum_Unnamed65 = 56;
pub const SCE_S_IRGRP: Enum_Unnamed65 = 32;
pub const SCE_S_IWGRP: Enum_Unnamed65 = 16;
pub const SCE_S_IXGRP: Enum_Unnamed65 = 8;
pub const SCE_S_IRWXU: Enum_Unnamed65 = 7;
pub const SCE_S_IRUSR: Enum_Unnamed65 = 4;
pub const SCE_S_IWUSR: Enum_Unnamed65 = 2;
pub const SCE_S_IXUSR: Enum_Unnamed65 = 1;
pub type Enum_Unnamed66 = u32;
pub const SCE_SO_IFMT: Enum_Unnamed66 = 56;
pub const SCE_SO_IFLNK: Enum_Unnamed66 = 8;
pub const SCE_SO_IFDIR: Enum_Unnamed66 = 16;
pub const SCE_SO_IFREG: Enum_Unnamed66 = 32;
pub const SCE_SO_IROTH: Enum_Unnamed66 = 4;
pub const SCE_SO_IWOTH: Enum_Unnamed66 = 2;
pub const SCE_SO_IXOTH: Enum_Unnamed66 = 1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceIoStat {
    pub st_mode: SceMode,
    pub st_attr: ::libc::c_uint,
    pub st_size: SceOff,
    pub st_ctime: SceDateTime,
    pub st_atime: SceDateTime,
    pub st_mtime: SceDateTime,
    pub st_private: [::libc::c_uint; 6usize],
}
impl ::core::default::Default for SceIoStat {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceIoDirent {
    pub d_stat: SceIoStat,
    pub d_name: [::libc::c_char; 256usize],
    pub d_private: *mut ::libc::c_void,
    pub dummy: ::libc::c_int,
}
impl ::core::clone::Clone for SceIoDirent {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceIoDirent {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed67 = u32;
pub const SCE_O_RDONLY: Enum_Unnamed67 = 1;
pub const SCE_O_WRONLY: Enum_Unnamed67 = 2;
pub const SCE_O_RDWR: Enum_Unnamed67 = 3;
pub const SCE_O_NBLOCK: Enum_Unnamed67 = 4;
pub const SCE_O_DIROPEN: Enum_Unnamed67 = 8;
pub const SCE_O_APPEND: Enum_Unnamed67 = 256;
pub const SCE_O_CREAT: Enum_Unnamed67 = 512;
pub const SCE_O_TRUNC: Enum_Unnamed67 = 1024;
pub const SCE_O_EXCL: Enum_Unnamed67 = 2048;
pub const SCE_O_NOWAIT: Enum_Unnamed67 = 32768;
pub type Enum_Unnamed68 = u32;
pub const SCE_SEEK_SET: Enum_Unnamed68 = 0;
pub const SCE_SEEK_CUR: Enum_Unnamed68 = 1;
pub const SCE_SEEK_END: Enum_Unnamed68 = 2;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type Enum_Unnamed69 = u32;
pub const SCE_KERNEL_OK: Enum_Unnamed69 = 0;
pub const SCE_KERNEL_ERROR_ERROR: Enum_Unnamed69 = 2147614721;
pub const SCE_KERNEL_ERROR_NOT_IMPLEMENTED: Enum_Unnamed69 = 2147614722;
pub const SCE_KERNEL_ERROR_NOSYS: Enum_Unnamed69 = 2147614723;
pub const SCE_KERNEL_ERROR_UNSUP: Enum_Unnamed69 = 2147614724;
pub const SCE_KERNEL_ERROR_INVALID_ARGUMENT: Enum_Unnamed69 = 2147614725;
pub const SCE_KERNEL_ERROR_ILLEGAL_ADDR: Enum_Unnamed69 = 2147614726;
pub const SCE_KERNEL_ERROR_ILLEGAL_ALIGNMENT: Enum_Unnamed69 = 2147614727;
pub const SCE_KERNEL_ERROR_ILLEGAL_PERMISSION: Enum_Unnamed69 = 2147614728;
pub const SCE_KERNEL_ERROR_INVALID_ARGUMENT_SIZE: Enum_Unnamed69 = 2147614729;
pub const SCE_KERNEL_ERROR_INVALID_FLAGS: Enum_Unnamed69 = 2147614730;
pub const SCE_KERNEL_ERROR_ILLEGAL_SIZE: Enum_Unnamed69 = 2147614731;
pub const SCE_KERNEL_ERROR_ILLEGAL_TYPE: Enum_Unnamed69 = 2147614732;
pub const SCE_KERNEL_ERROR_ILLEGAL_PATTERN: Enum_Unnamed69 = 2147614733;
pub const SCE_KERNEL_ERROR_ILLEGAL_ATTR: Enum_Unnamed69 = 2147614734;
pub const SCE_KERNEL_ERROR_ILLEGAL_COUNT: Enum_Unnamed69 = 2147614735;
pub const SCE_KERNEL_ERROR_ILLEGAL_MODE: Enum_Unnamed69 = 2147614736;
pub const SCE_KERNEL_ERROR_ILLEGAL_OPEN_LIMIT: Enum_Unnamed69 = 2147614737;
pub const SCE_KERNEL_ERROR_ONLY_DEVELOPMENT_MODE: Enum_Unnamed69 = 2147614738;
pub const SCE_KERNEL_ERROR_DEBUG_ERROR: Enum_Unnamed69 = 2147618816;
pub const SCE_KERNEL_ERROR_ILLEGAL_DIPSW_NUMBER: Enum_Unnamed69 = 2147618817;
pub const SCE_KERNEL_ERROR_PA_ERROR: Enum_Unnamed69 = 2147619072;
pub const SCE_KERNEL_ERROR_PA_NOT_AVAILABLE: Enum_Unnamed69 = 2147619073;
pub const SCE_KERNEL_ERROR_PA_INVALID_KEY: Enum_Unnamed69 = 2147619074;
pub const SCE_KERNEL_ERROR_PA_KEY_IS_NOT_SHARED: Enum_Unnamed69 = 2147619075;
pub const SCE_KERNEL_ERROR_PA_INVALID_SIGNATURE: Enum_Unnamed69 = 2147619076;
pub const SCE_KERNEL_ERROR_CPU_ERROR: Enum_Unnamed69 = 2147622912;
pub const SCE_KERNEL_ERROR_MMU_ILLEGAL_L1_TYPE: Enum_Unnamed69 = 2147622913;
pub const SCE_KERNEL_ERROR_MMU_L2_INDEX_OVERFLOW: Enum_Unnamed69 = 2147622914;
pub const SCE_KERNEL_ERROR_MMU_L2_SIZE_OVERFLOW: Enum_Unnamed69 = 2147622915;
pub const SCE_KERNEL_ERROR_INVALID_CPU_AFFINITY: Enum_Unnamed69 = 2147622916;
pub const SCE_KERNEL_ERROR_INVALID_MEMORY_ACCESS: Enum_Unnamed69 = 2147622917;
pub const SCE_KERNEL_ERROR_INVALID_MEMORY_ACCESS_PERMISSION: Enum_Unnamed69 =
    2147622918;
pub const SCE_KERNEL_ERROR_VA2PA_FAULT: Enum_Unnamed69 = 2147622919;
pub const SCE_KERNEL_ERROR_VA2PA_MAPPED: Enum_Unnamed69 = 2147622920;
pub const SCE_KERNEL_ERROR_VALIDATION_CHECK_FAILED: Enum_Unnamed69 =
    2147622921;
pub const SCE_KERNEL_ERROR_SYSMEM_ERROR: Enum_Unnamed69 = 2147631104;
pub const SCE_KERNEL_ERROR_INVALID_PROCESS_CONTEXT: Enum_Unnamed69 =
    2147631105;
pub const SCE_KERNEL_ERROR_UID_NAME_TOO_LONG: Enum_Unnamed69 = 2147631106;
pub const SCE_KERNEL_ERROR_VARANGE_IS_NOT_PHYSICAL_CONTINUOUS: Enum_Unnamed69
          =
    2147631107;
pub const SCE_KERNEL_ERROR_PHYADDR_ERROR: Enum_Unnamed69 = 2147631360;
pub const SCE_KERNEL_ERROR_NO_PHYADDR: Enum_Unnamed69 = 2147631361;
pub const SCE_KERNEL_ERROR_PHYADDR_USED: Enum_Unnamed69 = 2147631362;
pub const SCE_KERNEL_ERROR_PHYADDR_NOT_USED: Enum_Unnamed69 = 2147631363;
pub const SCE_KERNEL_ERROR_NO_IOADDR: Enum_Unnamed69 = 2147631364;
pub const SCE_KERNEL_ERROR_PHYMEM_ERROR: Enum_Unnamed69 = 2147631872;
pub const SCE_KERNEL_ERROR_ILLEGAL_PHYPAGE_STATUS: Enum_Unnamed69 =
    2147631873;
pub const SCE_KERNEL_ERROR_NO_FREE_PHYSICAL_PAGE: Enum_Unnamed69 = 2147631874;
pub const SCE_KERNEL_ERROR_NO_FREE_PHYSICAL_PAGE_UNIT: Enum_Unnamed69 =
    2147631875;
pub const SCE_KERNEL_ERROR_PHYMEMPART_NOT_EMPTY: Enum_Unnamed69 = 2147631876;
pub const SCE_KERNEL_ERROR_NO_PHYMEMPART_LPDDR2: Enum_Unnamed69 = 2147631877;
pub const SCE_KERNEL_ERROR_NO_PHYMEMPART_CDRAM: Enum_Unnamed69 = 2147631878;
pub const SCE_KERNEL_ERROR_PHYMEMPART_OUT_OF_INDEX: Enum_Unnamed69 =
    2147631879;
pub const SCE_KERNEL_ERROR_CANNOT_GROW_PHYMEMPART: Enum_Unnamed69 =
    2147631880;
pub const SCE_KERNEL_ERROR_NO_FREE_PHYSICAL_PAGE_CDRAM: Enum_Unnamed69 =
    2147631881;
pub const SCE_KERNEL_ERROR_INVALID_SUBBUDGET_ID: Enum_Unnamed69 = 2147631882;
pub const SCE_KERNEL_ERROR_FIXEDHEAP_ERROR: Enum_Unnamed69 = 2147632128;
pub const SCE_KERNEL_ERROR_FIXEDHEAP_ILLEGAL_SIZE: Enum_Unnamed69 =
    2147632129;
pub const SCE_KERNEL_ERROR_FIXEDHEAP_ILLEGAL_INDEX: Enum_Unnamed69 =
    2147632130;
pub const SCE_KERNEL_ERROR_FIXEDHEAP_INDEX_OVERFLOW: Enum_Unnamed69 =
    2147632131;
pub const SCE_KERNEL_ERROR_FIXEDHEAP_NO_CHUNK: Enum_Unnamed69 = 2147632132;
pub const SCE_KERNEL_ERROR_UID_ERROR: Enum_Unnamed69 = 2147632384;
pub const SCE_KERNEL_ERROR_INVALID_UID: Enum_Unnamed69 = 2147632385;
pub const SCE_KERNEL_ERROR_SYSMEM_UID_INVALID_ARGUMENT: Enum_Unnamed69 =
    2147632386;
pub const SCE_KERNEL_ERROR_SYSMEM_INVALID_UID_RANGE: Enum_Unnamed69 =
    2147632387;
pub const SCE_KERNEL_ERROR_SYSMEM_NO_VALID_UID: Enum_Unnamed69 = 2147632388;
pub const SCE_KERNEL_ERROR_SYSMEM_CANNOT_ALLOCATE_UIDENTRY: Enum_Unnamed69 =
    2147632389;
pub const SCE_KERNEL_ERROR_NOT_PROCESS_UID: Enum_Unnamed69 = 2147632390;
pub const SCE_KERNEL_ERROR_NOT_KERNEL_UID: Enum_Unnamed69 = 2147632391;
pub const SCE_KERNEL_ERROR_INVALID_UID_CLASS: Enum_Unnamed69 = 2147632392;
pub const SCE_KERNEL_ERROR_INVALID_UID_SUBCLASS: Enum_Unnamed69 = 2147632393;
pub const SCE_KERNEL_ERROR_UID_CANNOT_FIND_BY_NAME: Enum_Unnamed69 =
    2147632394;
pub const SCE_KERNEL_ERROR_UID_NOT_VISIBLE: Enum_Unnamed69 = 2147632395;
pub const SCE_KERNEL_ERROR_UID_MAX_OPEN: Enum_Unnamed69 = 2147632396;
pub const SCE_KERNEL_ERROR_UID_RL_OVERFLOW: Enum_Unnamed69 = 2147632397;
pub const SCE_KERNEL_ERROR_VIRPAGE_ERROR: Enum_Unnamed69 = 2147632640;
pub const SCE_KERNEL_ERROR_ILLEGAL_VIRPAGE_TYPE: Enum_Unnamed69 = 2147632641;
pub const SCE_KERNEL_ERROR_BLOCK_ERROR: Enum_Unnamed69 = 2147632896;
pub const SCE_KERNEL_ERROR_ILLEGAL_BLOCK_ID: Enum_Unnamed69 = 2147632897;
pub const SCE_KERNEL_ERROR_ILLEGAL_BLOCK_TYPE: Enum_Unnamed69 = 2147632898;
pub const SCE_KERNEL_ERROR_BLOCK_IN_USE: Enum_Unnamed69 = 2147632899;
pub const SCE_KERNEL_ERROR_PARTITION_ERROR: Enum_Unnamed69 = 2147633152;
pub const SCE_KERNEL_ERROR_ILLEGAL_PARTITION_ID: Enum_Unnamed69 = 2147633153;
pub const SCE_KERNEL_ERROR_ILLEGAL_PARTITION_INDEX: Enum_Unnamed69 =
    2147633154;
pub const SCE_KERNEL_ERROR_NO_L2PAGETABLE: Enum_Unnamed69 = 2147633155;
pub const SCE_KERNEL_ERROR_HEAPLIB_ERROR: Enum_Unnamed69 = 2147633408;
pub const SCE_KERNEL_ERROR_ILLEGAL_HEAP_ID: Enum_Unnamed69 = 2147633409;
pub const SCE_KERNEL_ERROR_OUT_OF_RANG: Enum_Unnamed69 = 2147633410;
pub const SCE_KERNEL_ERROR_HEAPLIB_NOMEM: Enum_Unnamed69 = 2147633411;
pub const SCE_KERNEL_ERROR_HEAPLIB_VERIFY_ERROR: Enum_Unnamed69 = 2147633412;
pub const SCE_KERNEL_ERROR_SYSMEM_ADDRESS_SPACE_ERROR: Enum_Unnamed69 =
    2147633664;
pub const SCE_KERNEL_ERROR_INVALID_ADDRESS_SPACE_ID: Enum_Unnamed69 =
    2147633665;
pub const SCE_KERNEL_ERROR_INVALID_PARTITION_INDEX: Enum_Unnamed69 =
    2147633666;
pub const SCE_KERNEL_ERROR_ADDRESS_SPACE_CANNOT_FIND_PARTITION_BY_ADDR:
          Enum_Unnamed69 =
    2147633667;
pub const SCE_KERNEL_ERROR_SYSMEM_MEMBLOCK_ERROR: Enum_Unnamed69 = 2147633920;
pub const SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK_TYPE: Enum_Unnamed69 = 2147633921;
pub const SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK_REMAP_TYPE: Enum_Unnamed69 =
    2147633922;
pub const SCE_KERNEL_ERROR_NOT_PHY_CONT_MEMBLOCK: Enum_Unnamed69 = 2147633923;
pub const SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK_CODE: Enum_Unnamed69 = 2147633924;
pub const SCE_KERNEL_ERROR_ILLEGAL_MEMBLOCK_SIZE: Enum_Unnamed69 = 2147633925;
pub const SCE_KERNEL_ERROR_ILLEGAL_USERMAP_SIZE: Enum_Unnamed69 = 2147633926;
pub const SCE_KERNEL_ERROR_MEMBLOCK_TYPE_FOR_KERNEL_PROCESS: Enum_Unnamed69 =
    2147633927;
pub const SCE_KERNEL_ERROR_PROCESS_CANNOT_REMAP_MEMBLOCK: Enum_Unnamed69 =
    2147633928;
pub const SCE_KERNEL_ERROR_MEMBLOCK_RANGE_ERROR: Enum_Unnamed69 = 2147633929;
pub const SCE_KERNEL_ERROR_MEMBLOCK_TYPE_FOR_UPDATER_OR_SAFEMODE:
          Enum_Unnamed69 =
    2147633930;
pub const SCE_KERNEL_ERROR_MEMBLOCK_OVERFLOW: Enum_Unnamed69 = 2147633931;
pub const SCE_KERNEL_ERROR_SYSMEM_PHYMEMLOW_ERROR: Enum_Unnamed69 =
    2147634176;
pub const SCE_KERNEL_ERROR_CANNOT_ALLOC_PHYMEMLOW: Enum_Unnamed69 =
    2147634177;
pub const SCE_KERNEL_ERROR_UNKNOWN_PHYMEMLOW_TYPE: Enum_Unnamed69 =
    2147634178;
pub const SCE_KERNEL_ERROR_SYSMEM_BITHEAP_ERROR: Enum_Unnamed69 = 2147634432;
pub const SCE_KERNEL_ERROR_CANNOT_ALLOC_BITHEAP: Enum_Unnamed69 = 2147634433;
pub const SCE_KERNEL_ERROR_SYSMEM_NAMEHEAP_ERROR: Enum_Unnamed69 = 2147634688;
pub const SCE_KERNEL_ERROR_NO_SUCH_NAME: Enum_Unnamed69 = 2147634689;
pub const SCE_KERNEL_ERROR_DUPLICATE_NAME: Enum_Unnamed69 = 2147634690;
pub const SCE_KERNEL_ERROR_LOADCORE_ERROR: Enum_Unnamed69 = 2147635200;
pub const SCE_KERNEL_ERROR_ILLEGAL_ELF_HEADER: Enum_Unnamed69 = 2147635201;
pub const SCE_KERNEL_ERROR_ILLEGAL_SELF_HEADER: Enum_Unnamed69 = 2147635202;
pub const SCE_KERNEL_ERROR_EXCPMGR_ERROR: Enum_Unnamed69 = 2147643392;
pub const SCE_KERNEL_ERROR_ILLEGAL_EXCPCODE: Enum_Unnamed69 = 2147643393;
pub const SCE_KERNEL_ERROR_ILLEGAL_EXCPHANDLER: Enum_Unnamed69 = 2147643394;
pub const SCE_KERNEL_ERROR_NOTFOUND_EXCPHANDLER: Enum_Unnamed69 = 2147643395;
pub const SCE_KERNEL_ERROR_CANNOT_RELEASE_EXCPHANDLER: Enum_Unnamed69 =
    2147643396;
pub const SCE_KERNEL_ERROR_INTRMGR_ERROR: Enum_Unnamed69 = 2147643648;
pub const SCE_KERNEL_ERROR_ILLEGAL_CONTEXT: Enum_Unnamed69 = 2147643649;
pub const SCE_KERNEL_ERROR_ILLEGAL_INTRCODE: Enum_Unnamed69 = 2147643650;
pub const SCE_KERNEL_ERROR_ILLEGAL_INTRPARAM: Enum_Unnamed69 = 2147643651;
pub const SCE_KERNEL_ERROR_ILLEGAL_INTRPRIORITY: Enum_Unnamed69 = 2147643652;
pub const SCE_KERNEL_ERROR_ILLEGAL_TARGET_CPU: Enum_Unnamed69 = 2147643653;
pub const SCE_KERNEL_ERROR_ILLEGAL_INTRFILTER: Enum_Unnamed69 = 2147643654;
pub const SCE_KERNEL_ERROR_ILLEGAL_INTRTYPE: Enum_Unnamed69 = 2147643655;
pub const SCE_KERNEL_ERROR_ILLEGAL_HANDLER: Enum_Unnamed69 = 2147643656;
pub const SCE_KERNEL_ERROR_FOUND_HANDLER: Enum_Unnamed69 = 2147643657;
pub const SCE_KERNEL_ERROR_NOTFOUND_HANDLER: Enum_Unnamed69 = 2147643658;
pub const SCE_KERNEL_ERROR_NO_MEMORY: Enum_Unnamed69 = 2147643659;
pub const SCE_KERNEL_ERROR_DMACMGR_ERROR: Enum_Unnamed69 = 2147643904;
pub const SCE_KERNEL_ERROR_ALREADY_QUEUED: Enum_Unnamed69 = 2147643905;
pub const SCE_KERNEL_ERROR_NOT_QUEUED: Enum_Unnamed69 = 2147643906;
pub const SCE_KERNEL_ERROR_NOT_SETUP: Enum_Unnamed69 = 2147643907;
pub const SCE_KERNEL_ERROR_ON_TRANSFERRING: Enum_Unnamed69 = 2147643908;
pub const SCE_KERNEL_ERROR_NOT_INITIALIZED: Enum_Unnamed69 = 2147643909;
pub const SCE_KERNEL_ERROR_TRANSFERRED: Enum_Unnamed69 = 2147643910;
pub const SCE_KERNEL_ERROR_NOT_UNDER_CONTROL: Enum_Unnamed69 = 2147643911;
pub const SCE_KERNEL_ERROR_CANCELING: Enum_Unnamed69 = 2147643912;
pub const SCE_KERNEL_ERROR_SYSTIMER_ERROR: Enum_Unnamed69 = 2147644160;
pub const SCE_KERNEL_ERROR_NO_FREE_TIMER: Enum_Unnamed69 = 2147644161;
pub const SCE_KERNEL_ERROR_TIMER_NOT_ALLOCATED: Enum_Unnamed69 = 2147644162;
pub const SCE_KERNEL_ERROR_TIMER_COUNTING: Enum_Unnamed69 = 2147644163;
pub const SCE_KERNEL_ERROR_TIMER_STOPPED: Enum_Unnamed69 = 2147644164;
pub const SCE_KERNEL_ERROR_THREADMGR_ERROR: Enum_Unnamed69 = 2147647488;
pub const SCE_KERNEL_ERROR_UNKNOWN_UID: Enum_Unnamed69 = 2147647489;
pub const SCE_KERNEL_ERROR_DIFFERENT_UID_CLASS: Enum_Unnamed69 = 2147647490;
pub const SCE_KERNEL_ERROR_ALREADY_REGISTERED: Enum_Unnamed69 = 2147647491;
pub const SCE_KERNEL_ERROR_CAN_NOT_WAIT: Enum_Unnamed69 = 2147647492;
pub const SCE_KERNEL_ERROR_WAIT_TIMEOUT: Enum_Unnamed69 = 2147647493;
pub const SCE_KERNEL_ERROR_WAIT_DELETE: Enum_Unnamed69 = 2147647494;
pub const SCE_KERNEL_ERROR_WAIT_CANCEL: Enum_Unnamed69 = 2147647495;
pub const SCE_KERNEL_ERROR_THREAD_ERROR: Enum_Unnamed69 = 2147647520;
pub const SCE_KERNEL_ERROR_UNKNOWN_THREAD_ID: Enum_Unnamed69 = 2147647521;
pub const SCE_KERNEL_ERROR_ILLEGAL_THREAD_ID: Enum_Unnamed69 = 2147647522;
pub const SCE_KERNEL_ERROR_ILLEGAL_PRIORITY: Enum_Unnamed69 = 2147647523;
pub const SCE_KERNEL_ERROR_ILLEGAL_STACK_SIZE: Enum_Unnamed69 = 2147647524;
pub const SCE_KERNEL_ERROR_ILLEGAL_CPU_AFFINITY_MASK: Enum_Unnamed69 =
    2147647525;
pub const SCE_KERNEL_ERROR_ILLEGAL_THREAD_PARAM_COMBINATION: Enum_Unnamed69 =
    2147647526;
pub const SCE_KERNEL_ERROR_DORMANT: Enum_Unnamed69 = 2147647527;
pub const SCE_KERNEL_ERROR_NOT_DORMANT: Enum_Unnamed69 = 2147647528;
pub const SCE_KERNEL_ERROR_RUNNING: Enum_Unnamed69 = 2147647529;
pub const SCE_KERNEL_ERROR_DELETED: Enum_Unnamed69 = 2147647530;
pub const SCE_KERNEL_ERROR_CAN_NOT_SUSPEND: Enum_Unnamed69 = 2147647531;
pub const SCE_KERNEL_ERROR_THREAD_STOPPED: Enum_Unnamed69 = 2147647532;
pub const SCE_KERNEL_ERROR_THREAD_SUSPENDED: Enum_Unnamed69 = 2147647533;
pub const SCE_KERNEL_ERROR_NOT_SUSPENDED: Enum_Unnamed69 = 2147647534;
pub const SCE_KERNEL_ERROR_ALREADY_DEBUG_SUSPENDED: Enum_Unnamed69 =
    2147647535;
pub const SCE_KERNEL_ERROR_NOT_DEBUG_SUSPENDED: Enum_Unnamed69 = 2147647536;
pub const SCE_KERNEL_ERROR_CAN_NOT_USE_VFP: Enum_Unnamed69 = 2147647537;
pub const SCE_KERNEL_ERROR_THREAD_EVENT_ERROR: Enum_Unnamed69 = 2147647584;
pub const SCE_KERNEL_ERROR_UNKNOWN_THREAD_EVENT_ID: Enum_Unnamed69 =
    2147647585;
pub const SCE_KERNEL_ERROR_KERNEL_TLS_ERROR: Enum_Unnamed69 = 2147647616;
pub const SCE_KERNEL_ERROR_KERNEL_TLS_FULL: Enum_Unnamed69 = 2147647617;
pub const SCE_KERNEL_ERROR_ILLEGAL_KERNEL_TLS_INDEX: Enum_Unnamed69 =
    2147647618;
pub const SCE_KERNEL_ERROR_KERNEL_TLS_BUSY: Enum_Unnamed69 = 2147647619;
pub const SCE_KERNEL_ERROR_CALLBACK_ERROR: Enum_Unnamed69 = 2147647648;
pub const SCE_KERNEL_ERROR_UNKNOWN_CALLBACK_ID: Enum_Unnamed69 = 2147647649;
pub const SCE_KERNEL_ERROR_NOTIFY_CALLBACK: Enum_Unnamed69 = 2147647650;
pub const SCE_KERNEL_ERROR_CALLBACK_NOT_REGISTERED: Enum_Unnamed69 =
    2147647651;
pub const SCE_KERNEL_ERROR_ALARM_ERROR: Enum_Unnamed69 = 2147647680;
pub const SCE_KERNEL_ERROR_UNKNOWN_ALARM_ID: Enum_Unnamed69 = 2147647681;
pub const SCE_KERNEL_ERROR_ALARM_CAN_NOT_CANCEL: Enum_Unnamed69 = 2147647682;
pub const SCE_KERNEL_ERROR_EVF_ERROR: Enum_Unnamed69 = 2147647712;
pub const SCE_KERNEL_ERROR_UNKNOWN_EVF_ID: Enum_Unnamed69 = 2147647713;
pub const SCE_KERNEL_ERROR_EVF_MULTI: Enum_Unnamed69 = 2147647714;
pub const SCE_KERNEL_ERROR_EVF_COND: Enum_Unnamed69 = 2147647715;
pub const SCE_KERNEL_ERROR_SEMA_ERROR: Enum_Unnamed69 = 2147647744;
pub const SCE_KERNEL_ERROR_UNKNOWN_SEMA_ID: Enum_Unnamed69 = 2147647745;
pub const SCE_KERNEL_ERROR_SEMA_ZERO: Enum_Unnamed69 = 2147647746;
pub const SCE_KERNEL_ERROR_SEMA_OVF: Enum_Unnamed69 = 2147647747;
pub const SCE_KERNEL_ERROR_SIGNAL_ERROR: Enum_Unnamed69 = 2147647776;
pub const SCE_KERNEL_ERROR_ALREADY_SENT: Enum_Unnamed69 = 2147647777;
pub const SCE_KERNEL_ERROR_MUTEX_ERROR: Enum_Unnamed69 = 2147647808;
pub const SCE_KERNEL_ERROR_UNKNOWN_MUTEX_ID: Enum_Unnamed69 = 2147647809;
pub const SCE_KERNEL_ERROR_MUTEX_RECURSIVE: Enum_Unnamed69 = 2147647810;
pub const SCE_KERNEL_ERROR_MUTEX_LOCK_OVF: Enum_Unnamed69 = 2147647811;
pub const SCE_KERNEL_ERROR_MUTEX_UNLOCK_UDF: Enum_Unnamed69 = 2147647812;
pub const SCE_KERNEL_ERROR_MUTEX_FAILED_TO_OWN: Enum_Unnamed69 = 2147647813;
pub const SCE_KERNEL_ERROR_MUTEX_NOT_OWNED: Enum_Unnamed69 = 2147647814;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_ERROR: Enum_Unnamed69 = 2147647840;
pub const SCE_KERNEL_ERROR_UNKNOWN_FAST_MUTEX_ID: Enum_Unnamed69 = 2147647841;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_RECURSIVE: Enum_Unnamed69 = 2147647842;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_LOCK_OVF: Enum_Unnamed69 = 2147647843;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_FAILED_TO_OWN: Enum_Unnamed69 =
    2147647844;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_NOT_OWNED: Enum_Unnamed69 = 2147647845;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_OWNED: Enum_Unnamed69 = 2147647846;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_ALREADY_INITIALIZED: Enum_Unnamed69 =
    2147647847;
pub const SCE_KERNEL_ERROR_FAST_MUTEX_NOT_INITIALIZED: Enum_Unnamed69 =
    2147647848;
pub const SCE_KERNEL_ERROR_LW_MUTEX_ERROR: Enum_Unnamed69 = 2147647872;
pub const SCE_KERNEL_ERROR_UNKNOWN_LW_MUTEX_ID: Enum_Unnamed69 = 2147647873;
pub const SCE_KERNEL_ERROR_LW_MUTEX_RECURSIVE: Enum_Unnamed69 = 2147647874;
pub const SCE_KERNEL_ERROR_LW_MUTEX_LOCK_OVF: Enum_Unnamed69 = 2147647875;
pub const SCE_KERNEL_ERROR_LW_MUTEX_UNLOCK_UDF: Enum_Unnamed69 = 2147647876;
pub const SCE_KERNEL_ERROR_LW_MUTEX_FAILED_TO_OWN: Enum_Unnamed69 =
    2147647877;
pub const SCE_KERNEL_ERROR_LW_MUTEX_NOT_OWNED: Enum_Unnamed69 = 2147647878;
pub const SCE_KERNEL_ERROR_COND_ERROR: Enum_Unnamed69 = 2147647904;
pub const SCE_KERNEL_ERROR_UNKNOWN_COND_ID: Enum_Unnamed69 = 2147647905;
pub const SCE_KERNEL_ERROR_WAIT_DELETE_MUTEX: Enum_Unnamed69 = 2147647906;
pub const SCE_KERNEL_ERROR_WAIT_CANCEL_MUTEX: Enum_Unnamed69 = 2147647907;
pub const SCE_KERNEL_ERROR_WAIT_DELETE_COND: Enum_Unnamed69 = 2147647908;
pub const SCE_KERNEL_ERROR_WAIT_CANCEL_COND: Enum_Unnamed69 = 2147647909;
pub const SCE_KERNEL_ERROR_LW_COND_ERROR: Enum_Unnamed69 = 2147647936;
pub const SCE_KERNEL_ERROR_UNKNOWN_LW_COND_ID: Enum_Unnamed69 = 2147647937;
pub const SCE_KERNEL_ERROR_WAIT_DELETE_LW_MUTEX: Enum_Unnamed69 = 2147647938;
pub const SCE_KERNEL_ERROR_WAIT_DELETE_LW_COND: Enum_Unnamed69 = 2147647939;
pub const SCE_KERNEL_ERROR_RW_LOCK_ERROR: Enum_Unnamed69 = 2147647968;
pub const SCE_KERNEL_ERROR_UNKNOWN_RW_LOCK_ID: Enum_Unnamed69 = 2147647969;
pub const SCE_KERNEL_ERROR_RW_LOCK_RECURSIVE: Enum_Unnamed69 = 2147647970;
pub const SCE_KERNEL_ERROR_RW_LOCK_LOCK_OVF: Enum_Unnamed69 = 2147647971;
pub const SCE_KERNEL_ERROR_RW_LOCK_NOT_OWNED: Enum_Unnamed69 = 2147647972;
pub const SCE_KERNEL_ERROR_RW_LOCK_UNLOCK_UDF: Enum_Unnamed69 = 2147647973;
pub const SCE_KERNEL_ERROR_RW_LOCK_FAILED_TO_LOCK: Enum_Unnamed69 =
    2147647974;
pub const SCE_KERNEL_ERROR_RW_LOCK_FAILED_TO_UNLOCK: Enum_Unnamed69 =
    2147647975;
pub const SCE_KERNEL_ERROR_EVENT_ERROR: Enum_Unnamed69 = 2147648000;
pub const SCE_KERNEL_ERROR_UNKNOWN_EVENT_ID: Enum_Unnamed69 = 2147648001;
pub const SCE_KERNEL_ERROR_EVENT_COND: Enum_Unnamed69 = 2147648002;
pub const SCE_KERNEL_ERROR_MSG_PIPE_ERROR: Enum_Unnamed69 = 2147648032;
pub const SCE_KERNEL_ERROR_UNKNOWN_MSG_PIPE_ID: Enum_Unnamed69 = 2147648033;
pub const SCE_KERNEL_ERROR_MSG_PIPE_FULL: Enum_Unnamed69 = 2147648034;
pub const SCE_KERNEL_ERROR_MSG_PIPE_EMPTY: Enum_Unnamed69 = 2147648035;
pub const SCE_KERNEL_ERROR_MSG_PIPE_DELETED: Enum_Unnamed69 = 2147648036;
pub const SCE_KERNEL_ERROR_TIMER_ERROR: Enum_Unnamed69 = 2147648064;
pub const SCE_KERNEL_ERROR_UNKNOWN_TIMER_ID: Enum_Unnamed69 = 2147648065;
pub const SCE_KERNEL_ERROR_EVENT_NOT_SET: Enum_Unnamed69 = 2147648066;
pub const SCE_KERNEL_ERROR_SIMPLE_EVENT_ERROR: Enum_Unnamed69 = 2147648096;
pub const SCE_KERNEL_ERROR_UNKNOWN_SIMPLE_EVENT_ID: Enum_Unnamed69 =
    2147648097;
pub const SCE_KERNEL_ERROR_PMON_ERROR: Enum_Unnamed69 = 2147648128;
pub const SCE_KERNEL_ERROR_PMON_NOT_THREAD_MODE: Enum_Unnamed69 = 2147648129;
pub const SCE_KERNEL_ERROR_PMON_NOT_CPU_MODE: Enum_Unnamed69 = 2147648130;
pub const SCE_KERNEL_ERROR_WORK_QUEUE: Enum_Unnamed69 = 2147648256;
pub const SCE_KERNEL_ERROR_UNKNOWN_WORK_QUEUE_ID: Enum_Unnamed69 = 2147648257;
pub const SCE_KERNEL_ERROR_UNKNOWN_WORK_TASK_ID: Enum_Unnamed69 = 2147648258;
pub const SCE_KERNEL_ERROR_PROCESSMGR_ERROR: Enum_Unnamed69 = 2147651584;
pub const SCE_KERNEL_ERROR_INVALID_PID: Enum_Unnamed69 = 2147651585;
pub const SCE_KERNEL_ERROR_INVALID_PROCESS_TYPE: Enum_Unnamed69 = 2147651586;
pub const SCE_KERNEL_ERROR_PLS_FULL: Enum_Unnamed69 = 2147651587;
pub const SCE_KERNEL_ERROR_INVALID_PROCESS_STATUS: Enum_Unnamed69 =
    2147651588;
pub const SCE_KERNEL_ERROR_PROCESS_CALLBACK_NOTFOUND: Enum_Unnamed69 =
    2147651589;
pub const SCE_KERNEL_ERROR_INVALID_BUDGET_ID: Enum_Unnamed69 = 2147651590;
pub const SCE_KERNEL_ERROR_INVALID_BUDGET_SIZE: Enum_Unnamed69 = 2147651591;
pub const SCE_KERNEL_ERROR_CP14_DISABLED: Enum_Unnamed69 = 2147651592;
pub const SCE_KERNEL_ERROR_EXCEEDED_MAX_PROCESSES: Enum_Unnamed69 =
    2147651593;
pub const SCE_KERNEL_ERROR_PROCESS_REMAINING: Enum_Unnamed69 = 2147651594;
pub const SCE_KERNEL_ERROR_NO_PROCESS_DATA: Enum_Unnamed69 = 2147651595;
pub const SCE_KERNEL_ERROR_PROCESS_EVENT_INHIBITED: Enum_Unnamed69 =
    2147651596;
pub const SCE_KERNEL_ERROR_IOFILEMGR_ERROR: Enum_Unnamed69 = 2147655680;
pub const SCE_KERNEL_ERROR_IO_NAME_TOO_LONG: Enum_Unnamed69 = 2147655681;
pub const SCE_KERNEL_ERROR_IO_REG_DEV: Enum_Unnamed69 = 2147655682;
pub const SCE_KERNEL_ERROR_IO_ALIAS_USED: Enum_Unnamed69 = 2147655683;
pub const SCE_KERNEL_ERROR_IO_DEL_DEV: Enum_Unnamed69 = 2147655684;
pub const SCE_KERNEL_ERROR_IO_WOULD_BLOCK: Enum_Unnamed69 = 2147655685;
pub const SCE_KERNEL_ERROR_MODULEMGR_START_FAILED: Enum_Unnamed69 =
    2147667968;
pub const SCE_KERNEL_ERROR_MODULEMGR_STOP_FAIL: Enum_Unnamed69 = 2147667969;
pub const SCE_KERNEL_ERROR_MODULEMGR_IN_USE: Enum_Unnamed69 = 2147667970;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_LIB: Enum_Unnamed69 = 2147667971;
pub const SCE_KERNEL_ERROR_MODULEMGR_SYSCALL_REG: Enum_Unnamed69 = 2147667972;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOMEM_LIB: Enum_Unnamed69 = 2147667973;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOMEM_STUB: Enum_Unnamed69 = 2147667974;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOMEM_SELF: Enum_Unnamed69 = 2147667975;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOMEM: Enum_Unnamed69 = 2147667976;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_LIB: Enum_Unnamed69 = 2147667977;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_STUB: Enum_Unnamed69 =
    2147667978;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_FUNC_NID: Enum_Unnamed69 = 2147667979;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_VAR_NID: Enum_Unnamed69 = 2147667980;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_TYPE: Enum_Unnamed69 =
    2147667981;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_MOD_ENTRY: Enum_Unnamed69 =
    2147667982;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_PROC_PARAM: Enum_Unnamed69 =
    2147667983;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_MODOBJ: Enum_Unnamed69 = 2147667984;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_MOD: Enum_Unnamed69 = 2147667985;
pub const SCE_KERNEL_ERROR_MODULEMGR_NO_PROCESS: Enum_Unnamed69 = 2147667986;
pub const SCE_KERNEL_ERROR_MODULEMGR_OLD_LIB: Enum_Unnamed69 = 2147667987;
pub const SCE_KERNEL_ERROR_MODULEMGR_STARTED: Enum_Unnamed69 = 2147667988;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOT_STARTED: Enum_Unnamed69 = 2147667989;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOT_STOPPED: Enum_Unnamed69 = 2147667990;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_PROCESS_UID: Enum_Unnamed69 =
    2147667991;
pub const SCE_KERNEL_ERROR_MODULEMGR_CANNOT_EXPORT_LIB_TO_SHARED:
          Enum_Unnamed69 =
    2147667992;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_REL_INFO: Enum_Unnamed69 =
    2147667993;
pub const SCE_KERNEL_ERROR_MODULEMGR_INVALID_REF_INFO: Enum_Unnamed69 =
    2147667994;
pub const SCE_KERNEL_ERROR_MODULEMGR_ELINK: Enum_Unnamed69 = 2147667995;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOENT: Enum_Unnamed69 = 2147667996;
pub const SCE_KERNEL_ERROR_MODULEMGR_BUSY: Enum_Unnamed69 = 2147667997;
pub const SCE_KERNEL_ERROR_MODULEMGR_NOEXEC: Enum_Unnamed69 = 2147667998;
pub const SCE_KERNEL_ERROR_MODULEMGR_NAMETOOLONG: Enum_Unnamed69 = 2147667999;
pub const SCE_KERNEL_ERROR_LIBRARYDB_NOENT: Enum_Unnamed69 = 2147668096;
pub const SCE_KERNEL_ERROR_LIBRARYDB_NO_LIB: Enum_Unnamed69 = 2147668097;
pub const SCE_KERNEL_ERROR_LIBRARYDB_NO_MOD: Enum_Unnamed69 = 2147668098;
pub const SCE_KERNEL_ERROR_PRELOAD_FAILED: Enum_Unnamed69 = 2147668208;
pub const SCE_KERNEL_ERROR_PRELOAD_LIBC_FAILED: Enum_Unnamed69 = 2147668209;
pub const SCE_KERNEL_ERROR_PRELOAD_FIOS2_FAILED: Enum_Unnamed69 = 2147668210;
pub const SCE_KERNEL_ERROR_AUTHFAIL: Enum_Unnamed69 = 2147676160;
pub const SCE_KERNEL_ERROR_NO_AUTH: Enum_Unnamed69 = 2147676161;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceLibraryEntryTable {
    pub size: uint16_t,
    pub ver: uint16_t,
    pub attr: uint16_t,
    pub funcNum: uint16_t,
    pub varNum: uint32_t,
    pub unkNum: uint32_t,
    pub nid: uint32_t,
    pub name: *const ::libc::c_char,
    pub nids: *const uint32_t,
    pub ents: *mut *const ::libc::c_void,
}
impl ::core::default::Default for SceLibraryEntryTable {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelSegmentInfo {
    pub size: SceUInt,
    pub perms: SceUInt,
    pub vaddr: *mut ::libc::c_void,
    pub memsz: SceUInt,
    pub flags: SceUInt,
    pub res: SceUInt,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceKernelSegmentInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceKernelModuleInfo {
    pub size: SceUInt,
    pub handle: SceUInt,
    pub flags: SceUInt,
    pub module_name: [::libc::c_char; 28usize],
    pub unk28: SceUInt,
    pub module_start: *mut ::libc::c_void,
    pub unk30: SceUInt,
    pub module_stop: *mut ::libc::c_void,
    pub exidxTop: *mut ::libc::c_void,
    pub exidxBtm: *mut ::libc::c_void,
    pub unk40: SceUInt,
    pub unk44: SceUInt,
    pub tlsInit: *mut ::libc::c_void,
    pub tlsInitSize: SceSize,
    pub tlsAreaSize: SceSize,
    pub path: [::libc::c_char; 256usize],
    pub segments: [SceKernelSegmentInfo; 4usize],
    pub type_: SceUInt,
}
impl ::core::clone::Clone for SceKernelModuleInfo {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceKernelModuleInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelLMOption {
    pub size: SceSize,
}
impl ::core::default::Default for SceKernelLMOption {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelULMOption {
    pub size: SceSize,
}
impl ::core::default::Default for SceKernelULMOption {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelOpenPsId {
    pub id: [::libc::c_char; 16usize],
}
impl ::core::default::Default for SceKernelOpenPsId {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceKernelSysClock = SceUInt64;
pub type SceKernelThreadEntry =
    ::core::option::Option<unsafe extern "C" fn(args: SceSize,
                                                argp: *mut ::libc::c_void)
                               -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelThreadOptParam {
    pub size: SceSize,
    pub attr: SceUInt32,
}
impl ::core::default::Default for SceKernelThreadOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelThreadInfo {
    pub size: SceSize,
    pub processId: SceUID,
    pub name: [::libc::c_char; 32usize],
    pub attr: SceUInt,
    pub status: ::libc::c_int,
    pub entry: SceKernelThreadEntry,
    pub stack: *mut ::libc::c_void,
    pub stackSize: ::libc::c_int,
    pub initPriority: ::libc::c_int,
    pub currentPriority: ::libc::c_int,
    pub initCpuAffinityMask: ::libc::c_int,
    pub currentCpuAffinityMask: ::libc::c_int,
    pub currentCpuId: ::libc::c_int,
    pub lastExecutedCpuId: ::libc::c_int,
    pub waitType: ::libc::c_int,
    pub waitId: SceUID,
    pub exitStatus: ::libc::c_int,
    pub runClocks: SceKernelSysClock,
    pub intrPreemptCount: SceUInt,
    pub threadPreemptCount: SceUInt,
    pub threadReleaseCount: SceUInt,
    pub fNotifyCallback: SceUID,
    pub reserved: ::libc::c_int,
}
impl ::core::default::Default for SceKernelThreadInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelThreadRunStatus {
    pub size: SceSize,
    pub cpuInfo: [Struct_Unnamed70; 4usize],
}
impl ::core::default::Default for SceKernelThreadRunStatus {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed70 {
    pub processId: SceUID,
    pub threadId: SceUID,
    pub priority: ::libc::c_int,
}
impl ::core::default::Default for Struct_Unnamed70 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceThreadStatus = u32;
pub const SCE_THREAD_RUNNING: SceThreadStatus = 1;
pub const SCE_THREAD_READY: SceThreadStatus = 2;
pub const SCE_THREAD_WAITING: SceThreadStatus = 4;
pub const SCE_THREAD_SUSPEND: SceThreadStatus = 8;
pub const SCE_THREAD_STOPPED: SceThreadStatus = 16;
pub const SCE_THREAD_KILLED: SceThreadStatus = 32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelSemaOptParam {
    pub size: SceSize,
}
impl ::core::default::Default for SceKernelSemaOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelSemaInfo {
    pub size: SceSize,
    pub semaId: SceUID,
    pub name: [::libc::c_char; 32usize],
    pub attr: SceUInt,
    pub initCount: ::libc::c_int,
    pub currentCount: ::libc::c_int,
    pub maxCount: ::libc::c_int,
    pub numWaitThreads: ::libc::c_int,
}
impl ::core::default::Default for SceKernelSemaInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelMutexOptParam {
    pub size: SceSize,
    pub ceilingPriority: ::libc::c_int,
}
impl ::core::default::Default for SceKernelMutexOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelMutexInfo {
    pub size: SceSize,
    pub mutexId: SceUID,
    pub name: [::libc::c_char; 32usize],
    pub attr: SceUInt,
    pub initCount: ::libc::c_int,
    pub currentCount: ::libc::c_int,
    pub currentOwnerId: SceUID,
    pub numWaitThreads: ::libc::c_int,
}
impl ::core::default::Default for SceKernelMutexInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelEventFlagInfo {
    pub size: SceSize,
    pub evfId: SceUID,
    pub name: [::libc::c_char; 32usize],
    pub attr: SceUInt,
    pub initPattern: SceUInt,
    pub currentPattern: SceUInt,
    pub numWaitThreads: ::libc::c_int,
}
impl ::core::default::Default for SceKernelEventFlagInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelEventFlagOptParam {
    pub size: SceSize,
}
impl ::core::default::Default for SceKernelEventFlagOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceEventFlagAttributes = u32;
pub const SCE_EVENT_WAITMULTIPLE: SceEventFlagAttributes = 512;
pub type SceEventFlagWaitTypes = u32;
pub const SCE_EVENT_WAITAND: SceEventFlagWaitTypes = 0;
pub const SCE_EVENT_WAITOR: SceEventFlagWaitTypes = 1;
pub const SCE_EVENT_WAITCLEAR: SceEventFlagWaitTypes = 2;
pub const SCE_EVENT_WAITCLEAR_PAT: SceEventFlagWaitTypes = 4;
pub type SceKernelCallbackFunction =
    ::core::option::Option<unsafe extern "C" fn(notifyId: ::libc::c_int,
                                                notifyCount: ::libc::c_int,
                                                notifyArg: ::libc::c_int,
                                                common: *mut ::libc::c_void)
                               -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelCallbackInfo {
    pub size: SceSize,
    pub callbackId: SceUID,
    pub name: [::libc::c_char; 32usize],
    pub threadId: SceUID,
    pub callback: SceKernelCallbackFunction,
    pub common: *mut ::libc::c_void,
    pub notifyCount: ::libc::c_int,
    pub notifyArg: ::libc::c_int,
}
impl ::core::default::Default for SceKernelCallbackInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelMppInfo {
    pub size: SceSize,
    pub mppId: SceUID,
    pub name: [::libc::c_char; 32usize],
    pub attr: SceUInt,
    pub bufSize: ::libc::c_int,
    pub freeSize: ::libc::c_int,
    pub numSendWaitThreads: ::libc::c_int,
    pub numReceiveWaitThreads: ::libc::c_int,
}
impl ::core::default::Default for SceKernelMppInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelSystemInfo {
    pub size: SceSize,
    pub activeCpuMask: SceUInt32,
    pub cpuInfo: [Struct_Unnamed71; 4usize],
}
impl ::core::default::Default for SceKernelSystemInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Struct_Unnamed71 {
    pub idleClock: SceKernelSysClock,
    pub comesOutOfIdleCount: SceUInt32,
    pub threadSwitchCount: SceUInt32,
}
impl ::core::default::Default for Struct_Unnamed71 {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceKernelIdListType = u32;
pub const SCE_KERNEL_TMID_Thread: SceKernelIdListType = 1;
pub const SCE_KERNEL_TMID_Semaphore: SceKernelIdListType = 2;
pub const SCE_KERNEL_TMID_EventFlag: SceKernelIdListType = 3;
pub const SCE_KERNEL_TMID_Mbox: SceKernelIdListType = 4;
pub const SCE_KERNEL_TMID_Vpl: SceKernelIdListType = 5;
pub const SCE_KERNEL_TMID_Fpl: SceKernelIdListType = 6;
pub const SCE_KERNEL_TMID_Mpipe: SceKernelIdListType = 7;
pub const SCE_KERNEL_TMID_Callback: SceKernelIdListType = 8;
pub const SCE_KERNEL_TMID_ThreadEventHandler: SceKernelIdListType = 9;
pub const SCE_KERNEL_TMID_Alarm: SceKernelIdListType = 10;
pub const SCE_KERNEL_TMID_VTimer: SceKernelIdListType = 11;
pub const SCE_KERNEL_TMID_SleepThread: SceKernelIdListType = 64;
pub const SCE_KERNEL_TMID_DelayThread: SceKernelIdListType = 65;
pub const SCE_KERNEL_TMID_SuspendThread: SceKernelIdListType = 66;
pub const SCE_KERNEL_TMID_DormantThread: SceKernelIdListType = 67;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelLwMutexWork {
    pub data: [SceInt64; 4usize],
}
impl ::core::default::Default for SceKernelLwMutexWork {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelLwMutexOptParam {
    pub size: SceSize,
}
impl ::core::default::Default for SceKernelLwMutexOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelLwCondWork {
    pub data: [SceInt64; 4usize],
}
impl ::core::default::Default for SceKernelLwCondWork {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelLwCondOptParam {
    pub size: SceSize,
}
impl ::core::default::Default for SceKernelLwCondOptParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed72 = u32;
pub const SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_HIGH: Enum_Unnamed72 = 32;
pub const SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_DEFAULT: Enum_Unnamed72 = 96;
pub const SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_LOW: Enum_Unnamed72 = 159;
pub type Enum_Unnamed73 = u32;
pub const SCE_KERNEL_PROCESS_PRIORITY_USER_HIGH: Enum_Unnamed73 = 64;
pub const SCE_KERNEL_PROCESS_PRIORITY_USER_DEFAULT: Enum_Unnamed73 = 96;
pub const SCE_KERNEL_PROCESS_PRIORITY_USER_LOW: Enum_Unnamed73 = 127;
pub type Enum_Unnamed74 = u32;
pub const SCE_KERNEL_POWER_TICK_DEFAULT: Enum_Unnamed74 = 0;
pub const SCE_KERNEL_POWER_TICK_DISABLE_AUTO_SUSPEND: Enum_Unnamed74 = 1;
pub const SCE_KERNEL_POWER_TICK_DISABLE_OLED_OFF: Enum_Unnamed74 = 4;
pub const SCE_KERNEL_POWER_TICK_DISABLE_OLED_DIMMING: Enum_Unnamed74 = 6;
pub type SceKernelMemBlockType = ::libc::c_int;
pub type Enum_Unnamed75 = u32;
pub const SCE_KERNEL_MEMBLOCK_TYPE_USER_RW: Enum_Unnamed75 = 203477088;
pub const SCE_KERNEL_MEMBLOCK_TYPE_USER_RW_UNCACHE: Enum_Unnamed75 =
    203456608;
pub const SCE_KERNEL_MEMBLOCK_TYPE_USER_MAIN_PHYCONT_RW: Enum_Unnamed75 =
    209768544;
pub const SCE_KERNEL_MEMBLOCK_TYPE_USER_MAIN_PHYCONT_NC_RW: Enum_Unnamed75 =
    226525280;
pub const SCE_KERNEL_MEMBLOCK_TYPE_USER_CDRAM_RW: Enum_Unnamed75 = 155222112;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelAllocMemBlockOpt {
    pub size: SceSize,
    pub attr: SceUInt32,
    pub alignment: SceSize,
    pub uidBaseBlock: SceUInt32,
    pub strBaseBlockName: *const ::libc::c_char,
    pub flags: ::libc::c_int,
    pub reserved: [::libc::c_int; 10usize],
}
impl ::core::default::Default for SceKernelAllocMemBlockOpt {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceKernelMemBlockInfo {
    pub size: SceSize,
    pub mappedBase: *mut ::libc::c_void,
    pub mappedSize: SceSize,
    pub memoryType: ::libc::c_int,
    pub access: SceUInt32,
    pub type_: SceKernelMemBlockType,
}
impl ::core::default::Default for SceKernelMemBlockInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceHttpMemoryPoolStats {
    pub poolSize: ::libc::c_uint,
    pub maxInuseSize: ::libc::c_uint,
    pub currentInuseSize: ::libc::c_uint,
    pub reserved: ::libc::c_int,
}
impl ::core::default::Default for SceHttpMemoryPoolStats {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceHttpMethods = u32;
pub const SCE_HTTP_METHOD_GET: SceHttpMethods = 0;
pub const SCE_HTTP_METHOD_POST: SceHttpMethods = 1;
pub const SCE_HTTP_METHOD_HEAD: SceHttpMethods = 2;
pub const SCE_HTTP_METHOD_OPTIONS: SceHttpMethods = 3;
pub const SCE_HTTP_METHOD_PUT: SceHttpMethods = 4;
pub const SCE_HTTP_METHOD_DELETE: SceHttpMethods = 5;
pub const SCE_HTTP_METHOD_TRACE: SceHttpMethods = 6;
pub const SCE_HTTP_METHOD_CONNECT: SceHttpMethods = 7;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceHttpUriElement {
    pub opaque: ::libc::c_int,
    pub scheme: *mut ::libc::c_char,
    pub username: *mut ::libc::c_char,
    pub password: *mut ::libc::c_char,
    pub hostname: *mut ::libc::c_char,
    pub path: *mut ::libc::c_char,
    pub query: *mut ::libc::c_char,
    pub fragment: *mut ::libc::c_char,
    pub port: ::libc::c_ushort,
    pub reserved: [::libc::c_uchar; 10usize],
}
impl ::core::default::Default for SceHttpUriElement {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceHttpHttpVersion = u32;
pub const SCE_HTTP_VERSION_1_0: SceHttpHttpVersion = 1;
pub const SCE_HTTP_VERSION_1_1: SceHttpHttpVersion = 2;
pub type SceHttpProxyMode = u32;
pub const SCE_HTTP_PROXY_AUTO: SceHttpProxyMode = 0;
pub const SCE_HTTP_PROXY_MANUAL: SceHttpProxyMode = 1;
pub type SceHttpAddHeaderMode = u32;
pub const SCE_HTTP_HEADER_OVERWRITE: SceHttpAddHeaderMode = 0;
pub const SCE_HTTP_HEADER_ADD: SceHttpAddHeaderMode = 1;
pub type SceHttpAuthType = u32;
pub const SCE_HTTP_AUTH_BASIC: SceHttpAuthType = 0;
pub const SCE_HTTP_AUTH_DIGEST: SceHttpAuthType = 1;
pub const SCE_HTTP_AUTH_RESERVED0: SceHttpAuthType = 2;
pub const SCE_HTTP_AUTH_RESERVED1: SceHttpAuthType = 3;
pub const SCE_HTTP_AUTH_RESERVED2: SceHttpAuthType = 4;
pub type SceHttpSslVersion = u32;
pub const SCE_HTTPS_SSLV23: SceHttpSslVersion = 0;
pub const SCE_HTTPS_SSLV2: SceHttpSslVersion = 1;
pub const SCE_HTTPS_SSLV3: SceHttpSslVersion = 2;
pub const SCE_HTTPS_TLSV1: SceHttpSslVersion = 3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceHttpsData {
    pub ptr: *mut ::libc::c_char,
    pub size: ::libc::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceHttpsData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceHttpsCaList {
    pub caCerts: *mut *mut ::libc::c_void,
    pub caNum: ::libc::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceHttpsCaList {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type SceHttpAuthInfoCallback =
    ::core::option::Option<unsafe extern "C" fn(request: ::libc::c_int,
                                                authType: SceHttpAuthType,
                                                realm: *const ::libc::c_char,
                                                username: *mut ::libc::c_char,
                                                password: *mut ::libc::c_char,
                                                needEntity: ::libc::c_int,
                                                entityBody:
                                                    *mut *mut ::libc::c_uchar,
                                                entitySize:
                                                    *mut ::libc::c_uint,
                                                save: *mut ::libc::c_int,
                                                userArg: *mut ::libc::c_void)
                               -> ::libc::c_int>;
pub type SceHttpRedirectCallback =
    ::core::option::Option<unsafe extern "C" fn(request: ::libc::c_int,
                                                statusCode: ::libc::c_int,
                                                method: *mut ::libc::c_int,
                                                location:
                                                    *const ::libc::c_char,
                                                userArg: *mut ::libc::c_void)
                               -> ::libc::c_int>;
pub type SceHttpsCallback =
    ::core::option::Option<unsafe extern "C" fn(verifyEsrr: ::libc::c_uint,
                                                sslCert:
                                                    *mut *mut ::libc::c_void,
                                                certNum: ::libc::c_int,
                                                userArg: *mut ::libc::c_void)
                               -> ::libc::c_int>;
pub type SceHttpCookieRecvCallback =
    ::core::option::Option<unsafe extern "C" fn(request: ::libc::c_int,
                                                url: *const ::libc::c_char,
                                                cookieHeader:
                                                    *const ::libc::c_char,
                                                headerLen: ::libc::c_uint,
                                                userArg: *mut ::libc::c_void)
                               -> ::libc::c_int>;
pub type SceHttpCookieSendCallback =
    ::core::option::Option<unsafe extern "C" fn(request: ::libc::c_int,
                                                url: *const ::libc::c_char,
                                                cookieHeader:
                                                    *const ::libc::c_char,
                                                userArg: *mut ::libc::c_void)
                               -> ::libc::c_int>;
pub type Enum_Unnamed76 = u32;
pub const SCE_NET_ERROR_EPERM: Enum_Unnamed76 = 2151743745;
pub const SCE_NET_ERROR_ENOENT: Enum_Unnamed76 = 2151743746;
pub const SCE_NET_ERROR_ESRCH: Enum_Unnamed76 = 2151743747;
pub const SCE_NET_ERROR_EINTR: Enum_Unnamed76 = 2151743748;
pub const SCE_NET_ERROR_EIO: Enum_Unnamed76 = 2151743749;
pub const SCE_NET_ERROR_ENXIO: Enum_Unnamed76 = 2151743750;
pub const SCE_NET_ERROR_E2BIG: Enum_Unnamed76 = 2151743751;
pub const SCE_NET_ERROR_ENOEXEC: Enum_Unnamed76 = 2151743752;
pub const SCE_NET_ERROR_EBADF: Enum_Unnamed76 = 2151743753;
pub const SCE_NET_ERROR_ECHILD: Enum_Unnamed76 = 2151743754;
pub const SCE_NET_ERROR_EDEADLK: Enum_Unnamed76 = 2151743755;
pub const SCE_NET_ERROR_ENOMEM: Enum_Unnamed76 = 2151743756;
pub const SCE_NET_ERROR_EACCES: Enum_Unnamed76 = 2151743757;
pub const SCE_NET_ERROR_EFAULT: Enum_Unnamed76 = 2151743758;
pub const SCE_NET_ERROR_ENOTBLK: Enum_Unnamed76 = 2151743759;
pub const SCE_NET_ERROR_EBUSY: Enum_Unnamed76 = 2151743760;
pub const SCE_NET_ERROR_EEXIST: Enum_Unnamed76 = 2151743761;
pub const SCE_NET_ERROR_EXDEV: Enum_Unnamed76 = 2151743762;
pub const SCE_NET_ERROR_ENODEV: Enum_Unnamed76 = 2151743763;
pub const SCE_NET_ERROR_ENOTDIR: Enum_Unnamed76 = 2151743764;
pub const SCE_NET_ERROR_EISDIR: Enum_Unnamed76 = 2151743765;
pub const SCE_NET_ERROR_EINVAL: Enum_Unnamed76 = 2151743766;
pub const SCE_NET_ERROR_ENFILE: Enum_Unnamed76 = 2151743767;
pub const SCE_NET_ERROR_EMFILE: Enum_Unnamed76 = 2151743768;
pub const SCE_NET_ERROR_ENOTTY: Enum_Unnamed76 = 2151743769;
pub const SCE_NET_ERROR_ETXTBSY: Enum_Unnamed76 = 2151743770;
pub const SCE_NET_ERROR_EFBIG: Enum_Unnamed76 = 2151743771;
pub const SCE_NET_ERROR_ENOSPC: Enum_Unnamed76 = 2151743772;
pub const SCE_NET_ERROR_ESPIPE: Enum_Unnamed76 = 2151743773;
pub const SCE_NET_ERROR_EROFS: Enum_Unnamed76 = 2151743774;
pub const SCE_NET_ERROR_EMLINK: Enum_Unnamed76 = 2151743775;
pub const SCE_NET_ERROR_EPIPE: Enum_Unnamed76 = 2151743776;
pub const SCE_NET_ERROR_EDOM: Enum_Unnamed76 = 2151743777;
pub const SCE_NET_ERROR_ERANGE: Enum_Unnamed76 = 2151743778;
pub const SCE_NET_ERROR_EAGAIN: Enum_Unnamed76 = 2151743779;
pub const SCE_NET_ERROR_EWOULDBLOCK: Enum_Unnamed76 = 2151743779;
pub const SCE_NET_ERROR_EINPROGRESS: Enum_Unnamed76 = 2151743780;
pub const SCE_NET_ERROR_EALREADY: Enum_Unnamed76 = 2151743781;
pub const SCE_NET_ERROR_ENOTSOCK: Enum_Unnamed76 = 2151743782;
pub const SCE_NET_ERROR_EDESTADDRREQ: Enum_Unnamed76 = 2151743783;
pub const SCE_NET_ERROR_EMSGSIZE: Enum_Unnamed76 = 2151743784;
pub const SCE_NET_ERROR_EPROTOTYPE: Enum_Unnamed76 = 2151743785;
pub const SCE_NET_ERROR_ENOPROTOOPT: Enum_Unnamed76 = 2151743786;
pub const SCE_NET_ERROR_EPROTONOSUPPORT: Enum_Unnamed76 = 2151743787;
pub const SCE_NET_ERROR_ESOCKTNOSUPPOR: Enum_Unnamed76 = 2151743788;
pub const SCE_NET_ERROR_EOPNOTSUPP: Enum_Unnamed76 = 2151743789;
pub const SCE_NET_ERROR_EPFNOSUPPORT: Enum_Unnamed76 = 2151743790;
pub const SCE_NET_ERROR_EAFNOSUPPORT: Enum_Unnamed76 = 2151743791;
pub const SCE_NET_ERROR_EADDRINUSE: Enum_Unnamed76 = 2151743792;
pub const SCE_NET_ERROR_EADDRNOTAVAIL: Enum_Unnamed76 = 2151743793;
pub const SCE_NET_ERROR_ENETDOWN: Enum_Unnamed76 = 2151743794;
pub const SCE_NET_ERROR_ENETUNREACH: Enum_Unnamed76 = 2151743795;
pub const SCE_NET_ERROR_ENETRESET: Enum_Unnamed76 = 2151743796;
pub const SCE_NET_ERROR_ECONNABORTED: Enum_Unnamed76 = 2151743797;
pub const SCE_NET_ERROR_ECONNRESET: Enum_Unnamed76 = 2151743798;
pub const SCE_NET_ERROR_ENOBUFS: Enum_Unnamed76 = 2151743799;
pub const SCE_NET_ERROR_EISCONN: Enum_Unnamed76 = 2151743800;
pub const SCE_NET_ERROR_ENOTCONN: Enum_Unnamed76 = 2151743801;
pub const SCE_NET_ERROR_ESHUTDOWN: Enum_Unnamed76 = 2151743802;
pub const SCE_NET_ERROR_ETOOMANYREFS: Enum_Unnamed76 = 2151743803;
pub const SCE_NET_ERROR_ETIMEDOUT: Enum_Unnamed76 = 2151743804;
pub const SCE_NET_ERROR_ECONNREFUSED: Enum_Unnamed76 = 2151743805;
pub const SCE_NET_ERROR_ELOOP: Enum_Unnamed76 = 2151743806;
pub const SCE_NET_ERROR_ENAMETOOLONG: Enum_Unnamed76 = 2151743807;
pub const SCE_NET_ERROR_EHOSTDOWN: Enum_Unnamed76 = 2151743808;
pub const SCE_NET_ERROR_EHOSTUNREACH: Enum_Unnamed76 = 2151743809;
pub const SCE_NET_ERROR_ENOTEMPTY: Enum_Unnamed76 = 2151743810;
pub const SCE_NET_ERROR_EPROCLIM: Enum_Unnamed76 = 2151743811;
pub const SCE_NET_ERROR_EUSERS: Enum_Unnamed76 = 2151743812;
pub const SCE_NET_ERROR_EDQUOT: Enum_Unnamed76 = 2151743813;
pub const SCE_NET_ERROR_ESTALE: Enum_Unnamed76 = 2151743814;
pub const SCE_NET_ERROR_EREMOTE: Enum_Unnamed76 = 2151743815;
pub const SCE_NET_ERROR_EBADRPC: Enum_Unnamed76 = 2151743816;
pub const SCE_NET_ERROR_ERPCMISMATCH: Enum_Unnamed76 = 2151743817;
pub const SCE_NET_ERROR_EPROGUNAVAIL: Enum_Unnamed76 = 2151743818;
pub const SCE_NET_ERROR_EPROGMISMATCH: Enum_Unnamed76 = 2151743819;
pub const SCE_NET_ERROR_EPROCUNAVAIL: Enum_Unnamed76 = 2151743820;
pub const SCE_NET_ERROR_ENOLCK: Enum_Unnamed76 = 2151743821;
pub const SCE_NET_ERROR_ENOSYS: Enum_Unnamed76 = 2151743822;
pub const SCE_NET_ERROR_EFTYPE: Enum_Unnamed76 = 2151743823;
pub const SCE_NET_ERROR_EAUTH: Enum_Unnamed76 = 2151743824;
pub const SCE_NET_ERROR_ENEEDAUTH: Enum_Unnamed76 = 2151743825;
pub const SCE_NET_ERROR_EIDRM: Enum_Unnamed76 = 2151743826;
pub const SCE_NET_ERROR_ENOMS: Enum_Unnamed76 = 2151743827;
pub const SCE_NET_ERROR_EOVERFLOW: Enum_Unnamed76 = 2151743828;
pub const SCE_NET_ERROR_EILSEQ: Enum_Unnamed76 = 2151743829;
pub const SCE_NET_ERROR_ENOTSUP: Enum_Unnamed76 = 2151743830;
pub const SCE_NET_ERROR_ECANCELED: Enum_Unnamed76 = 2151743831;
pub const SCE_NET_ERROR_EBADMSG: Enum_Unnamed76 = 2151743832;
pub const SCE_NET_ERROR_ENODATA: Enum_Unnamed76 = 2151743833;
pub const SCE_NET_ERROR_ENOSR: Enum_Unnamed76 = 2151743834;
pub const SCE_NET_ERROR_ENOSTR: Enum_Unnamed76 = 2151743835;
pub const SCE_NET_ERROR_ETIME: Enum_Unnamed76 = 2151743836;
pub const SCE_NET_ERROR_EADHOC: Enum_Unnamed76 = 2151743904;
pub const SCE_NET_ERROR_EDISABLEDIF: Enum_Unnamed76 = 2151743905;
pub const SCE_NET_ERROR_ERESUME: Enum_Unnamed76 = 2151743906;
pub const SCE_NET_ERROR_ENOTINIT: Enum_Unnamed76 = 2151743944;
pub const SCE_NET_ERROR_ENOLIBMEM: Enum_Unnamed76 = 2151743945;
pub const SCE_NET_ERROR_ERESERVED202: Enum_Unnamed76 = 2151743946;
pub const SCE_NET_ERROR_ECALLBACK: Enum_Unnamed76 = 2151743947;
pub const SCE_NET_ERROR_EINTERNAL: Enum_Unnamed76 = 2151743948;
pub const SCE_NET_ERROR_ERETURN: Enum_Unnamed76 = 2151743949;
pub const SCE_NET_ERROR_RESOLVER_EINTERNAL: Enum_Unnamed76 = 2151743964;
pub const SCE_NET_ERROR_RESOLVER_EBUSY: Enum_Unnamed76 = 2151743965;
pub const SCE_NET_ERROR_RESOLVER_ENOSPACE: Enum_Unnamed76 = 2151743966;
pub const SCE_NET_ERROR_RESOLVER_EPACKET: Enum_Unnamed76 = 2151743967;
pub const SCE_NET_ERROR_RESOLVER_ERESERVED22: Enum_Unnamed76 = 2151743968;
pub const SCE_NET_ERROR_RESOLVER_ENODNS: Enum_Unnamed76 = 2151743969;
pub const SCE_NET_ERROR_RESOLVER_ETIMEDOUT: Enum_Unnamed76 = 2151743970;
pub const SCE_NET_ERROR_RESOLVER_ENOSUPPORT: Enum_Unnamed76 = 2151743971;
pub const SCE_NET_ERROR_RESOLVER_EFORMAT: Enum_Unnamed76 = 2151743972;
pub const SCE_NET_ERROR_RESOLVER_ESERVERFAILURE: Enum_Unnamed76 = 2151743973;
pub const SCE_NET_ERROR_RESOLVER_ENOHOST: Enum_Unnamed76 = 2151743974;
pub const SCE_NET_ERROR_RESOLVER_ENOTIMPLEMENTED: Enum_Unnamed76 = 2151743975;
pub const SCE_NET_ERROR_RESOLVER_ESERVERREFUSED: Enum_Unnamed76 = 2151743976;
pub const SCE_NET_ERROR_RESOLVER_ENORECORD: Enum_Unnamed76 = 2151743977;
pub const SCE_NET_ERROR_RESOLVER_EALIGNMENT: Enum_Unnamed76 = 2151743978;
pub type Enum_Unnamed77 = u32;
pub const SCE_NET_EPERM: Enum_Unnamed77 = 1;
pub const SCE_NET_ENOENT: Enum_Unnamed77 = 2;
pub const SCE_NET_ESRCH: Enum_Unnamed77 = 3;
pub const SCE_NET_EINTR: Enum_Unnamed77 = 4;
pub const SCE_NET_EIO: Enum_Unnamed77 = 5;
pub const SCE_NET_ENXIO: Enum_Unnamed77 = 6;
pub const SCE_NET_E2BIG: Enum_Unnamed77 = 7;
pub const SCE_NET_ENOEXEC: Enum_Unnamed77 = 8;
pub const SCE_NET_EBADF: Enum_Unnamed77 = 9;
pub const SCE_NET_ECHILD: Enum_Unnamed77 = 10;
pub const SCE_NET_EDEADLK: Enum_Unnamed77 = 11;
pub const SCE_NET_ENOMEM: Enum_Unnamed77 = 12;
pub const SCE_NET_EACCES: Enum_Unnamed77 = 13;
pub const SCE_NET_EFAULT: Enum_Unnamed77 = 14;
pub const SCE_NET_ENOTBLK: Enum_Unnamed77 = 15;
pub const SCE_NET_EBUSY: Enum_Unnamed77 = 16;
pub const SCE_NET_EEXIST: Enum_Unnamed77 = 17;
pub const SCE_NET_EXDEV: Enum_Unnamed77 = 18;
pub const SCE_NET_ENODEV: Enum_Unnamed77 = 19;
pub const SCE_NET_ENOTDIR: Enum_Unnamed77 = 20;
pub const SCE_NET_EISDIR: Enum_Unnamed77 = 21;
pub const SCE_NET_EINVAL: Enum_Unnamed77 = 22;
pub const SCE_NET_ENFILE: Enum_Unnamed77 = 23;
pub const SCE_NET_EMFILE: Enum_Unnamed77 = 24;
pub const SCE_NET_ENOTTY: Enum_Unnamed77 = 25;
pub const SCE_NET_ETXTBSY: Enum_Unnamed77 = 26;
pub const SCE_NET_EFBIG: Enum_Unnamed77 = 27;
pub const SCE_NET_ENOSPC: Enum_Unnamed77 = 28;
pub const SCE_NET_ESPIPE: Enum_Unnamed77 = 29;
pub const SCE_NET_EROFS: Enum_Unnamed77 = 30;
pub const SCE_NET_EMLINK: Enum_Unnamed77 = 31;
pub const SCE_NET_EPIPE: Enum_Unnamed77 = 32;
pub const SCE_NET_EDOM: Enum_Unnamed77 = 33;
pub const SCE_NET_ERANGE: Enum_Unnamed77 = 34;
pub const SCE_NET_EAGAIN: Enum_Unnamed77 = 35;
pub const SCE_NET_EWOULDBLOCK: Enum_Unnamed77 = 35;
pub const SCE_NET_EINPROGRESS: Enum_Unnamed77 = 36;
pub const SCE_NET_EALREADY: Enum_Unnamed77 = 37;
pub const SCE_NET_ENOTSOCK: Enum_Unnamed77 = 38;
pub const SCE_NET_EDESTADDRREQ: Enum_Unnamed77 = 39;
pub const SCE_NET_EMSGSIZE: Enum_Unnamed77 = 40;
pub const SCE_NET_EPROTOTYPE: Enum_Unnamed77 = 41;
pub const SCE_NET_ENOPROTOOPT: Enum_Unnamed77 = 42;
pub const SCE_NET_EPROTONOSUPPORT: Enum_Unnamed77 = 43;
pub const SCE_NET_ESOCKTNOSUPPORT: Enum_Unnamed77 = 44;
pub const SCE_NET_EOPNOTSUPP: Enum_Unnamed77 = 45;
pub const SCE_NET_EPFNOSUPPORT: Enum_Unnamed77 = 46;
pub const SCE_NET_EAFNOSUPPORT: Enum_Unnamed77 = 47;
pub const SCE_NET_EADDRINUSE: Enum_Unnamed77 = 48;
pub const SCE_NET_EADDRNOTAVAIL: Enum_Unnamed77 = 49;
pub const SCE_NET_ENETDOWN: Enum_Unnamed77 = 50;
pub const SCE_NET_ENETUNREACH: Enum_Unnamed77 = 51;
pub const SCE_NET_ENETRESET: Enum_Unnamed77 = 52;
pub const SCE_NET_ECONNABORTED: Enum_Unnamed77 = 53;
pub const SCE_NET_ECONNRESET: Enum_Unnamed77 = 54;
pub const SCE_NET_ENOBUFS: Enum_Unnamed77 = 55;
pub const SCE_NET_EISCONN: Enum_Unnamed77 = 56;
pub const SCE_NET_ENOTCONN: Enum_Unnamed77 = 57;
pub const SCE_NET_ESHUTDOWN: Enum_Unnamed77 = 58;
pub const SCE_NET_ETOOMANYREFS: Enum_Unnamed77 = 59;
pub const SCE_NET_ETIMEDOUT: Enum_Unnamed77 = 60;
pub const SCE_NET_ECONNREFUSED: Enum_Unnamed77 = 61;
pub const SCE_NET_ELOOP: Enum_Unnamed77 = 62;
pub const SCE_NET_ENAMETOOLONG: Enum_Unnamed77 = 63;
pub const SCE_NET_EHOSTDOWN: Enum_Unnamed77 = 64;
pub const SCE_NET_EHOSTUNREACH: Enum_Unnamed77 = 65;
pub const SCE_NET_ENOTEMPTY: Enum_Unnamed77 = 66;
pub const SCE_NET_EPROCLIM: Enum_Unnamed77 = 67;
pub const SCE_NET_EUSERS: Enum_Unnamed77 = 68;
pub const SCE_NET_EDQUOT: Enum_Unnamed77 = 69;
pub const SCE_NET_ESTALE: Enum_Unnamed77 = 70;
pub const SCE_NET_EREMOTE: Enum_Unnamed77 = 71;
pub const SCE_NET_EBADRPC: Enum_Unnamed77 = 72;
pub const SCE_NET_ERPCMISMATCH: Enum_Unnamed77 = 73;
pub const SCE_NET_EPROGUNAVAIL: Enum_Unnamed77 = 74;
pub const SCE_NET_EPROGMISMATCH: Enum_Unnamed77 = 75;
pub const SCE_NET_EPROCUNAVAIL: Enum_Unnamed77 = 76;
pub const SCE_NET_ENOLCK: Enum_Unnamed77 = 77;
pub const SCE_NET_ENOSYS: Enum_Unnamed77 = 78;
pub const SCE_NET_EFTYPE: Enum_Unnamed77 = 79;
pub const SCE_NET_EAUTH: Enum_Unnamed77 = 80;
pub const SCE_NET_ENEEDAUTH: Enum_Unnamed77 = 81;
pub const SCE_NET_EIDRM: Enum_Unnamed77 = 82;
pub const SCE_NET_ENOMSG: Enum_Unnamed77 = 83;
pub const SCE_NET_EOVERFLOW: Enum_Unnamed77 = 84;
pub const SCE_NET_EILSEQ: Enum_Unnamed77 = 85;
pub const SCE_NET_ENOTSUP: Enum_Unnamed77 = 86;
pub const SCE_NET_ECANCELED: Enum_Unnamed77 = 87;
pub const SCE_NET_EBADMSG: Enum_Unnamed77 = 88;
pub const SCE_NET_ENODATA: Enum_Unnamed77 = 89;
pub const SCE_NET_ENOSR: Enum_Unnamed77 = 90;
pub const SCE_NET_ENOSTR: Enum_Unnamed77 = 91;
pub const SCE_NET_ETIME: Enum_Unnamed77 = 92;
pub const SCE_NET_EADHOC: Enum_Unnamed77 = 160;
pub const SCE_NET_EDISABLEDIF: Enum_Unnamed77 = 161;
pub const SCE_NET_ERESUME: Enum_Unnamed77 = 162;
pub type Enum_Unnamed78 = u32;
pub const SCE_NET_ENOTINIT: Enum_Unnamed78 = 200;
pub const SCE_NET_ENOLIBMEM: Enum_Unnamed78 = 201;
pub const SCE_NET_ETLS: Enum_Unnamed78 = 202;
pub const SCE_NET_ECALLBACK: Enum_Unnamed78 = 203;
pub const SCE_NET_EINTERNAL: Enum_Unnamed78 = 204;
pub const SCE_NET_ERETURN: Enum_Unnamed78 = 205;
pub type Enum_Unnamed79 = u32;
pub const SCE_NET_RESOLVER_EINTERNAL: Enum_Unnamed79 = 220;
pub const SCE_NET_RESOLVER_EBUSY: Enum_Unnamed79 = 221;
pub const SCE_NET_RESOLVER_ENOSPACE: Enum_Unnamed79 = 222;
pub const SCE_NET_RESOLVER_EPACKET: Enum_Unnamed79 = 223;
pub const SCE_NET_RESOLVER_ERESERVED224: Enum_Unnamed79 = 224;
pub const SCE_NET_RESOLVER_ENODNS: Enum_Unnamed79 = 225;
pub const SCE_NET_RESOLVER_ETIMEDOUT: Enum_Unnamed79 = 226;
pub const SCE_NET_RESOLVER_ENOSUPPORT: Enum_Unnamed79 = 227;
pub const SCE_NET_RESOLVER_EFORMAT: Enum_Unnamed79 = 228;
pub const SCE_NET_RESOLVER_ESERVERFAILURE: Enum_Unnamed79 = 229;
pub const SCE_NET_RESOLVER_ENOHOST: Enum_Unnamed79 = 230;
pub const SCE_NET_RESOLVER_ENOTIMPLEMENTED: Enum_Unnamed79 = 231;
pub const SCE_NET_RESOLVER_ESERVERREFUSED: Enum_Unnamed79 = 232;
pub const SCE_NET_RESOLVER_ENORECORD: Enum_Unnamed79 = 233;
pub const SCE_NET_RESOLVER_EALIGNMENT: Enum_Unnamed79 = 234;
pub type Enum_Unnamed80 = u32;
pub const SCE_NET_DUMP_PEEK: Enum_Unnamed80 = 16;
pub const SCE_NET_DUMP_DONTWAIT: Enum_Unnamed80 = 32;
pub const SCE_NET_DUMP_OVERFLOW: Enum_Unnamed80 = 64;
pub const SCE_NET_DUMP_ABORT_FLAG_PRESERVATION: Enum_Unnamed80 = 1;
pub type Enum_Unnamed81 = u32;
pub const SCE_NET_EPOLLIN: Enum_Unnamed81 = 1;
pub const SCE_NET_EPOLLOUT: Enum_Unnamed81 = 2;
pub const SCE_NET_EPOLLERR: Enum_Unnamed81 = 8;
pub const SCE_NET_EPOLLHUP: Enum_Unnamed81 = 16;
pub const SCE_NET_EPOLLDESCID: Enum_Unnamed81 = 65536;
pub type Enum_Unnamed82 = u32;
pub const SCE_NET_EPOLL_CTL_ADD: Enum_Unnamed82 = 1;
pub const SCE_NET_EPOLL_CTL_MOD: Enum_Unnamed82 = 2;
pub const SCE_NET_EPOLL_CTL_DEL: Enum_Unnamed82 = 3;
pub type Enum_Unnamed83 = u32;
pub const SCE_NET_SOCKINFO_STATE_UNKNOWN: Enum_Unnamed83 = 0;
pub const SCE_NET_SOCKINFO_STATE_CLOSED: Enum_Unnamed83 = 1;
pub const SCE_NET_SOCKINFO_STATE_OPENED: Enum_Unnamed83 = 2;
pub const SCE_NET_SOCKINFO_STATE_LISTEN: Enum_Unnamed83 = 3;
pub const SCE_NET_SOCKINFO_STATE_SYN_SENT: Enum_Unnamed83 = 4;
pub const SCE_NET_SOCKINFO_STATE_SYN_RECEIVED: Enum_Unnamed83 = 5;
pub const SCE_NET_SOCKINFO_STATE_ESTABLISHED: Enum_Unnamed83 = 6;
pub const SCE_NET_SOCKINFO_STATE_FIN_WAIT_1: Enum_Unnamed83 = 7;
pub const SCE_NET_SOCKINFO_STATE_FIN_WAIT_2: Enum_Unnamed83 = 8;
pub const SCE_NET_SOCKINFO_STATE_CLOSE_WAIT: Enum_Unnamed83 = 9;
pub const SCE_NET_SOCKINFO_STATE_CLOSING: Enum_Unnamed83 = 10;
pub const SCE_NET_SOCKINFO_STATE_LAST_ACK: Enum_Unnamed83 = 11;
pub const SCE_NET_SOCKINFO_STATE_TIME_WAIT: Enum_Unnamed83 = 12;
pub type Enum_Unnamed84 = u32;
pub const SCE_NET_SOCKINFO_F_SELF: Enum_Unnamed84 = 1;
pub const SCE_NET_SOCKINFO_F_KERNEL: Enum_Unnamed84 = 2;
pub const SCE_NET_SOCKINFO_F_OTHERS: Enum_Unnamed84 = 4;
pub const SCE_NET_SOCKINFO_F_RECV_WAIT: Enum_Unnamed84 = 65536;
pub const SCE_NET_SOCKINFO_F_SEND_WAIT: Enum_Unnamed84 = 131072;
pub const SCE_NET_SOCKINFO_F_RECV_EWAIT: Enum_Unnamed84 = 262144;
pub const SCE_NET_SOCKINFO_F_SEND_EWAIT: Enum_Unnamed84 = 524288;
pub const SCE_NET_SOCKINFO_F_WAKEUP_SIGNAL: Enum_Unnamed84 = 1048576;
pub const SCE_NET_SOCKINFO_F_ALL: Enum_Unnamed84 = 2031623;
pub type Enum_Unnamed85 = u32;
pub const SCE_NET_EMULATION_FLAG_ETH0: Enum_Unnamed85 = 1;
pub const SCE_NET_EMULATION_FLAG_WLAN0: Enum_Unnamed85 = 2;
pub type Enum_Unnamed86 = u32;
pub const SCE_NET_RESOLVER_ASYNC: Enum_Unnamed86 = 1;
pub const SCE_NET_RESOLVER_START_NTOA_DISABLE_IPADDRESS: Enum_Unnamed86 =
    65536;
pub type Enum_Unnamed87 = u32;
pub const SCE_NET_RESOLVER_ABORT_FLAG_NTOA_PRESERVATION: Enum_Unnamed87 = 1;
pub const SCE_NET_RESOLVER_ABORT_FLAG_ATON_PRESERVATION: Enum_Unnamed87 = 2;
pub type Enum_Unnamed88 = u32;
pub const SCE_NET_SOCKET_ABORT_FLAG_RCV_PRESERVATION: Enum_Unnamed88 = 1;
pub const SCE_NET_SOCKET_ABORT_FLAG_SND_PRESERVATION: Enum_Unnamed88 = 2;
pub type Enum_Unnamed89 = u32;
pub const SCE_NET_IPPROTO_IP: Enum_Unnamed89 = 0;
pub const SCE_NET_IPPROTO_ICMP: Enum_Unnamed89 = 1;
pub const SCE_NET_IPPROTO_IGMP: Enum_Unnamed89 = 2;
pub const SCE_NET_IPPROTO_TCP: Enum_Unnamed89 = 6;
pub const SCE_NET_IPPROTO_UDP: Enum_Unnamed89 = 17;
pub const SCE_NET_SOL_SOCKET: Enum_Unnamed89 = 65535;
pub type Enum_Unnamed90 = u32;
pub const SCE_NET_IP_HDRINCL: Enum_Unnamed90 = 2;
pub const SCE_NET_IP_TOS: Enum_Unnamed90 = 3;
pub const SCE_NET_IP_TTL: Enum_Unnamed90 = 4;
pub const SCE_NET_IP_MULTICAST_IF: Enum_Unnamed90 = 9;
pub const SCE_NET_IP_MULTICAST_TTL: Enum_Unnamed90 = 10;
pub const SCE_NET_IP_MULTICAST_LOOP: Enum_Unnamed90 = 11;
pub const SCE_NET_IP_ADD_MEMBERSHIP: Enum_Unnamed90 = 12;
pub const SCE_NET_IP_DROP_MEMBERSHIP: Enum_Unnamed90 = 13;
pub const SCE_NET_IP_TTLCHK: Enum_Unnamed90 = 23;
pub const SCE_NET_IP_MAXTTL: Enum_Unnamed90 = 24;
pub const SCE_NET_TCP_NODELAY: Enum_Unnamed90 = 1;
pub const SCE_NET_TCP_MAXSEG: Enum_Unnamed90 = 2;
pub const SCE_NET_TCP_MSS_TO_ADVERTISE: Enum_Unnamed90 = 3;
pub const SCE_NET_SO_REUSEADDR: Enum_Unnamed90 = 4;
pub const SCE_NET_SO_KEEPALIVE: Enum_Unnamed90 = 8;
pub const SCE_NET_SO_BROADCAST: Enum_Unnamed90 = 32;
pub const SCE_NET_SO_LINGER: Enum_Unnamed90 = 128;
pub const SCE_NET_SO_OOBINLINE: Enum_Unnamed90 = 256;
pub const SCE_NET_SO_REUSEPORT: Enum_Unnamed90 = 512;
pub const SCE_NET_SO_ONESBCAST: Enum_Unnamed90 = 2048;
pub const SCE_NET_SO_USECRYPTO: Enum_Unnamed90 = 4096;
pub const SCE_NET_SO_USESIGNATURE: Enum_Unnamed90 = 8192;
pub const SCE_NET_SO_SNDBUF: Enum_Unnamed90 = 4097;
pub const SCE_NET_SO_RCVBUF: Enum_Unnamed90 = 4098;
pub const SCE_NET_SO_SNDLOWAT: Enum_Unnamed90 = 4099;
pub const SCE_NET_SO_RCVLOWAT: Enum_Unnamed90 = 4100;
pub const SCE_NET_SO_SNDTIMEO: Enum_Unnamed90 = 4101;
pub const SCE_NET_SO_RCVTIMEO: Enum_Unnamed90 = 4102;
pub const SCE_NET_SO_ERROR: Enum_Unnamed90 = 4103;
pub const SCE_NET_SO_TYPE: Enum_Unnamed90 = 4104;
pub const SCE_NET_SO_NBIO: Enum_Unnamed90 = 4352;
pub const SCE_NET_SO_TPPOLICY: Enum_Unnamed90 = 4353;
pub const SCE_NET_SO_NAME: Enum_Unnamed90 = 4354;
pub type Enum_Unnamed91 = u32;
pub const SCE_NET_SOCK_STREAM: Enum_Unnamed91 = 1;
pub const SCE_NET_SOCK_DGRAM: Enum_Unnamed91 = 2;
pub const SCE_NET_SOCK_RAW: Enum_Unnamed91 = 3;
pub const SCE_NET_SOCK_DGRAM_P2P: Enum_Unnamed91 = 6;
pub const SCE_NET_SOCK_STREAM_P2P: Enum_Unnamed91 = 10;
pub type Enum_Unnamed92 = u32;
pub const SCE_NET_MSG_PEEK: Enum_Unnamed92 = 2;
pub const SCE_NET_MSG_WAITALL: Enum_Unnamed92 = 64;
pub const SCE_NET_MSG_DONTWAIT: Enum_Unnamed92 = 128;
pub const SCE_NET_MSG_USECRYPTO: Enum_Unnamed92 = 1024;
pub const SCE_NET_MSG_USESIGNATURE: Enum_Unnamed92 = 2048;
pub type Enum_Unnamed93 = u32;
pub const SCE_NET_SHUT_RD: Enum_Unnamed93 = 0;
pub const SCE_NET_SHUT_WR: Enum_Unnamed93 = 1;
pub const SCE_NET_SHUT_RDWR: Enum_Unnamed93 = 2;
pub type Enum_Unnamed94 = u32;
pub const SCE_NET_ICMP_TYPE_ECHO_REPLY: Enum_Unnamed94 = 0;
pub const SCE_NET_ICMP_TYPE_DEST_UNREACH: Enum_Unnamed94 = 3;
pub const SCE_NET_ICMP_TYPE_SOURCE_QUENCH: Enum_Unnamed94 = 4;
pub const SCE_NET_ICMP_TYPE_REDIRECT: Enum_Unnamed94 = 5;
pub const SCE_NET_ICMP_TYPE_ECHO_REQUEST: Enum_Unnamed94 = 8;
pub const SCE_NET_ICMP_TYPE_TIME_EXCEEDED: Enum_Unnamed94 = 11;
pub const SCE_NET_ICMP_TYPE_PARAMETER_PROBLEM: Enum_Unnamed94 = 12;
pub const SCE_NET_ICMP_TYPE_TIMESTAMP_REQUEST: Enum_Unnamed94 = 13;
pub const SCE_NET_ICMP_TYPE_TIMESTAMP_REPLY: Enum_Unnamed94 = 14;
pub const SCE_NET_ICMP_TYPE_INFORMATION_REQUEST: Enum_Unnamed94 = 15;
pub const SCE_NET_ICMP_TYPE_INFORMATION_REPLY: Enum_Unnamed94 = 16;
pub const SCE_NET_ICMP_TYPE_ADDRESS_MASK_REQUEST: Enum_Unnamed94 = 17;
pub const SCE_NET_ICMP_TYPE_ADDRESS_MASK_REPLY: Enum_Unnamed94 = 18;
pub type Enum_Unnamed95 = u32;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_NET_UNREACH: Enum_Unnamed95 = 0;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_HOST_UNREACH: Enum_Unnamed95 = 1;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_PROTO_UNREACH: Enum_Unnamed95 = 2;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_PORT_UNREACH: Enum_Unnamed95 = 3;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_FRAG_AND_DF: Enum_Unnamed95 = 4;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_SRC_HOST_FAILED: Enum_Unnamed95 = 5;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_DST_NET_UNKNOWN: Enum_Unnamed95 = 6;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_DST_HOST_UNKNOWN: Enum_Unnamed95 = 7;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_SRC_HOST_ISOLATED: Enum_Unnamed95 =
    8;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_NET_ADMIN_PROHIBITED: Enum_Unnamed95
          =
    9;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_NET_HOST_PROHIBITED: Enum_Unnamed95 =
    10;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_NET_TOS: Enum_Unnamed95 = 11;
pub const SCE_NET_ICMP_CODE_DEST_UNREACH_HOST_TOS: Enum_Unnamed95 = 12;
pub const SCE_NET_ICMP_CODE_TIME_EXCEEDED_TTL_EXCEEDED: Enum_Unnamed95 = 0;
pub const SCE_NET_ICMP_CODE_TIME_EXCEEDED_FRT_EXCEEDED: Enum_Unnamed95 = 1;
pub type SceNetResolverFunctionAllocate =
    ::core::option::Option<unsafe extern "C" fn(size: ::libc::c_uint,
                                                rid: ::libc::c_int,
                                                name: *const ::libc::c_char,
                                                user: *mut ::libc::c_void)
                               -> *mut ::libc::c_void>;
pub type SceNetResolverFunctionFree =
    ::core::option::Option<unsafe extern "C" fn(ptr: *mut ::libc::c_void,
                                                rid: ::libc::c_int,
                                                name: *const ::libc::c_char,
                                                user: *mut ::libc::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetFdSet {
    pub bits: [::libc::c_uint; 32usize],
}
impl ::core::default::Default for SceNetFdSet {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetInAddr {
    pub s_addr: ::libc::c_uint,
}
impl ::core::default::Default for SceNetInAddr {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetSockaddrIn {
    pub sin_len: ::libc::c_uchar,
    pub sin_family: ::libc::c_uchar,
    pub sin_port: ::libc::c_ushort,
    pub sin_addr: SceNetInAddr,
    pub sin_vport: ::libc::c_ushort,
    pub sin_zero: [::libc::c_char; 6usize],
}
impl ::core::default::Default for SceNetSockaddrIn {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIpMreq {
    pub imr_multiaddr: SceNetInAddr,
    pub imr_interface: SceNetInAddr,
}
impl ::core::default::Default for SceNetIpMreq {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetInitParam {
    pub memory: *mut ::libc::c_void,
    pub size: ::libc::c_int,
    pub flags: ::libc::c_int,
}
impl ::core::default::Default for SceNetInitParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceNetEmulationData {
    pub drop_rate: ::libc::c_ushort,
    pub drop_duration: ::libc::c_ushort,
    pub pass_duration: ::libc::c_ushort,
    pub delay_time: ::libc::c_ushort,
    pub delay_jitter: ::libc::c_ushort,
    pub order_rate: ::libc::c_ushort,
    pub order_delay_time: ::libc::c_ushort,
    pub duplication_rate: ::libc::c_ushort,
    pub bps_limit: ::libc::c_uint,
    pub lower_size_limit: ::libc::c_ushort,
    pub upper_size_limit: ::libc::c_ushort,
    pub system_policy_pattern: ::libc::c_uint,
    pub game_policy_pattern: ::libc::c_uint,
    pub policy_flags: [::libc::c_ushort; 64usize],
    pub reserved: [::libc::c_uchar; 64usize],
}
impl ::core::clone::Clone for SceNetEmulationData {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceNetEmulationData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct SceNetEmulationParam {
    pub version: ::libc::c_ushort,
    pub option_number: ::libc::c_ushort,
    pub current_version: ::libc::c_ushort,
    pub result: ::libc::c_ushort,
    pub flags: ::libc::c_uint,
    pub reserved1: ::libc::c_uint,
    pub send: SceNetEmulationData,
    pub recv: SceNetEmulationData,
    pub seed: ::libc::c_uint,
    pub reserved: [::libc::c_uchar; 44usize],
}
impl ::core::clone::Clone for SceNetEmulationParam {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceNetEmulationParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetEtherAddr {
    pub data: [::libc::c_uchar; 6usize],
}
impl ::core::default::Default for SceNetEtherAddr {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetDnsInfo {
    pub dns_addr: [SceNetInAddr; 2usize],
}
impl ::core::default::Default for SceNetDnsInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetEpollDataExt {
    pub id: ::libc::c_int,
    pub u32_: ::libc::c_uint,
}
impl ::core::default::Default for SceNetEpollDataExt {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetEpollData {
    pub _bindgen_data_: [u64; 1usize],
}
impl SceNetEpollData {
    pub unsafe fn ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn fd(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u32_(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u64_(&mut self) -> *mut ::libc::c_ulonglong {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ext(&mut self) -> *mut SceNetEpollDataExt {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceNetEpollData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetEpollSystemData {
    pub system: [::libc::c_uint; 4usize],
}
impl ::core::default::Default for SceNetEpollSystemData {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetEpollEvent {
    pub events: ::libc::c_uint,
    pub reserved: ::libc::c_uint,
    pub system: SceNetEpollSystemData,
    pub data: SceNetEpollData,
}
impl ::core::default::Default for SceNetEpollEvent {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetResolverParam {
    pub allocate: SceNetResolverFunctionAllocate,
    pub free: SceNetResolverFunctionFree,
    pub user: *mut ::libc::c_void,
}
impl ::core::default::Default for SceNetResolverParam {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetLinger {
    pub l_onoff: ::libc::c_int,
    pub l_linger: ::libc::c_int,
}
impl ::core::default::Default for SceNetLinger {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetSockaddr {
    pub sa_len: ::libc::c_uchar,
    pub sa_family: ::libc::c_uchar,
    pub sa_data: [::libc::c_char; 14usize],
}
impl ::core::default::Default for SceNetSockaddr {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIovec {
    pub iov_base: *mut ::libc::c_void,
    pub iov_len: ::libc::c_uint,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceNetIovec {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetMsghdr {
    pub msg_name: *mut ::libc::c_void,
    pub msg_namelen: ::libc::c_uint,
    pub msg_iov: *mut SceNetIovec,
    pub msg_iovlen: ::libc::c_int,
    pub msg_control: *mut ::libc::c_void,
    pub msg_controllen: ::libc::c_uint,
    pub msg_flags: ::libc::c_int,
}
impl ::core::default::Default for SceNetMsghdr {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetSockInfo {
    pub name: [::libc::c_char; 32usize],
    pub pid: ::libc::c_int,
    pub s: ::libc::c_int,
    pub socket_type: ::libc::c_char,
    pub policy: ::libc::c_char,
    pub reserved16: ::libc::c_short,
    pub recv_queue_length: ::libc::c_int,
    pub send_queue_length: ::libc::c_int,
    pub local_adr: SceNetInAddr,
    pub remote_adr: SceNetInAddr,
    pub local_port: ::libc::c_ushort,
    pub remote_port: ::libc::c_ushort,
    pub local_vport: ::libc::c_ushort,
    pub remote_vport: ::libc::c_ushort,
    pub state: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub reserved: [::libc::c_int; 8usize],
}
impl ::core::default::Default for SceNetSockInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetStatisticsInfo {
    pub kernel_mem_free_size: ::libc::c_int,
    pub kernel_mem_free_min: ::libc::c_int,
    pub packet_count: ::libc::c_int,
    pub packet_qos_count: ::libc::c_int,
    pub libnet_mem_free_size: ::libc::c_int,
    pub libnet_mem_free_min: ::libc::c_int,
}
impl ::core::default::Default for SceNetStatisticsInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIpHeaderIpVerHl {
    pub hl: ::libc::c_uchar,
    pub ver: ::libc::c_uchar,
}
impl ::core::default::Default for SceNetIpHeaderIpVerHl {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIpHeaderUnion {
    pub _bindgen_data_: [u8; 2usize],
}
impl SceNetIpHeaderUnion {
    pub unsafe fn ip_ver_hl(&mut self) -> *mut SceNetIpHeaderIpVerHl {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ver_hl(&mut self) -> *mut ::libc::c_uchar {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceNetIpHeaderUnion {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIpHeader {
    pub un: SceNetIpHeaderUnion,
    pub ip_tos: ::libc::c_uchar,
    pub ip_len: ::libc::c_ushort,
    pub ip_id: ::libc::c_ushort,
    pub ip_off: ::libc::c_ushort,
    pub ip_ttl: ::libc::c_uchar,
    pub ip_p: ::libc::c_uchar,
    pub ip_sum: ::libc::c_ushort,
    pub ip_src: SceNetInAddr,
    pub ip_dst: SceNetInAddr,
}
impl ::core::default::Default for SceNetIpHeader {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIcmpHeaderEcho {
    pub id: ::libc::c_ushort,
    pub sequence: ::libc::c_ushort,
}
impl ::core::default::Default for SceNetIcmpHeaderEcho {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIcmpHeaderFrag {
    pub unused: ::libc::c_ushort,
    pub mtu: ::libc::c_ushort,
}
impl ::core::default::Default for SceNetIcmpHeaderFrag {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIcmpHeaderUnion {
    pub _bindgen_data_: [u32; 1usize],
}
impl SceNetIcmpHeaderUnion {
    pub unsafe fn echo(&mut self) -> *mut SceNetIcmpHeaderEcho {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn gateway(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn frag(&mut self) -> *mut SceNetIcmpHeaderFrag {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::default::Default for SceNetIcmpHeaderUnion {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetIcmpHeader {
    pub type_: ::libc::c_uchar,
    pub code: ::libc::c_uchar,
    pub checksum: ::libc::c_ushort,
    pub un: SceNetIcmpHeaderUnion,
}
impl ::core::default::Default for SceNetIcmpHeader {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type Enum_Unnamed96 = u32;
pub const SCE_NETCTL_INFO_GET_CNF_NAME: Enum_Unnamed96 = 1;
pub const SCE_NETCTL_INFO_GET_DEVICE: Enum_Unnamed96 = 2;
pub const SCE_NETCTL_INFO_GET_ETHER_ADDR: Enum_Unnamed96 = 3;
pub const SCE_NETCTL_INFO_GET_MTU: Enum_Unnamed96 = 4;
pub const SCE_NETCTL_INFO_GET_LINK: Enum_Unnamed96 = 5;
pub const SCE_NETCTL_INFO_GET_BSSID: Enum_Unnamed96 = 6;
pub const SCE_NETCTL_INFO_GET_SSID: Enum_Unnamed96 = 7;
pub const SCE_NETCTL_INFO_GET_WIFI_SECURITY: Enum_Unnamed96 = 8;
pub const SCE_NETCTL_INFO_GET_RSSI_DBM: Enum_Unnamed96 = 9;
pub const SCE_NETCTL_INFO_GET_RSSI_PERCENTAGE: Enum_Unnamed96 = 10;
pub const SCE_NETCTL_INFO_GET_CHANNEL: Enum_Unnamed96 = 11;
pub const SCE_NETCTL_INFO_GET_IP_CONFIG: Enum_Unnamed96 = 12;
pub const SCE_NETCTL_INFO_GET_DHCP_HOSTNAME: Enum_Unnamed96 = 13;
pub const SCE_NETCTL_INFO_GET_PPPOE_AUTH_NAME: Enum_Unnamed96 = 14;
pub const SCE_NETCTL_INFO_GET_IP_ADDRESS: Enum_Unnamed96 = 15;
pub const SCE_NETCTL_INFO_GET_NETMASK: Enum_Unnamed96 = 16;
pub const SCE_NETCTL_INFO_GET_DEFAULT_ROUTE: Enum_Unnamed96 = 17;
pub const SCE_NETCTL_INFO_GET_PRIMARY_DNS: Enum_Unnamed96 = 18;
pub const SCE_NETCTL_INFO_GET_SECONDARY_DNS: Enum_Unnamed96 = 19;
pub const SCE_NETCTL_INFO_GET_HTTP_PROXY_CONFIG: Enum_Unnamed96 = 20;
pub const SCE_NETCTL_INFO_GET_HTTP_PROXY_SERVER: Enum_Unnamed96 = 21;
pub const SCE_NETCTL_INFO_GET_HTTP_PROXY_PORT: Enum_Unnamed96 = 22;
pub type SceNetCtlCallback =
    ::core::option::Option<unsafe extern "C" fn(event_type: ::libc::c_int,
                                                arg: *mut ::libc::c_void)
                               -> *mut ::libc::c_void>;
#[repr(C)]
#[derive(Copy)]
pub struct SceNetCtlInfo {
    pub _bindgen_data_: [u32; 64usize],
}
impl SceNetCtlInfo {
    pub unsafe fn cnf_name(&mut self) -> *mut [::libc::c_char; 65usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn device(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ether_addr(&mut self) -> *mut SceNetEtherAddr {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mtu(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn link(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bssid(&mut self) -> *mut SceNetEtherAddr {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ssid(&mut self) -> *mut [::libc::c_char; 33usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn wifi_security(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rssi_dbm(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rssi_percentage(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn channel(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ip_config(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dhcp_hostname(&mut self)
     -> *mut [::libc::c_char; 256usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pppoe_auth_name(&mut self)
     -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ip_address(&mut self) -> *mut [::libc::c_char; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn netmask(&mut self) -> *mut [::libc::c_char; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn default_route(&mut self) -> *mut [::libc::c_char; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn primary_dns(&mut self) -> *mut [::libc::c_char; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn secondary_dns(&mut self) -> *mut [::libc::c_char; 16usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn http_proxy_config(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn http_proxy_server(&mut self)
     -> *mut [::libc::c_char; 256usize] {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
    pub unsafe fn http_proxy_port(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::core::mem::transmute(&self._bindgen_data_);
        ::core::mem::transmute(raw.offset(0))
    }
}
impl ::core::clone::Clone for SceNetCtlInfo {
    fn clone(&self) -> Self { *self }
}
impl ::core::default::Default for SceNetCtlInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetCtlNatInfo {
    pub size: ::libc::c_uint,
    pub stun_status: ::libc::c_int,
    pub nat_type: ::libc::c_int,
    pub mapped_addr: SceNetInAddr,
}
impl ::core::default::Default for SceNetCtlNatInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceNetCtlAdhocPeerInfo {
    pub next: *mut SceNetCtlAdhocPeerInfo,
    pub inet_addr: SceNetInAddr,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::core::default::Default for SceNetCtlAdhocPeerInfo {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::core::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::core::mem::zeroed() } }
}
extern "C" {
    pub static mut _impure_ptr: *mut _reent;
    pub static _global_impure_ptr: *mut _reent;
    pub static mut _timezone: ::libc::c_long;
    pub static mut _daylight: ::libc::c_int;
    pub static mut _tzname: [*mut ::libc::c_char; 2usize];
}
extern "C" {
    pub fn _sceAppMgrGetAppState(appState: *mut SceAppMgrAppState,
                                 len: uint32_t, version: uint32_t)
     -> ::libc::c_int;
    pub fn sceAppMgrReceiveSystemEvent(systemEvent: *mut SceAppMgrSystemEvent)
     -> ::libc::c_int;
    pub fn sceAppMgrAcquireBgmPort() -> ::libc::c_int;
    pub fn sceAppMgrReleaseBgmPort() -> ::libc::c_int;
    pub fn sceAppMgrSetInfobarState(visibility: ::libc::c_int,
                                    color: ::libc::c_int,
                                    transparency: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAppMgrLoadExec(appPath: *const ::libc::c_char,
                             argv: *mut *mut ::libc::c_char,
                             optParam: *const SceAppMgrExecOptParam)
     -> ::libc::c_int;
    pub fn sceAppMgrLaunchAppByUri(flags: ::libc::c_int,
                                   uri: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn sceAppMgrLaunchAppByName2(name: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppMgrAppDataMount(id: ::libc::c_int,
                                 mount_point: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppMgrAppDataMountById(id: ::libc::c_int,
                                     titleid: *mut ::libc::c_char,
                                     mount_point: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppMgrAppParamGetString(pid: ::libc::c_int,
                                      param: ::libc::c_int,
                                      string: *mut ::libc::c_char,
                                      length: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAppMgrConvertVs0UserDrivePath(path: *mut ::libc::c_char,
                                            mount_point: *mut ::libc::c_char,
                                            unk: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAppMgrGetDevInfo(dev: *mut ::libc::c_char,
                               max_size: *mut uint64_t,
                               free_size: *mut uint64_t) -> ::libc::c_int;
    pub fn sceAppMgrGetRawPath(path: *mut ::libc::c_char,
                               mount_point: *mut ::libc::c_char,
                               unk: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn sceAppMgrMmsMount(id: ::libc::c_int,
                             mount_point: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppMgrPspSaveDataRootMount(mount_point: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppMgrWorkDirMount(id: ::libc::c_int,
                                 mount_point: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppMgrWorkDirMountById(id: ::libc::c_int,
                                     titleid: *mut ::libc::c_char,
                                     mount_point: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceAppUtilInit(initParam: *mut SceAppUtilInitParam,
                          bootParam: *mut SceAppUtilBootParam)
     -> ::libc::c_int;
    pub fn sceAppUtilShutdown() -> ::libc::c_int;
    pub fn sceAppUtilRecieveAppEvent(eventParam: *mut SceAppUtilAppEventParam)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveDataSlotCreate(slotId: ::libc::c_uint,
                                        param:
                                            *mut SceAppUtilSaveDataSlotParam,
                                        mountPoint:
                                            *mut SceAppUtilSaveDataMountPoint)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveDataSlotDelete(slotId: ::libc::c_uint,
                                        mountPoint:
                                            *mut SceAppUtilSaveDataMountPoint)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveDataSlotSetParam(slotId: ::libc::c_uint,
                                          param:
                                              *mut SceAppUtilSaveDataSlotParam,
                                          mountPoint:
                                              *mut SceAppUtilSaveDataMountPoint)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveDataSlotGetParam(slotId: ::libc::c_uint,
                                          param:
                                              *mut SceAppUtilSaveDataSlotParam,
                                          mountPoint:
                                              *mut SceAppUtilSaveDataMountPoint)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveDataDataSave(slot: *mut SceAppUtilSaveDataFileSlot,
                                      files: *mut SceAppUtilSaveDataFile,
                                      fileNum: ::libc::c_uint,
                                      mountPoint:
                                          *mut SceAppUtilSaveDataMountPoint,
                                      requiredSizeKB: *mut SceSize)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveDataDataRemove(slot: *mut SceAppUtilSaveDataFileSlot,
                                        files:
                                            *mut SceAppUtilSaveDataRemoveItem,
                                        fileNum: ::libc::c_uint,
                                        mountPoint:
                                            *mut SceAppUtilSaveDataMountPoint)
     -> ::libc::c_int;
    pub fn sceAppUtilMusicMount() -> ::libc::c_int;
    pub fn sceAppUtilMusicUmount() -> ::libc::c_int;
    pub fn sceAppUtilPhotoMount() -> ::libc::c_int;
    pub fn sceAppUtilPhotoUmount() -> ::libc::c_int;
    pub fn sceAppUtilSystemParamGetInt(paramId: ::libc::c_uint,
                                       value: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAppUtilSystemParamGetString(paramId: ::libc::c_uint,
                                          buf: *mut SceChar8,
                                          bufSize: SceSize) -> ::libc::c_int;
    pub fn sceAppUtilAppParamGetInt(paramId: SceAppUtilAppParamId,
                                    value: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAppUtilSaveSafeMemory(buf: *mut ::libc::c_void,
                                    bufSize: SceSize, offset: SceOff)
     -> ::libc::c_int;
    pub fn sceAppUtilLoadSafeMemory(buf: *mut ::libc::c_void,
                                    bufSize: SceSize, offset: SceOff)
     -> ::libc::c_int;
    pub fn sceAppUtilStoreBrowse(param: *mut SceAppUtilStoreBrowseParam)
     -> ::libc::c_int;
    pub fn sceAppUtilBgdlGetStatus(stat: *mut SceAppUtilBgdlStatus)
     -> ::libc::c_int;
    pub fn sceAppUtilLaunchWebBrowser(param: *mut SceAppUtilWebBrowserParam)
     -> ::libc::c_int;
    pub fn sceAudiodecInitLibrary(codecType: SceUInt32,
                                  pInitParam: *mut SceAudiodecInitParam)
     -> SceInt32;
    pub fn sceAudiodecTermLibrary(codecType: SceUInt32) -> SceInt32;
    pub fn sceAudiodecCreateDecoder(pCtrl: *mut SceAudiodecCtrl,
                                    codecType: SceUInt32) -> SceInt32;
    pub fn sceAudiodecDeleteDecoder(pCtrl: *mut SceAudiodecCtrl) -> SceInt32;
    pub fn sceAudiodecDecode(pCtrl: *mut SceAudiodecCtrl) -> SceInt32;
    pub fn sceAudiodecDecodeNFrames(pCtrl: *mut SceAudiodecCtrl,
                                    nFrames: SceUInt32) -> SceInt32;
    pub fn sceAudiodecDecodeNStreams(pCtrls: *mut *mut SceAudiodecCtrl,
                                     nStreams: SceUInt32) -> SceInt32;
    pub fn sceAudiodecClearContext(pCtrl: *mut SceAudiodecCtrl) -> SceInt32;
    pub fn sceAudiodecGetInternalError(pCtrl: *mut SceAudiodecCtrl,
                                       pInternalError: *mut SceInt32)
     -> SceInt32;
    pub fn sceAudiodecGetContextSize(pCtrl: *mut SceAudiodecCtrl,
                                     codecType: SceUInt32) -> SceInt32;
    pub fn sceAudiodecCreateDecoderExternal(pCtrl: *mut SceAudiodecCtrl,
                                            codecType: SceUInt32,
                                            vaContext: SceUIntVAddr,
                                            contextSize: SceUInt32)
     -> SceInt32;
    pub fn sceAudiodecDeleteDecoderExternal(pCtrl: *mut SceAudiodecCtrl,
                                            pvaContext: *mut SceUIntVAddr)
     -> SceInt32;
    pub fn sceAtracQueryDecoderGroupMemSize(atracType: SceUInt32,
                                            pDecoderGroup:
                                                *const SceAtracDecoderGroup)
     -> ::libc::c_int;
    pub fn sceAtracCreateDecoderGroup(atracType: SceUInt32,
                                      pDecoderGroup:
                                          *const SceAtracDecoderGroup,
                                      pvWorkMem: *mut ::libc::c_void,
                                      initAudiodecFlag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAtracDeleteDecoderGroup(atracType: SceUInt32,
                                      termAudiodecFlag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAtracGetDecoderGroupInfo(atracType: SceUInt32,
                                       pCreatedDecoder:
                                           *mut SceAtracDecoderGroup,
                                       pAvailableDecoder:
                                           *mut SceAtracDecoderGroup)
     -> ::libc::c_int;
    pub fn sceAtracSetDataAndAcquireHandle(pucBuffer: *mut SceUChar8,
                                           uiReadSize: SceUInt32,
                                           uiBufferSize: SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracReleaseHandle(atracHandle: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAtracDecode(atracHandle: ::libc::c_int,
                          pOutputBuffer: *mut ::libc::c_void,
                          pOutputSamples: *mut SceUInt32,
                          pDecoderStatus: *mut SceUInt32) -> ::libc::c_int;
    pub fn sceAtracGetStreamInfo(atracHandle: ::libc::c_int,
                                 pStreamInfo: *mut SceAtracStreamInfo)
     -> ::libc::c_int;
    pub fn sceAtracAddStreamData(atracHandle: ::libc::c_int,
                                 addSize: SceUInt32) -> ::libc::c_int;
    pub fn sceAtracIsSubBufferNeeded(atracHandle: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAtracGetSubBufferInfo(atracHandle: ::libc::c_int,
                                    pReadPosition: *mut SceUInt32,
                                    pMinSubBufferSize: *mut SceUInt32,
                                    pDataSize: *mut SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracSetSubBuffer(atracHandle: ::libc::c_int,
                                pSubBuffer: *mut SceUChar8,
                                subBufferSize: SceUInt32) -> ::libc::c_int;
    pub fn sceAtracSetLoopNum(atracHandle: ::libc::c_int,
                              loopNum: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAtracSetOutputSamples(atracHandle: ::libc::c_int,
                                    outputSamples: SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracResetNextOutputPosition(atracHandle: ::libc::c_int,
                                           resetSample: SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracGetContentInfo(atracHandle: ::libc::c_int,
                                  pContentInfo: *mut SceAtracContentInfo)
     -> ::libc::c_int;
    pub fn sceAtracGetLoopInfo(atracHandle: ::libc::c_int,
                               pLoopNum: *mut ::libc::c_int,
                               pLoopStatus: *mut SceUInt32) -> ::libc::c_int;
    pub fn sceAtracGetOutputSamples(atracHandle: ::libc::c_int,
                                    pOutputSamples: *mut SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracGetNextOutputPosition(atracHandle: ::libc::c_int,
                                         pNextOutputSample: *mut SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracGetRemainSamples(atracHandle: ::libc::c_int,
                                    pRemainSamples: *mut SceLong64)
     -> ::libc::c_int;
    pub fn sceAtracGetOutputableSamples(atracHandle: ::libc::c_int,
                                        pOutputableSamples: *mut SceLong64)
     -> ::libc::c_int;
    pub fn sceAtracGetDecoderStatus(atracHandle: ::libc::c_int,
                                    pDecoderStatus: *mut SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracGetVacantSize(atracHandle: ::libc::c_int,
                                 pVacantSize: *mut SceUInt32)
     -> ::libc::c_int;
    pub fn sceAtracGetInternalError(atracHandle: ::libc::c_int,
                                    pInternalError: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioencInitLibrary(codecType: ::libc::c_int,
                                  pInitParam: *mut SceAudioencInitParam)
     -> ::libc::c_int;
    pub fn sceAudioencTermLibrary(codecType: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceAudioencCreateEncoder(pCtrl: *mut SceAudioencCtrl,
                                    codecType: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioencDeleteEncoder(pCtrl: *mut SceAudioencCtrl)
     -> ::libc::c_int;
    pub fn sceAudioencEncode(pCtrl: *mut SceAudioencCtrl) -> ::libc::c_int;
    pub fn sceAudioencClearContext(pCtrl: *mut SceAudioencCtrl)
     -> ::libc::c_int;
    pub fn sceAudioencGetOptInfo(pCtrl: *mut SceAudioencCtrl)
     -> ::libc::c_int;
    pub fn sceAudioencGetInternalError(pCtrl: *mut SceAudioencCtrl,
                                       pInternalError: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioInOpenPort(portType: ::libc::c_int, grain: ::libc::c_int,
                              freq: ::libc::c_int, param: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioInReleasePort(port: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioInInput(port: ::libc::c_int, destPtr: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceAudioInGetAdopt(portType: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioInGetStatus(select: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioOutOpenPort(type_: ::libc::c_int, len: ::libc::c_int,
                               freq: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioOutReleasePort(port: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioOutOutput(port: ::libc::c_int, buf: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceAudioOutSetVolume(port: ::libc::c_int, ch: ::libc::c_int,
                                vol: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioOutSetConfig(port: ::libc::c_int, len: ::libc::c_int,
                                freq: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioOutGetConfig(port: ::libc::c_int, type_: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceAudioOutSetAlcMode(mode: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioOutGetRestSample(port: ::libc::c_int) -> ::libc::c_int;
    pub fn sceAudioOutGetAdopt(type_: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraOpen(devnum: ::libc::c_int, pInfo: *mut SceCameraInfo)
     -> ::libc::c_int;
    pub fn sceCameraClose(devnum: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraStart(devnum: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraStop(devnum: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraRead(devnum: ::libc::c_int, pRead: *mut SceCameraRead)
     -> ::libc::c_int;
    pub fn sceCameraIsActive(devnum: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraGetSaturation(devnum: ::libc::c_int,
                                  pLevel: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetSaturation(devnum: ::libc::c_int, level: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetBrightness(devnum: ::libc::c_int,
                                  pLevel: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetBrightness(devnum: ::libc::c_int, level: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetContrast(devnum: ::libc::c_int,
                                pLevel: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraSetContrast(devnum: ::libc::c_int, level: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetSharpness(devnum: ::libc::c_int,
                                 pLevel: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraSetSharpness(devnum: ::libc::c_int, level: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetReverse(devnum: ::libc::c_int,
                               pMode: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraSetReverse(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetEffect(devnum: ::libc::c_int,
                              pMode: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraSetEffect(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetEV(devnum: ::libc::c_int, pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetEV(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetZoom(devnum: ::libc::c_int, pLevel: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetZoom(devnum: ::libc::c_int, level: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetAntiFlicker(devnum: ::libc::c_int,
                                   pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetAntiFlicker(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetISO(devnum: ::libc::c_int, pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetISO(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetGain(devnum: ::libc::c_int, pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetGain(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetWhiteBalance(devnum: ::libc::c_int,
                                    pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetWhiteBalance(devnum: ::libc::c_int,
                                    mode: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraGetBacklight(devnum: ::libc::c_int,
                                 pMode: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraSetBacklight(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetNightmode(devnum: ::libc::c_int,
                                 pMode: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraSetNightmode(devnum: ::libc::c_int, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraGetExposureCeiling(devnum: ::libc::c_int,
                                       pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetExposureCeiling(devnum: ::libc::c_int,
                                       mode: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraGetAutoControlHold(devnum: ::libc::c_int,
                                       pMode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCameraSetAutoControlHold(devnum: ::libc::c_int,
                                       mode: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCameraGetDeviceLocation(devnum: ::libc::c_int,
                                      pLocation: *mut SceFVector3)
     -> ::libc::c_int;
    pub fn _reclaim_reent(arg1: *mut _reent);
    pub fn memchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> ::libc::c_int;
    pub fn memcpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memmove(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t) -> *mut ::libc::c_void;
    pub fn memset(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_ulong;
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strlen(arg1: *const ::libc::c_char) -> ::libc::c_ulong;
    pub fn strncat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strncmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_int;
    pub fn strncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_ulong;
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strxfrm(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_ulong;
    pub fn strtok_r(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                arg3: size_t) -> ::libc::c_int;
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                 arg3: size_t);
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: size_t);
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn memccpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: ::libc::c_int, arg4: size_t) -> *mut ::libc::c_void;
    pub fn memrchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                   arg3: size_t) -> *mut ::libc::c_void;
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strcasecmp(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn _strdup_r(arg1: *mut _reent, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strndup(arg1: *const ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn _strndup_r(arg1: *mut _reent, arg2: *const ::libc::c_char,
                      arg3: size_t) -> *mut ::libc::c_char;
    pub fn strerror_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                      arg3: size_t) -> ::libc::c_int;
    pub fn _strerror_r(arg1: *mut _reent, arg2: ::libc::c_int,
                       arg3: ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strlcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_ulong;
    pub fn strlcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_ulong;
    pub fn strncasecmp(arg1: *const ::libc::c_char,
                       arg2: *const ::libc::c_char, arg3: size_t)
     -> ::libc::c_int;
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: size_t) -> size_t;
    pub fn strsep(arg1: *mut *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlwr(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strupr(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__signo: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn sceGxmInitialize(params: *const SceGxmInitializeParams)
     -> ::libc::c_int;
    pub fn sceGxmTerminate() -> ::libc::c_int;
    pub fn sceGxmGetNotificationRegion() -> *mut ::libc::c_uint;
    pub fn sceGxmNotificationWait(notification: *const SceGxmNotification)
     -> ::libc::c_int;
    pub fn sceGxmMapMemory(base: *mut ::libc::c_void, size: SceSize,
                           attr: SceGxmMemoryAttribFlags) -> ::libc::c_int;
    pub fn sceGxmUnmapMemory(base: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sceGxmMapVertexUsseMemory(base: *mut ::libc::c_void, size: SceSize,
                                     offset: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmUnmapVertexUsseMemory(base: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmMapFragmentUsseMemory(base: *mut ::libc::c_void,
                                       size: SceSize,
                                       offset: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmUnmapFragmentUsseMemory(base: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmDisplayQueueAddEntry(oldBuffer: *mut SceGxmSyncObject,
                                      newBuffer: *mut SceGxmSyncObject,
                                      callbackData: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmDisplayQueueFinish() -> ::libc::c_int;
    pub fn sceGxmSyncObjectCreate(syncObject: *mut *mut SceGxmSyncObject)
     -> ::libc::c_int;
    pub fn sceGxmSyncObjectDestroy(syncObject: *mut SceGxmSyncObject)
     -> ::libc::c_int;
    pub fn sceGxmCreateContext(params: *const SceGxmContextParams,
                               context: *mut *mut SceGxmContext)
     -> ::libc::c_int;
    pub fn sceGxmDestroyContext(context: *mut SceGxmContext) -> ::libc::c_int;
    pub fn sceGxmSetValidationEnable(context: *mut SceGxmContext,
                                     enable: SceBool);
    pub fn sceGxmSetVertexProgram(context: *mut SceGxmContext,
                                  vertexProgram: *const SceGxmVertexProgram);
    pub fn sceGxmSetFragmentProgram(context: *mut SceGxmContext,
                                    fragmentProgram:
                                        *const SceGxmFragmentProgram);
    pub fn sceGxmReserveVertexDefaultUniformBuffer(context:
                                                       *mut SceGxmContext,
                                                   uniformBuffer:
                                                       *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmReserveFragmentDefaultUniformBuffer(context:
                                                         *mut SceGxmContext,
                                                     uniformBuffer:
                                                         *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmSetVertexStream(context: *mut SceGxmContext,
                                 streamIndex: ::libc::c_uint,
                                 streamData: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmSetVertexTexture(context: *mut SceGxmContext,
                                  textureIndex: ::libc::c_uint,
                                  texture: *const SceGxmTexture)
     -> ::libc::c_int;
    pub fn sceGxmSetFragmentTexture(context: *mut SceGxmContext,
                                    textureIndex: ::libc::c_uint,
                                    texture: *const SceGxmTexture)
     -> ::libc::c_int;
    pub fn sceGxmSetVertexUniformBuffer(context: *mut SceGxmContext,
                                        bufferIndex: ::libc::c_uint,
                                        bufferData: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmSetFragmentUniformBuffer(context: *mut SceGxmContext,
                                          bufferIndex: ::libc::c_uint,
                                          bufferData: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmSetAuxiliarySurface(context: *mut SceGxmContext,
                                     surfaceIndex: ::libc::c_uint,
                                     surface: *const SceGxmAuxiliarySurface)
     -> ::libc::c_int;
    pub fn sceGxmSetPrecomputedFragmentState(context: *mut SceGxmContext,
                                             precomputedState:
                                                 *const SceGxmPrecomputedFragmentState);
    pub fn sceGxmSetPrecomputedVertexState(context: *mut SceGxmContext,
                                           precomputedState:
                                               *const SceGxmPrecomputedVertexState);
    pub fn sceGxmDrawPrecomputed(context: *mut SceGxmContext,
                                 precomputedDraw:
                                     *const SceGxmPrecomputedDraw)
     -> ::libc::c_int;
    pub fn sceGxmDraw(context: *mut SceGxmContext,
                      primType: SceGxmPrimitiveType,
                      indexType: SceGxmIndexFormat,
                      indexData: *const ::libc::c_void,
                      indexCount: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmDrawInstanced(context: *mut SceGxmContext,
                               primType: SceGxmPrimitiveType,
                               indexType: SceGxmIndexFormat,
                               indexData: *const ::libc::c_void,
                               indexCount: ::libc::c_uint,
                               indexWrap: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmSetVisibilityBuffer(context: *mut SceGxmContext,
                                     bufferBase: *mut ::libc::c_void,
                                     stridePerCore: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmBeginScene(context: *mut SceGxmContext,
                            flags: ::libc::c_uint,
                            renderTarget: *const SceGxmRenderTarget,
                            validRegion: *const SceGxmValidRegion,
                            vertexSyncObject: *mut SceGxmSyncObject,
                            fragmentSyncObject: *mut SceGxmSyncObject,
                            colorSurface: *const SceGxmColorSurface,
                            depthStencil: *const SceGxmDepthStencilSurface)
     -> ::libc::c_int;
    pub fn sceGxmMidSceneFlush(context: *mut SceGxmContext,
                               flags: ::libc::c_uint,
                               vertexSyncObject: *mut SceGxmSyncObject,
                               vertexNotification: *const SceGxmNotification)
     -> ::libc::c_int;
    pub fn sceGxmEndScene(context: *mut SceGxmContext,
                          vertexNotification: *const SceGxmNotification,
                          fragmentNotification: *const SceGxmNotification)
     -> ::libc::c_int;
    pub fn sceGxmSetFrontDepthFunc(context: *mut SceGxmContext,
                                   depthFunc: SceGxmDepthFunc);
    pub fn sceGxmSetBackDepthFunc(context: *mut SceGxmContext,
                                  depthFunc: SceGxmDepthFunc);
    pub fn sceGxmSetFrontFragmentProgramEnable(context: *mut SceGxmContext,
                                               enable:
                                                   SceGxmFragmentProgramMode);
    pub fn sceGxmSetBackFragmentProgramEnable(context: *mut SceGxmContext,
                                              enable:
                                                  SceGxmFragmentProgramMode);
    pub fn sceGxmSetFrontDepthWriteEnable(context: *mut SceGxmContext,
                                          enable: SceGxmDepthWriteMode);
    pub fn sceGxmSetBackDepthWriteEnable(context: *mut SceGxmContext,
                                         enable: SceGxmDepthWriteMode);
    pub fn sceGxmSetFrontLineFillLastPixelEnable(context: *mut SceGxmContext,
                                                 enable:
                                                     SceGxmLineFillLastPixelMode);
    pub fn sceGxmSetBackLineFillLastPixelEnable(context: *mut SceGxmContext,
                                                enable:
                                                    SceGxmLineFillLastPixelMode);
    pub fn sceGxmSetFrontStencilRef(context: *mut SceGxmContext,
                                    sref: ::libc::c_uint);
    pub fn sceGxmSetBackStencilRef(context: *mut SceGxmContext,
                                   sref: ::libc::c_uint);
    pub fn sceGxmSetFrontPointLineWidth(context: *mut SceGxmContext,
                                        width: ::libc::c_uint);
    pub fn sceGxmSetBackPointLineWidth(context: *mut SceGxmContext,
                                       width: ::libc::c_uint);
    pub fn sceGxmSetFrontPolygonMode(context: *mut SceGxmContext,
                                     mode: SceGxmPolygonMode);
    pub fn sceGxmSetBackPolygonMode(context: *mut SceGxmContext,
                                    mode: SceGxmPolygonMode);
    pub fn sceGxmSetFrontStencilFunc(context: *mut SceGxmContext,
                                     func: SceGxmStencilFunc,
                                     stencilFail: SceGxmStencilOp,
                                     depthFail: SceGxmStencilOp,
                                     depthPass: SceGxmStencilOp,
                                     compareMask: ::libc::c_uchar,
                                     writeMask: ::libc::c_uchar);
    pub fn sceGxmSetBackStencilFunc(context: *mut SceGxmContext,
                                    func: SceGxmStencilFunc,
                                    stencilFail: SceGxmStencilOp,
                                    depthFail: SceGxmStencilOp,
                                    depthPass: SceGxmStencilOp,
                                    compareMask: ::libc::c_uchar,
                                    writeMask: ::libc::c_uchar);
    pub fn sceGxmSetFrontDepthBias(context: *mut SceGxmContext,
                                   factor: ::libc::c_int,
                                   units: ::libc::c_int);
    pub fn sceGxmSetBackDepthBias(context: *mut SceGxmContext,
                                  factor: ::libc::c_int,
                                  units: ::libc::c_int);
    pub fn sceGxmSetTwoSidedEnable(context: *mut SceGxmContext,
                                   enable: SceGxmTwoSidedMode);
    pub fn sceGxmSetViewport(context: *mut SceGxmContext, xOffset: f32,
                             xScale: f32, yOffset: f32, yScale: f32,
                             zOffset: f32, zScale: f32);
    pub fn sceGxmSetWClampValue(context: *mut SceGxmContext, clampValue: f32);
    pub fn sceGxmSetWClampEnable(context: *mut SceGxmContext,
                                 enable: SceGxmWClampMode);
    pub fn sceGxmSetRegionClip(context: *mut SceGxmContext,
                               mode: SceGxmRegionClipMode,
                               xMin: ::libc::c_uint, yMin: ::libc::c_uint,
                               xMax: ::libc::c_uint, yMax: ::libc::c_uint);
    pub fn sceGxmSetCullMode(context: *mut SceGxmContext,
                             mode: SceGxmCullMode);
    pub fn sceGxmSetViewportEnable(context: *mut SceGxmContext,
                                   enable: SceGxmViewportMode);
    pub fn sceGxmSetWBufferEnable(context: *mut SceGxmContext,
                                  enable: SceGxmWBufferMode);
    pub fn sceGxmSetFrontVisibilityTestIndex(context: *mut SceGxmContext,
                                             index: ::libc::c_uint);
    pub fn sceGxmSetBackVisibilityTestIndex(context: *mut SceGxmContext,
                                            index: ::libc::c_uint);
    pub fn sceGxmSetFrontVisibilityTestOp(context: *mut SceGxmContext,
                                          op: SceGxmVisibilityTestOp);
    pub fn sceGxmSetBackVisibilityTestOp(context: *mut SceGxmContext,
                                         op: SceGxmVisibilityTestOp);
    pub fn sceGxmSetFrontVisibilityTestEnable(context: *mut SceGxmContext,
                                              enable:
                                                  SceGxmVisibilityTestMode);
    pub fn sceGxmSetBackVisibilityTestEnable(context: *mut SceGxmContext,
                                             enable:
                                                 SceGxmVisibilityTestMode);
    pub fn sceGxmFinish(context: *mut SceGxmContext);
    pub fn sceGxmPushUserMarker(context: *mut SceGxmContext,
                                tag: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceGxmPopUserMarker(context: *mut SceGxmContext) -> ::libc::c_int;
    pub fn sceGxmSetUserMarker(context: *mut SceGxmContext,
                               tag: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceGxmPadHeartbeat(displaySurface: *const SceGxmColorSurface,
                              displaySyncObject: *mut SceGxmSyncObject)
     -> ::libc::c_int;
    pub fn sceGxmPadTriggerGpuPaTrace() -> ::libc::c_int;
    pub fn sceGxmColorSurfaceInit(surface: *mut SceGxmColorSurface,
                                  colorFormat: SceGxmColorFormat,
                                  surfaceType: SceGxmColorSurfaceType,
                                  scaleMode: SceGxmColorSurfaceScaleMode,
                                  outputRegisterSize:
                                      SceGxmOutputRegisterSize,
                                  width: ::libc::c_uint,
                                  height: ::libc::c_uint,
                                  strideInPixels: ::libc::c_uint,
                                  data: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sceGxmColorSurfaceInitDisabled(surface: *mut SceGxmColorSurface)
     -> ::libc::c_int;
    pub fn sceGxmColorSurfaceIsEnabled(surface: *const SceGxmColorSurface)
     -> SceBool;
    pub fn sceGxmColorSurfaceGetClip(surface: *const SceGxmColorSurface,
                                     xMin: *mut ::libc::c_uint,
                                     yMin: *mut ::libc::c_uint,
                                     xMax: *mut ::libc::c_uint,
                                     yMax: *mut ::libc::c_uint);
    pub fn sceGxmColorSurfaceSetClip(surface: *mut SceGxmColorSurface,
                                     xMin: ::libc::c_uint,
                                     yMin: ::libc::c_uint,
                                     xMax: ::libc::c_uint,
                                     yMax: ::libc::c_uint);
    pub fn sceGxmColorSurfaceGetScaleMode(surface: *const SceGxmColorSurface)
     -> SceGxmColorSurfaceScaleMode;
    pub fn sceGxmColorSurfaceSetScaleMode(surface: *mut SceGxmColorSurface,
                                          scaleMode:
                                              SceGxmColorSurfaceScaleMode);
    pub fn sceGxmColorSurfaceGetData(surface: *const SceGxmColorSurface)
     -> *mut ::libc::c_void;
    pub fn sceGxmColorSurfaceSetData(surface: *mut SceGxmColorSurface,
                                     data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmColorSurfaceGetFormat(surface: *const SceGxmColorSurface)
     -> SceGxmColorFormat;
    pub fn sceGxmColorSurfaceSetFormat(surface: *mut SceGxmColorSurface,
                                       format: SceGxmColorFormat)
     -> ::libc::c_int;
    pub fn sceGxmColorSurfaceGetType(surface: *const SceGxmColorSurface)
     -> SceGxmColorSurfaceType;
    pub fn sceGxmColorSurfaceGetStrideInPixels(surface:
                                                   *const SceGxmColorSurface)
     -> ::libc::c_uint;
    pub fn sceGxmDepthStencilSurfaceInit(surface:
                                             *mut SceGxmDepthStencilSurface,
                                         depthStencilFormat:
                                             SceGxmDepthStencilFormat,
                                         surfaceType:
                                             SceGxmDepthStencilSurfaceType,
                                         strideInSamples: ::libc::c_uint,
                                         depthData: *mut ::libc::c_void,
                                         stencilData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmDepthStencilSurfaceInitDisabled(surface:
                                                     *mut SceGxmDepthStencilSurface)
     -> ::libc::c_int;
    pub fn sceGxmDepthStencilSurfaceGetBackgroundDepth(surface:
                                                           *const SceGxmDepthStencilSurface)
     -> f32;
    pub fn sceGxmDepthStencilSurfaceSetBackgroundDepth(surface:
                                                           *mut SceGxmDepthStencilSurface,
                                                       backgroundDepth: f32);
    pub fn sceGxmDepthStencilSurfaceGetBackgroundStencil(surface:
                                                             *const SceGxmDepthStencilSurface)
     -> ::libc::c_uchar;
    pub fn sceGxmDepthStencilSurfaceSetBackgroundStencil(surface:
                                                             *mut SceGxmDepthStencilSurface,
                                                         backgroundStencil:
                                                             ::libc::c_uchar);
    pub fn sceGxmDepthStencilSurfaceIsEnabled(surface:
                                                  *const SceGxmDepthStencilSurface)
     -> SceBool;
    pub fn sceGxmDepthStencilSurfaceSetForceLoadMode(surface:
                                                         *mut SceGxmDepthStencilSurface,
                                                     forceLoad:
                                                         SceGxmDepthStencilForceLoadMode);
    pub fn sceGxmDepthStencilSurfaceGetForceLoadMode(surface:
                                                         *const SceGxmDepthStencilSurface)
     -> SceGxmDepthStencilForceLoadMode;
    pub fn sceGxmDepthStencilSurfaceSetForceStoreMode(surface:
                                                          *mut SceGxmDepthStencilSurface,
                                                      forceStore:
                                                          SceGxmDepthStencilForceStoreMode);
    pub fn sceGxmDepthStencilSurfaceGetForceStoreMode(surface:
                                                          *const SceGxmDepthStencilSurface)
     -> SceGxmDepthStencilForceStoreMode;
    pub fn sceGxmColorSurfaceGetGammaMode(surface: *const SceGxmColorSurface)
     -> SceGxmColorSurfaceGammaMode;
    pub fn sceGxmColorSurfaceSetGammaMode(surface: *mut SceGxmColorSurface,
                                          gammaMode:
                                              SceGxmColorSurfaceGammaMode)
     -> ::libc::c_int;
    pub fn sceGxmColorSurfaceGetDitherMode(surface: *const SceGxmColorSurface)
     -> SceGxmColorSurfaceDitherMode;
    pub fn sceGxmColorSurfaceSetDitherMode(surface: *mut SceGxmColorSurface,
                                           ditherMode:
                                               SceGxmColorSurfaceDitherMode)
     -> ::libc::c_int;
    pub fn sceGxmDepthStencilSurfaceGetFormat(surface:
                                                  *const SceGxmDepthStencilSurface)
     -> SceGxmDepthStencilFormat;
    pub fn sceGxmDepthStencilSurfaceGetStrideInSamples(surface:
                                                           *const SceGxmDepthStencilSurface)
     -> ::libc::c_uint;
    pub fn sceGxmProgramCheck(program: *const SceGxmProgram) -> ::libc::c_int;
    pub fn sceGxmProgramGetSize(program: *const SceGxmProgram)
     -> ::libc::c_uint;
    pub fn sceGxmProgramGetType(program: *const SceGxmProgram)
     -> SceGxmProgramType;
    pub fn sceGxmProgramIsDiscardUsed(program: *const SceGxmProgram)
     -> SceBool;
    pub fn sceGxmProgramIsDepthReplaceUsed(program: *const SceGxmProgram)
     -> SceBool;
    pub fn sceGxmProgramIsSpriteCoordUsed(program: *const SceGxmProgram)
     -> SceBool;
    pub fn sceGxmProgramGetDefaultUniformBufferSize(program:
                                                        *const SceGxmProgram)
     -> ::libc::c_uint;
    pub fn sceGxmProgramGetParameterCount(program: *const SceGxmProgram)
     -> ::libc::c_uint;
    pub fn sceGxmProgramGetParameter(program: *const SceGxmProgram,
                                     index: ::libc::c_uint)
     -> *const SceGxmProgramParameter;
    pub fn sceGxmProgramFindParameterByName(program: *const SceGxmProgram,
                                            name: *const ::libc::c_char)
     -> *const SceGxmProgramParameter;
    pub fn sceGxmProgramFindParameterBySemantic(program: *const SceGxmProgram,
                                                semantic:
                                                    SceGxmParameterSemantic,
                                                index: ::libc::c_uint)
     -> *const SceGxmProgramParameter;
    pub fn sceGxmProgramParameterGetIndex(program: *const SceGxmProgram,
                                          parameter:
                                              *const SceGxmProgramParameter)
     -> ::libc::c_uint;
    pub fn sceGxmProgramParameterGetCategory(parameter:
                                                 *const SceGxmProgramParameter)
     -> SceGxmParameterCategory;
    pub fn sceGxmProgramParameterGetName(parameter:
                                             *const SceGxmProgramParameter)
     -> *const ::libc::c_char;
    pub fn sceGxmProgramParameterGetSemantic(parameter:
                                                 *const SceGxmProgramParameter)
     -> SceGxmParameterSemantic;
    pub fn sceGxmProgramParameterGetSemanticIndex(parameter:
                                                      *const SceGxmProgramParameter)
     -> ::libc::c_uint;
    pub fn sceGxmProgramParameterGetType(parameter:
                                             *const SceGxmProgramParameter)
     -> SceGxmParameterType;
    pub fn sceGxmProgramParameterGetComponentCount(parameter:
                                                       *const SceGxmProgramParameter)
     -> ::libc::c_uint;
    pub fn sceGxmProgramParameterGetArraySize(parameter:
                                                  *const SceGxmProgramParameter)
     -> ::libc::c_uint;
    pub fn sceGxmProgramParameterGetResourceIndex(parameter:
                                                      *const SceGxmProgramParameter)
     -> ::libc::c_uint;
    pub fn sceGxmProgramParameterGetContainerIndex(parameter:
                                                       *const SceGxmProgramParameter)
     -> ::libc::c_uint;
    pub fn sceGxmProgramParameterIsSamplerCube(parameter:
                                                   *const SceGxmProgramParameter)
     -> SceBool;
    pub fn sceGxmFragmentProgramGetProgram(fragmentProgram:
                                               *const SceGxmFragmentProgram)
     -> *const SceGxmProgram;
    pub fn sceGxmVertexProgramGetProgram(vertexProgram:
                                             *const SceGxmVertexProgram)
     -> *const SceGxmProgram;
    pub fn sceGxmShaderPatcherCreate(params: *const SceGxmShaderPatcherParams,
                                     shaderPatcher:
                                         *mut *mut SceGxmShaderPatcher)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherSetUserData(shaderPatcher:
                                              *mut SceGxmShaderPatcher,
                                          userData: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherGetUserData(shaderPatcher:
                                              *mut SceGxmShaderPatcher)
     -> *mut ::libc::c_void;
    pub fn sceGxmShaderPatcherDestroy(shaderPatcher: *mut SceGxmShaderPatcher)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherRegisterProgram(shaderPatcher:
                                                  *mut SceGxmShaderPatcher,
                                              programHeader:
                                                  *const SceGxmProgram,
                                              programId:
                                                  *mut SceGxmShaderPatcherId)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherUnregisterProgram(shaderPatcher:
                                                    *mut SceGxmShaderPatcher,
                                                programId:
                                                    SceGxmShaderPatcherId)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherGetProgramFromId(programId:
                                                   SceGxmShaderPatcherId)
     -> *const SceGxmProgram;
    pub fn sceGxmShaderPatcherSetAuxiliarySurface(shaderPatcher:
                                                      *mut SceGxmShaderPatcher,
                                                  auxSurfaceIndex:
                                                      ::libc::c_uint,
                                                  auxSurface:
                                                      *const SceGxmAuxiliarySurface)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherCreateVertexProgram(shaderPatcher:
                                                      *mut SceGxmShaderPatcher,
                                                  programId:
                                                      SceGxmShaderPatcherId,
                                                  attributes:
                                                      *const SceGxmVertexAttribute,
                                                  attributeCount:
                                                      ::libc::c_uint,
                                                  streams:
                                                      *const SceGxmVertexStream,
                                                  streamCount: ::libc::c_uint,
                                                  vertexProgram:
                                                      *mut *mut SceGxmVertexProgram)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherCreateFragmentProgram(shaderPatcher:
                                                        *mut SceGxmShaderPatcher,
                                                    programId:
                                                        SceGxmShaderPatcherId,
                                                    outputFormat:
                                                        SceGxmOutputRegisterFormat,
                                                    multisampleMode:
                                                        SceGxmMultisampleMode,
                                                    blendInfo:
                                                        *const SceGxmBlendInfo,
                                                    vertexProgram:
                                                        *const SceGxmProgram,
                                                    fragmentProgram:
                                                        *mut *mut SceGxmFragmentProgram)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherAddRefVertexProgram(shaderPatcher:
                                                      *mut SceGxmShaderPatcher,
                                                  vertexProgram:
                                                      *mut SceGxmVertexProgram)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherAddRefFragmentProgram(shaderPatcher:
                                                        *mut SceGxmShaderPatcher,
                                                    fragmentProgram:
                                                        *mut SceGxmFragmentProgram)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherReleaseVertexProgram(shaderPatcher:
                                                       *mut SceGxmShaderPatcher,
                                                   vertexProgram:
                                                       *mut SceGxmVertexProgram)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherReleaseFragmentProgram(shaderPatcher:
                                                         *mut SceGxmShaderPatcher,
                                                     fragmentProgram:
                                                         *mut SceGxmFragmentProgram)
     -> ::libc::c_int;
    pub fn sceGxmShaderPatcherGetHostMemAllocated(shaderPatcher:
                                                      *const SceGxmShaderPatcher)
     -> ::libc::c_uint;
    pub fn sceGxmShaderPatcherGetBufferMemAllocated(shaderPatcher:
                                                        *const SceGxmShaderPatcher)
     -> ::libc::c_uint;
    pub fn sceGxmShaderPatcherGetVertexUsseMemAllocated(shaderPatcher:
                                                            *const SceGxmShaderPatcher)
     -> ::libc::c_uint;
    pub fn sceGxmShaderPatcherGetFragmentUsseMemAllocated(shaderPatcher:
                                                              *const SceGxmShaderPatcher)
     -> ::libc::c_uint;
    pub fn sceGxmTextureInitSwizzled(texture: *mut SceGxmTexture,
                                     data: *const ::libc::c_void,
                                     texFormat: SceGxmTextureFormat,
                                     width: ::libc::c_uint,
                                     height: ::libc::c_uint,
                                     mipCount: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmTextureInitLinear(texture: *mut SceGxmTexture,
                                   data: *const ::libc::c_void,
                                   texFormat: SceGxmTextureFormat,
                                   width: ::libc::c_uint,
                                   height: ::libc::c_uint,
                                   mipCount: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmTextureInitLinearStrided(texture: *mut SceGxmTexture,
                                          data: *const ::libc::c_void,
                                          texFormat: SceGxmTextureFormat,
                                          width: ::libc::c_uint,
                                          height: ::libc::c_uint,
                                          byteStride: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmTextureInitTiled(texture: *mut SceGxmTexture,
                                  data: *const ::libc::c_void,
                                  texFormat: SceGxmTextureFormat,
                                  width: ::libc::c_uint,
                                  height: ::libc::c_uint,
                                  mipCount: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmTextureInitCube(texture: *mut SceGxmTexture,
                                 data: *const ::libc::c_void,
                                 texFormat: SceGxmTextureFormat,
                                 width: ::libc::c_uint,
                                 height: ::libc::c_uint,
                                 mipCount: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmTextureGetType(texture: *const SceGxmTexture)
     -> SceGxmTextureType;
    pub fn sceGxmTextureSetMinFilter(texture: *mut SceGxmTexture,
                                     minFilter: SceGxmTextureFilter)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetMinFilter(texture: *const SceGxmTexture)
     -> SceGxmTextureFilter;
    pub fn sceGxmTextureSetMagFilter(texture: *mut SceGxmTexture,
                                     magFilter: SceGxmTextureFilter)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetMagFilter(texture: *const SceGxmTexture)
     -> SceGxmTextureFilter;
    pub fn sceGxmTextureSetMipFilter(texture: *mut SceGxmTexture,
                                     mipFilter: SceGxmTextureMipFilter)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetMipFilter(texture: *const SceGxmTexture)
     -> SceGxmTextureMipFilter;
    pub fn sceGxmTextureSetAnisoMode(texture: *mut SceGxmTexture,
                                     anisoMode: SceGxmTextureAnisoMode)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetAnisoMode(texture: *const SceGxmTexture)
     -> SceGxmTextureAnisoMode;
    pub fn sceGxmTextureSetUAddrMode(texture: *mut SceGxmTexture,
                                     addrMode: SceGxmTextureAddrMode)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetUAddrMode(texture: *const SceGxmTexture)
     -> SceGxmTextureAddrMode;
    pub fn sceGxmTextureSetVAddrMode(texture: *mut SceGxmTexture,
                                     addrMode: SceGxmTextureAddrMode)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetVAddrMode(texture: *const SceGxmTexture)
     -> SceGxmTextureAddrMode;
    pub fn sceGxmTextureSetFormat(texture: *mut SceGxmTexture,
                                  texFormat: SceGxmTextureFormat)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetFormat(texture: *const SceGxmTexture)
     -> SceGxmTextureFormat;
    pub fn sceGxmTextureSetLodBias(texture: *mut SceGxmTexture,
                                   bias: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmTextureGetLodBias(texture: *const SceGxmTexture)
     -> ::libc::c_uint;
    pub fn sceGxmTextureSetStride(texture: *mut SceGxmTexture,
                                  byteStride: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetStride(texture: *const SceGxmTexture)
     -> ::libc::c_uint;
    pub fn sceGxmTextureSetWidth(texture: *mut SceGxmTexture,
                                 width: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmTextureGetWidth(texture: *const SceGxmTexture)
     -> ::libc::c_uint;
    pub fn sceGxmTextureSetHeight(texture: *mut SceGxmTexture,
                                  height: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceGxmTextureGetHeight(texture: *const SceGxmTexture)
     -> ::libc::c_uint;
    pub fn sceGxmTextureSetData(texture: *mut SceGxmTexture,
                                data: *const ::libc::c_void) -> ::libc::c_int;
    pub fn sceGxmTextureGetData(texture: *const SceGxmTexture)
     -> *mut ::libc::c_void;
    pub fn sceGxmTextureSetMipmapCount(texture: *mut SceGxmTexture,
                                       mipCount: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetMipmapCount(texture: *const SceGxmTexture)
     -> ::libc::c_uint;
    pub fn sceGxmTextureSetPalette(texture: *mut SceGxmTexture,
                                   paletteData: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmTextureGetPalette(texture: *const SceGxmTexture)
     -> *mut ::libc::c_void;
    pub fn sceGxmTextureGetGammaMode(texture: *const SceGxmTexture)
     -> SceGxmTextureGammaMode;
    pub fn sceGxmTextureSetGammaMode(texture: *mut SceGxmTexture,
                                     gammaMode: SceGxmTextureGammaMode)
     -> ::libc::c_int;
    pub fn sceGxmGetPrecomputedVertexStateSize(vertexProgram:
                                                   *const SceGxmVertexProgram)
     -> ::libc::c_uint;
    pub fn sceGxmPrecomputedVertexStateInit(precomputedState:
                                                *mut SceGxmPrecomputedVertexState,
                                            vertexProgram:
                                                *const SceGxmVertexProgram,
                                            memBlock: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedVertexStateSetDefaultUniformBuffer(precomputedState:
                                                                   *mut SceGxmPrecomputedVertexState,
                                                               defaultBuffer:
                                                                   *mut ::libc::c_void);
    pub fn sceGxmPrecomputedVertexStateGetDefaultUniformBuffer(precomputedState:
                                                                   *const SceGxmPrecomputedVertexState)
     -> *mut ::libc::c_void;
    pub fn sceGxmPrecomputedVertexStateSetAllTextures(precomputedState:
                                                          *mut SceGxmPrecomputedVertexState,
                                                      textures:
                                                          *const SceGxmTexture)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedVertexStateSetTexture(precomputedState:
                                                      *mut SceGxmPrecomputedVertexState,
                                                  textureIndex:
                                                      ::libc::c_uint,
                                                  texture:
                                                      *const SceGxmTexture)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedVertexStateSetAllUniformBuffers(precomputedState:
                                                                *mut SceGxmPrecomputedVertexState,
                                                            bufferDataArray:
                                                                *const *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedVertexStateSetUniformBuffer(precomputedState:
                                                            *mut SceGxmPrecomputedVertexState,
                                                        bufferIndex:
                                                            ::libc::c_uint,
                                                        bufferData:
                                                            *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmGetPrecomputedFragmentStateSize(fragmentProgram:
                                                     *const SceGxmFragmentProgram)
     -> ::libc::c_uint;
    pub fn sceGxmPrecomputedFragmentStateInit(precomputedState:
                                                  *mut SceGxmPrecomputedFragmentState,
                                              fragmentProgram:
                                                  *const SceGxmFragmentProgram,
                                              memBlock: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer(precomputedState:
                                                                     *mut SceGxmPrecomputedFragmentState,
                                                                 defaultBuffer:
                                                                     *mut ::libc::c_void);
    pub fn sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer(precomputedState:
                                                                     *const SceGxmPrecomputedFragmentState)
     -> *mut ::libc::c_void;
    pub fn sceGxmPrecomputedFragmentStateSetAllTextures(precomputedState:
                                                            *mut SceGxmPrecomputedFragmentState,
                                                        textureArray:
                                                            *const SceGxmTexture)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedFragmentStateSetTexture(precomputedState:
                                                        *mut SceGxmPrecomputedFragmentState,
                                                    textureIndex:
                                                        ::libc::c_uint,
                                                    texture:
                                                        *const SceGxmTexture)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedFragmentStateSetAllUniformBuffers(precomputedState:
                                                                  *mut SceGxmPrecomputedFragmentState,
                                                              bufferDataArray:
                                                                  *const *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedFragmentStateSetUniformBuffer(precomputedState:
                                                              *mut SceGxmPrecomputedFragmentState,
                                                          bufferIndex:
                                                              ::libc::c_uint,
                                                          bufferData:
                                                              *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces(precomputedState:
                                                                     *mut SceGxmPrecomputedFragmentState,
                                                                 auxSurfaceArray:
                                                                     *const SceGxmAuxiliarySurface)
     -> ::libc::c_int;
    pub fn sceGxmGetPrecomputedDrawSize(vertexProgram:
                                            *const SceGxmVertexProgram)
     -> ::libc::c_uint;
    pub fn sceGxmPrecomputedDrawInit(precomputedDraw:
                                         *mut SceGxmPrecomputedDraw,
                                     vertexProgram:
                                         *const SceGxmVertexProgram,
                                     memBlock: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedDrawSetAllVertexStreams(precomputedDraw:
                                                        *mut SceGxmPrecomputedDraw,
                                                    streamDataArray:
                                                        *const *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedDrawSetVertexStream(precomputedDraw:
                                                    *mut SceGxmPrecomputedDraw,
                                                streamIndex: ::libc::c_uint,
                                                streamData:
                                                    *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmPrecomputedDrawSetParams(precomputedDraw:
                                              *mut SceGxmPrecomputedDraw,
                                          primType: SceGxmPrimitiveType,
                                          indexType: SceGxmIndexFormat,
                                          indexData: *const ::libc::c_void,
                                          indexCount: ::libc::c_uint);
    pub fn sceGxmPrecomputedDrawSetParamsInstanced(precomputedDraw:
                                                       *mut SceGxmPrecomputedDraw,
                                                   primType:
                                                       SceGxmPrimitiveType,
                                                   indexType:
                                                       SceGxmIndexFormat,
                                                   indexData:
                                                       *const ::libc::c_void,
                                                   indexCount: ::libc::c_uint,
                                                   indexWrap: ::libc::c_uint);
    pub fn sceGxmGetRenderTargetMemSizes(params:
                                             *const SceGxmRenderTargetParams,
                                         hostMemSize: *mut ::libc::c_uint,
                                         driverMemSize: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceGxmCreateRenderTarget(params: *const SceGxmRenderTargetParams,
                                    renderTarget:
                                        *mut *mut SceGxmRenderTarget)
     -> ::libc::c_int;
    pub fn sceGxmRenderTargetGetHostMem(renderTarget:
                                            *const SceGxmRenderTarget,
                                        hostMem: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceGxmRenderTargetGetDriverMemBlock(renderTarget:
                                                   *const SceGxmRenderTarget,
                                               driverMemBlock: *mut SceUID)
     -> ::libc::c_int;
    pub fn sceGxmDestroyRenderTarget(renderTarget: *mut SceGxmRenderTarget)
     -> ::libc::c_int;
    pub fn sceGxmSetUniformDataF(uniformBuffer: *mut ::libc::c_void,
                                 parameter: *const SceGxmProgramParameter,
                                 componentOffset: ::libc::c_uint,
                                 componentCount: ::libc::c_uint,
                                 sourceData: *const f32) -> ::libc::c_int;
    pub fn sceCommonDialogSetConfigParam(configParam:
                                             *const SceCommonDialogConfigParam)
     -> ::libc::c_int;
    pub fn sceCommonDialogUpdate(updateParam:
                                     *const SceCommonDialogUpdateParam)
     -> ::libc::c_int;
    pub fn sceCtrlSetSamplingMode(mode: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCtrlGetSamplingMode(pMode: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceCtrlPeekBufferPositive(port: ::libc::c_int,
                                     pad_data: *mut SceCtrlData,
                                     count: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCtrlPeekBufferNegative(port: ::libc::c_int,
                                     pad_data: *mut SceCtrlData,
                                     count: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCtrlReadBufferPositive(port: ::libc::c_int,
                                     pad_data: *mut SceCtrlData,
                                     count: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCtrlReadBufferNegative(port: ::libc::c_int,
                                     pad_data: *mut SceCtrlData,
                                     count: ::libc::c_int) -> ::libc::c_int;
    pub fn sceCtrlSetRapidFire(port: ::libc::c_int, idx: ::libc::c_int,
                               pRule: *const SceCtrlRapidFireRule)
     -> ::libc::c_int;
    pub fn sceCtrlClearRapidFire(port: ::libc::c_int, idx: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceCtrlSetActuator(port: ::libc::c_int,
                              pState: *const SceCtrlActuator)
     -> ::libc::c_int;
    pub fn sceCtrlSetLightBar(port: ::libc::c_int, r: SceUInt8, g: SceUInt8,
                              b: SceUInt8) -> ::libc::c_int;
    pub fn sceDisplaySetFrameBuf(pParam: *const SceDisplayFrameBuf,
                                 sync: ::libc::c_int) -> ::libc::c_int;
    pub fn sceDisplayGetFrameBuf(pParam: *mut SceDisplayFrameBuf,
                                 sync: ::libc::c_int) -> ::libc::c_int;
    pub fn sceDisplayGetRefreshRate(pFps: *mut f32) -> ::libc::c_int;
    pub fn sceDisplayGetVcount() -> ::libc::c_int;
    pub fn sceDisplayWaitVblankStart() -> ::libc::c_int;
    pub fn sceDisplayWaitVblankStartCB() -> ::libc::c_int;
    pub fn sceDisplayWaitVblankStartMulti(vcount: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceDisplayWaitVblankStartMultiCB(vcount: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceDisplayWaitSetFrameBuf() -> ::libc::c_int;
    pub fn sceDisplayWaitSetFrameBufCB() -> ::libc::c_int;
    pub fn sceDisplayWaitSetFrameBufMulti(vcount: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceDisplayWaitSetFrameBufMultiCB(vcount: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceDisplayRegisterVblankStartCallback(uid: SceUID)
     -> ::libc::c_int;
    pub fn sceDisplayUnregisterVblankStartCallback(uid: SceUID)
     -> ::libc::c_int;
    pub fn _sceFiberInitializeImpl(fiber: *mut SceFiber,
                                   name: *mut ::libc::c_char,
                                   entry: SceFiberEntry,
                                   argOnInitialize: SceUInt32,
                                   addrContext: *mut ::libc::c_void,
                                   sizeContext: SceSize,
                                   params: *mut SceFiberOptParam) -> SceInt32;
    pub fn _sceFiberOptParamInitialize(optParam: *mut SceFiberOptParam)
     -> SceInt32;
    pub fn sceFiberFinalize(fiber: *mut SceFiber) -> SceInt32;
    pub fn sceFiberRun(fiber: *mut SceFiber, argOnRunTo: SceUInt32,
                       argOnRun: *mut SceUInt32) -> SceInt32;
    pub fn sceFiberSwitch(fiber: *mut SceFiber, argOnRunTo: SceUInt32,
                          argOnRun: *mut SceUInt32) -> SceInt32;
    pub fn sceFiberGetSelf(fiber: *mut SceFiber) -> SceInt32;
    pub fn sceFiberReturnToThread(argOnReturn: SceUInt32,
                                  argOnRun: *mut SceUInt32) -> SceInt32;
    pub fn sceFiberGetInfo(fiber: *mut SceFiber, fiberInfo: *mut SceFiberInfo)
     -> SceInt32;
    pub fn sceGxtCheckData(gxt: *const ::libc::c_void) -> SceGxtErrorCode;
    pub fn sceGxtGetDataAddress(gxt: *const ::libc::c_void)
     -> *const ::libc::c_void;
    pub fn sceGxtGetDataSize(gxt: *const ::libc::c_void) -> uint32_t;
    pub fn sceGxtGetHeaderSize(gxt: *const ::libc::c_void) -> uint32_t;
    pub fn sceGxtGetTextureCount(gxt: *const ::libc::c_void) -> uint32_t;
    pub fn sceGxtSetPalette(texture: *mut SceGxmTexture,
                            gxt: *const ::libc::c_void,
                            textureData: *const ::libc::c_void,
                            paletteIndex: uint32_t) -> SceGxtErrorCode;
    pub fn sceImeDialogInit(param: *const SceImeDialogParam) -> SceInt32;
    pub fn sceImeDialogGetStatus() -> SceCommonDialogStatus;
    pub fn sceImeDialogAbort() -> SceInt32;
    pub fn sceImeDialogGetResult(result: *mut SceImeDialogResult) -> SceInt32;
    pub fn sceImeDialogTerm() -> SceInt32;
    pub fn clock() -> clock_t;
    pub fn difftime(_time2: time_t, _time1: time_t) -> f64;
    pub fn mktime(_timeptr: *mut tm) -> time_t;
    pub fn time(_timer: *mut time_t) -> time_t;
    pub fn asctime(_tblock: *const tm) -> *mut ::libc::c_char;
    pub fn ctime(_time: *const time_t) -> *mut ::libc::c_char;
    pub fn gmtime(_timer: *const time_t) -> *mut tm;
    pub fn localtime(_timer: *const time_t) -> *mut tm;
    pub fn strftime(_s: *mut ::libc::c_char, _maxsize: size_t,
                    _fmt: *const ::libc::c_char, _t: *const tm) -> size_t;
    pub fn asctime_r(arg1: *const tm, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
    pub fn strptime(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut tm) -> *mut ::libc::c_char;
    pub fn tzset();
    pub fn _tzset_r(arg1: *mut _reent);
    pub fn __gettzinfo() -> *mut __tzinfo_type;
    pub fn sceRtcGetTickResolution() -> ::libc::c_uint;
    pub fn sceRtcGetCurrentTick(tick: *mut SceRtcTick) -> ::libc::c_int;
    pub fn sceRtcGetCurrentClock(time: *mut SceDateTime,
                                 time_zone: ::libc::c_int) -> ::libc::c_int;
    pub fn sceRtcGetCurrentClockLocalTime(time: *mut SceDateTime)
     -> ::libc::c_int;
    pub fn sceRtcGetCurrentNetworkTick(tick: *mut SceRtcTick)
     -> ::libc::c_int;
    pub fn sceRtcConvertUtcToLocalTime(utc: *const SceRtcTick,
                                       local_time: *mut SceRtcTick)
     -> ::libc::c_int;
    pub fn sceRtcConvertLocalTimeToUtc(local_time: *const SceRtcTick,
                                       utc: *mut SceRtcTick) -> ::libc::c_int;
    pub fn sceRtcIsLeapYear(year: ::libc::c_int) -> ::libc::c_int;
    pub fn sceRtcCheckValid(time: *const SceDateTime) -> ::libc::c_int;
    pub fn sceRtcGetDaysInMonth(year: ::libc::c_int, month: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcGetDayOfWeek(year: ::libc::c_int, month: ::libc::c_int,
                              day: ::libc::c_int) -> ::libc::c_int;
    pub fn sceRtcSetTime_t(time: *mut SceDateTime, iTime: time_t)
     -> ::libc::c_int;
    pub fn sceRtcSetTime64_t(time: *mut SceDateTime, ullTime: SceUInt64)
     -> ::libc::c_int;
    pub fn sceRtcGetTime_t(time: *const SceDateTime, piTime: *mut time_t)
     -> ::libc::c_int;
    pub fn sceRtcGetTime64_t(time: *const SceDateTime,
                             pullTime: *mut SceUInt64) -> ::libc::c_int;
    pub fn sceRtcSetDosTime(time: *mut SceDateTime, uiDosTime: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceRtcGetDosTime(time: *const SceDateTime,
                            puiDosTime: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceRtcSetWin32FileTime(time: *mut SceDateTime,
                                  ulWin32Time: SceUInt64) -> ::libc::c_int;
    pub fn sceRtcGetWin32FileTime(time: *const SceDateTime,
                                  ulWin32Time: *mut SceUInt64)
     -> ::libc::c_int;
    pub fn sceRtcSetTick(time: *mut SceDateTime, tick: *const SceRtcTick)
     -> ::libc::c_int;
    pub fn sceRtcGetTick(time: *const SceDateTime, tick: *mut SceRtcTick)
     -> ::libc::c_int;
    pub fn sceRtcCompareTick(pTick1: *const SceRtcTick,
                             pTick2: *const SceRtcTick) -> ::libc::c_int;
    pub fn sceRtcTickAddTicks(pTick0: *mut SceRtcTick,
                              pTick1: *const SceRtcTick, lAdd: SceLong64)
     -> ::libc::c_int;
    pub fn sceRtcTickAddMicroseconds(pTick0: *mut SceRtcTick,
                                     pTick1: *const SceRtcTick,
                                     lAdd: SceLong64) -> ::libc::c_int;
    pub fn sceRtcTickAddSeconds(pTick0: *mut SceRtcTick,
                                pTick1: *const SceRtcTick, lAdd: SceLong64)
     -> ::libc::c_int;
    pub fn sceRtcTickAddMinutes(pTick0: *mut SceRtcTick,
                                pTick1: *const SceRtcTick, lAdd: SceLong64)
     -> ::libc::c_int;
    pub fn sceRtcTickAddHours(pTick0: *mut SceRtcTick,
                              pTick1: *const SceRtcTick, lAdd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcTickAddDays(pTick0: *mut SceRtcTick,
                             pTick1: *const SceRtcTick, lAdd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcTickAddWeeks(pTick0: *mut SceRtcTick,
                              pTick1: *const SceRtcTick, lAdd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcTickAddMonths(pTick0: *mut SceRtcTick,
                               pTick1: *const SceRtcTick, lAdd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcTickAddYears(pTick0: *mut SceRtcTick,
                              pTick1: *const SceRtcTick, lAdd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcFormatRFC2822(pszDateTime: *mut ::libc::c_char,
                               utc: *const SceRtcTick,
                               iTimeZoneMinutes: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcFormatRFC2822LocalTime(pszDateTime: *mut ::libc::c_char,
                                        utc: *const SceRtcTick)
     -> ::libc::c_int;
    pub fn sceRtcFormatRFC3339(pszDateTime: *mut ::libc::c_char,
                               utc: *const SceRtcTick,
                               iTimeZoneMinutes: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceRtcFormatRFC3339LocalTime(pszDateTime: *mut ::libc::c_char,
                                        utc: *const SceRtcTick)
     -> ::libc::c_int;
    pub fn sceRtcParseDateTime(utc: *mut SceRtcTick,
                               pszDateTime: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceRtcParseRFC3339(utc: *mut SceRtcTick,
                              pszDateTime: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceSslInit(poolSize: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceSslTerm() -> ::libc::c_int;
    pub fn sceSslGetMemoryPoolStats(currentStat: *mut SceSslMemoryPoolStats)
     -> ::libc::c_int;
    pub fn sceSslGetSerialNumber(sslCert: *mut SceSslCert,
                                 sboData: *mut *const ::libc::c_char,
                                 sboLen: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceSslGetNotBefore(sslCert: *mut SceSslCert,
                              begin: *mut SceRtcTick) -> ::libc::c_int;
    pub fn sceSslGetNotAfter(sslCert: *mut SceSslCert, limit: *mut SceRtcTick)
     -> ::libc::c_int;
    pub fn sceSslGetNameEntryCount(certName: *mut SceSslCertName)
     -> ::libc::c_int;
    pub fn sceSslGetNameEntryInfo(certName: *mut SceSslCertName,
                                  entryNum: ::libc::c_int,
                                  oidname: *mut ::libc::c_char,
                                  maxOidnameLen: ::libc::c_uint,
                                  value: *mut ::libc::c_char,
                                  maxValueLen: ::libc::c_uint,
                                  valueLen: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceSslGetSubjectName(sslCert: *mut SceSslCert)
     -> *mut SceSslCertName;
    pub fn sceSslGetIssuerName(sslCert: *mut SceSslCert)
     -> *mut SceSslCertName;
    pub fn sceSslFreeSslCertName(certName: *mut SceSslCertName)
     -> ::libc::c_int;
    pub fn sceMsgDialogInit(param: *const SceMsgDialogParam) -> ::libc::c_int;
    pub fn sceMsgDialogGetStatus() -> SceCommonDialogStatus;
    pub fn sceMsgDialogAbort() -> ::libc::c_int;
    pub fn sceMsgDialogGetResult(result: *mut SceMsgDialogResult)
     -> ::libc::c_int;
    pub fn sceMsgDialogTerm() -> ::libc::c_int;
    pub fn sceMsgDialogClose() -> ::libc::c_int;
    pub fn sceMsgDialogProgressBarInc(target: SceMsgDialogProgressBarTarget,
                                      delta: SceUInt32) -> ::libc::c_int;
    pub fn sceMsgDialogProgressBarSetValue(target:
                                               SceMsgDialogProgressBarTarget,
                                           rate: SceUInt32) -> ::libc::c_int;
    pub fn sceMsgDialogProgressBarSetMsg(target:
                                             SceMsgDialogProgressBarTarget,
                                         barMsg: *const SceChar8)
     -> ::libc::c_int;
    pub fn sceMotionGetState(motionState: *mut SceMotionState)
     -> ::libc::c_int;
    pub fn sceMotionGetSensorState(sensorState: *mut SceMotionSensorState,
                                   numRecords: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceMotionGetBasicOrientation(basicOrientation: *mut SceFVector3)
     -> ::libc::c_int;
    pub fn sceMotionRotateYaw(radians: f32) -> ::libc::c_int;
    pub fn sceMotionGetTiltCorrection() -> ::libc::c_int;
    pub fn sceMotionSetTiltCorrection(setValue: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceMotionGetDeadband() -> ::libc::c_int;
    pub fn sceMotionSetDeadband(setValue: ::libc::c_int) -> ::libc::c_int;
    pub fn sceMotionSetAngleThreshold(angle: f32) -> ::libc::c_int;
    pub fn sceMotionGetAngleThreshold() -> f32;
    pub fn sceMotionReset() -> ::libc::c_int;
    pub fn sceMotionMagnetometerOn() -> ::libc::c_int;
    pub fn sceMotionMagnetometerOff() -> ::libc::c_int;
    pub fn sceMotionGetMagnetometerState() -> ::libc::c_int;
    pub fn sceMotionStartSampling() -> ::libc::c_int;
    pub fn sceMotionStopSampling() -> ::libc::c_int;
    pub fn sceFontNewLib(params: *mut SceFontNewLibParams,
                         errorCode: *mut ::libc::c_uint) -> SceFontLibHandle;
    pub fn sceFontDoneLib(libHandle: SceFontLibHandle) -> ::libc::c_int;
    pub fn sceFontOpen(libHandle: SceFontLibHandle, index: ::libc::c_int,
                       mode: ::libc::c_int, errorCode: *mut ::libc::c_uint)
     -> SceFontHandle;
    pub fn sceFontOpenUserMemory(libHandle: SceFontLibHandle,
                                 pMemoryFont: *mut ::libc::c_void,
                                 pMemoryFontSize: SceSize,
                                 errorCode: *mut ::libc::c_uint)
     -> SceFontHandle;
    pub fn sceFontOpenUserFile(libHandle: SceFontLibHandle,
                               file: *mut ::libc::c_char, mode: ::libc::c_int,
                               errorCode: *mut ::libc::c_uint)
     -> SceFontHandle;
    pub fn sceFontClose(fontHandle: SceFontHandle) -> ::libc::c_int;
    pub fn sceFontGetNumFontList(libHandle: SceFontLibHandle,
                                 errorCode: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceFontFindOptimumFont(libHandle: SceFontLibHandle,
                                  fontStyle: *mut SceFontStyle,
                                  errorCode: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceFontFindFont(libHandle: SceFontLibHandle,
                           fontStyle: *mut SceFontStyle,
                           errorCode: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceFontGetFontInfo(fontHandle: SceFontHandle,
                              fontInfo: *mut SceFontInfo) -> ::libc::c_int;
    pub fn sceFontGetFontInfoByIndexNumber(libHandle: SceFontLibHandle,
                                           fontStyle: *mut SceFontStyle,
                                           unknown: ::libc::c_int,
                                           fontIndex: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceFontSetResolution(libHandle: SceFontLibHandle, hRes: f32,
                                vRes: f32) -> ::libc::c_int;
    pub fn sceFontGetFontList(libHandle: SceFontLibHandle,
                              fontStyle: *mut SceFontStyle,
                              numFonts: ::libc::c_int) -> ::libc::c_int;
    pub fn sceFontGetCharInfo(fontHandle: SceFontHandle,
                              charCode: ::libc::c_uint,
                              charInfo: *mut SceFontCharInfo)
     -> ::libc::c_int;
    pub fn sceFontGetCharImageRect(fontHandle: SceFontHandle,
                                   charCode: ::libc::c_uint,
                                   charRect: *mut SceFontImageRect)
     -> ::libc::c_int;
    pub fn sceFontGetCharGlyphImage(fontHandle: SceFontHandle,
                                    charCode: ::libc::c_uint,
                                    glyphImage: *mut SceFontGlyphImage)
     -> ::libc::c_int;
    pub fn sceFontGetCharGlyphImage_Clip(fontHandle: SceFontHandle,
                                         charCode: ::libc::c_uint,
                                         glyphImage: *mut SceFontGlyphImage,
                                         clipXPos: ::libc::c_int,
                                         clipYPos: ::libc::c_int,
                                         clipWidth: ::libc::c_int,
                                         clipHeight: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceFontPixelToPointH(libHandle: SceFontLibHandle, fontPixelsH: f32,
                                errorCode: *mut ::libc::c_uint) -> f32;
    pub fn sceFontPixelToPointV(libHandle: SceFontLibHandle, fontPixelsV: f32,
                                errorCode: *mut ::libc::c_uint) -> f32;
    pub fn sceFontPointToPixelH(libHandle: SceFontLibHandle, fontPointsH: f32,
                                errorCode: *mut ::libc::c_uint) -> f32;
    pub fn sceFontPointToPixelV(libHandle: SceFontLibHandle, fontPointsV: f32,
                                errorCode: *mut ::libc::c_uint) -> f32;
    pub fn sceFontSetAltCharacterCode(libHandle: SceFontLibHandle,
                                      charCode: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceFontFlush(fontHandle: SceFontHandle) -> ::libc::c_int;
    pub fn scePhotoExportFromData(data: *const ::libc::c_void, size: SceSize,
                                  param: *const PhotoExportParam,
                                  workingMemory: *mut ::libc::c_void,
                                  cancelCb: *mut ::libc::c_void,
                                  user: *mut ::libc::c_void,
                                  outPath: *mut ::libc::c_char,
                                  outPathSize: SceSize) -> ::libc::c_int;
    pub fn scePhotoExportFromFile(path: *const ::libc::c_char,
                                  param: *const PhotoExportParam,
                                  workingMemory: *mut ::libc::c_void,
                                  cancelCb: *mut ::libc::c_void,
                                  user: *mut ::libc::c_void,
                                  outPath: *mut ::libc::c_char,
                                  outPathSize: SceSize) -> ::libc::c_int;
    pub fn scePowerRegisterCallback(slot: ::libc::c_int, cbid: SceUID)
     -> ::libc::c_int;
    pub fn scePowerIsBatteryCharging() -> ::libc::c_int;
    pub fn scePowerGetBatteryLifePercent() -> ::libc::c_int;
    pub fn scePowerSetConfigurationMode(mode: ::libc::c_int) -> ::libc::c_int;
    pub fn scePowerIsSuspendRequired() -> SceBool;
    pub fn scePowerIsPowerOnline() -> ::libc::c_int;
    pub fn scePowerGetBatteryLifeTime() -> ::libc::c_int;
    pub fn scePowerGetBatteryRemainCapacity() -> ::libc::c_int;
    pub fn scePowerIsLowBattery() -> ::libc::c_int;
    pub fn scePowerUnregisterCallback(slot: ::libc::c_int) -> ::libc::c_int;
    pub fn scePowerGetBatteryFullCapacity() -> ::libc::c_int;
    pub fn scePowerGetArmClockFrequency() -> ::libc::c_int;
    pub fn scePowerGetBusClockFrequency() -> ::libc::c_int;
    pub fn scePowerGetGpuClockFrequency() -> ::libc::c_int;
    pub fn scePowerSetArmClockFrequency(freq: ::libc::c_int) -> ::libc::c_int;
    pub fn scePowerSetBusClockFrequency(freq: ::libc::c_int) -> ::libc::c_int;
    pub fn scePowerSetGpuClockFrequency(freq: ::libc::c_int) -> ::libc::c_int;
    pub fn pss_code_mem_alloc(arg1: *mut SceSize) -> *mut ::libc::c_void;
    pub fn pss_code_mem_flush_icache(arg1: *const ::libc::c_void,
                                     arg2: SceSize);
    pub fn pss_code_mem_lock();
    pub fn pss_code_mem_unlock();
    pub fn sceScreenshotSetParam(param: *const ScreenshotParam)
     -> ::libc::c_int;
    pub fn sceScreenshotOverlayImage(filepath: *const ::libc::c_char,
                                     offsetX: ::libc::c_int,
                                     offsetY: ::libc::c_int) -> ::libc::c_int;
    pub fn sceScreenshotDisable() -> ::libc::c_int;
    pub fn sceScreenshotEnable() -> ::libc::c_int;
    pub fn sceSqliteConfigMallocMethods(methods: *mut SceSqliteMallocMethods)
     -> ::libc::c_int;
    pub fn sceSysmoduleLoadModule(id: SceUInt16) -> ::libc::c_int;
    pub fn sceSysmoduleUnloadModule(id: SceUInt16) -> ::libc::c_int;
    pub fn sceSysmoduleIsLoaded(id: SceUInt16) -> ::libc::c_int;
    pub fn sceTouchGetPanelInfo(port: SceUInt32,
                                pPanelInfo: *mut SceTouchPanelInfo)
     -> ::libc::c_int;
    pub fn sceTouchRead(port: SceUInt32, pData: *mut SceTouchData,
                        nBufs: SceUInt32) -> ::libc::c_int;
    pub fn sceTouchPeek(port: SceUInt32, pData: *mut SceTouchData,
                        nBufs: SceUInt32) -> ::libc::c_int;
    pub fn sceTouchSetSamplingState(port: SceUInt32, state: SceUInt32)
     -> ::libc::c_int;
    pub fn sceTouchGetSamplingState(port: SceUInt32, pState: *mut SceUInt32)
     -> ::libc::c_int;
    pub fn sceTouchEnableTouchForce(port: SceUInt32) -> ::libc::c_int;
    pub fn sceTouchDisableTouchForce(port: SceUInt32) -> ::libc::c_int;
    pub fn sceIoDevctl(dev: *const ::libc::c_char, cmd: ::libc::c_uint,
                       indata: *mut ::libc::c_void, inlen: ::libc::c_int,
                       outdata: *mut ::libc::c_void, outlen: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceIoAssign(dev1: *const ::libc::c_char,
                       dev2: *const ::libc::c_char,
                       dev3: *const ::libc::c_char, mode: ::libc::c_int,
                       unk1: *mut ::libc::c_void, unk2: ::libc::c_long)
     -> ::libc::c_int;
    pub fn sceIoUnassign(dev: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceIoIoctl(fd: SceUID, cmd: ::libc::c_uint,
                      indata: *mut ::libc::c_void, inlen: ::libc::c_int,
                      outdata: *mut ::libc::c_void, outlen: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceIoIoctlAsync(fd: SceUID, cmd: ::libc::c_uint,
                           indata: *mut ::libc::c_void, inlen: ::libc::c_int,
                           outdata: *mut ::libc::c_void,
                           outlen: ::libc::c_int) -> ::libc::c_int;
    pub fn sceIoMkdir(dir: *const ::libc::c_char, mode: SceMode)
     -> ::libc::c_int;
    pub fn sceIoRmdir(path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceIoGetstat(file: *const ::libc::c_char, stat: *mut SceIoStat)
     -> ::libc::c_int;
    pub fn sceIoGetstatByFd(fd: SceUID, stat: *mut SceIoStat)
     -> ::libc::c_int;
    pub fn sceIoChstat(file: *const ::libc::c_char, stat: *mut SceIoStat,
                       bits: ::libc::c_int) -> ::libc::c_int;
    pub fn sceIoDopen(dirname: *const ::libc::c_char) -> SceUID;
    pub fn sceIoDread(fd: SceUID, dir: *mut SceIoDirent) -> ::libc::c_int;
    pub fn sceIoDclose(fd: SceUID) -> ::libc::c_int;
    pub fn sceIoOpen(file: *const ::libc::c_char, flags: ::libc::c_int,
                     mode: SceMode) -> SceUID;
    pub fn sceIoOpenAsync(file: *const ::libc::c_char, flags: ::libc::c_int,
                          mode: SceMode) -> SceUID;
    pub fn sceIoClose(fd: SceUID) -> ::libc::c_int;
    pub fn sceIoCloseAsync(fd: SceUID) -> ::libc::c_int;
    pub fn sceIoRead(fd: SceUID, data: *mut ::libc::c_void, size: SceSize)
     -> ::libc::c_int;
    pub fn sceIoReadAsync(fd: SceUID, data: *mut ::libc::c_void,
                          size: SceSize) -> ::libc::c_int;
    pub fn sceIoWrite(fd: SceUID, data: *const ::libc::c_void, size: SceSize)
     -> ::libc::c_int;
    pub fn sceIoWriteAsync(fd: SceUID, data: *const ::libc::c_void,
                           size: SceSize) -> ::libc::c_int;
    pub fn sceIoLseek(fd: SceUID, offset: SceOff, whence: ::libc::c_int)
     -> SceOff;
    pub fn sceIoLseekAsync(fd: SceUID, offset: SceOff, whence: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceIoLseek32(fd: SceUID, offset: ::libc::c_int,
                        whence: ::libc::c_int) -> ::libc::c_int;
    pub fn sceIoLseek32Async(fd: SceUID, offset: ::libc::c_int,
                             whence: ::libc::c_int) -> ::libc::c_int;
    pub fn sceIoRemove(file: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceIoRename(oldname: *const ::libc::c_char,
                       newname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceIoSync(device: *const ::libc::c_char, unk: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceIoSyncByFd(fd: SceUID) -> ::libc::c_int;
    pub fn sceIoWaitAsync(fd: SceUID, res: *mut SceInt64) -> ::libc::c_int;
    pub fn sceIoWaitAsyncCB(fd: SceUID, res: *mut SceInt64) -> ::libc::c_int;
    pub fn sceIoPollAsync(fd: SceUID, res: *mut SceInt64) -> ::libc::c_int;
    pub fn sceIoGetAsyncStat(fd: SceUID, poll: ::libc::c_int,
                             res: *mut SceInt64) -> ::libc::c_int;
    pub fn sceIoCancel(fd: SceUID) -> ::libc::c_int;
    pub fn sceIoGetDevType(fd: SceUID) -> ::libc::c_int;
    pub fn sceIoChangeAsyncPriority(fd: SceUID, pri: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceIoSetAsyncCallback(fd: SceUID, cb: SceUID,
                                 argp: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sceClibStrcmp(arg1: *const ::libc::c_char,
                         arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceClibSnprintf(arg1: *mut ::libc::c_char, arg2: SceSize,
                           arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sceClibVsnprintf(arg1: *mut ::libc::c_char, arg2: SceSize,
                            arg3: *const ::libc::c_char, arg4: va_list)
     -> ::libc::c_int;
    pub fn sceKernelGetModuleList(flags: ::libc::c_int, modids: *mut SceUID,
                                  num: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelGetModuleInfo(modid: SceUID,
                                  info: *mut SceKernelModuleInfo)
     -> ::libc::c_int;
    pub fn sceKernelLoadModule(path: *mut ::libc::c_char,
                               flags: ::libc::c_int,
                               option: *mut SceKernelLMOption) -> SceUID;
    pub fn sceKernelUnloadModule(modid: SceUID, flags: ::libc::c_int,
                                 option: *mut SceKernelULMOption)
     -> ::libc::c_int;
    pub fn sceKernelLoadStartModule(path: *mut ::libc::c_char, args: SceSize,
                                    argp: *mut ::libc::c_void,
                                    flags: ::libc::c_int,
                                    option: *mut SceKernelLMOption,
                                    status: *mut ::libc::c_int) -> SceUID;
    pub fn sceKernelStopUnloadModule(modid: SceUID, args: SceSize,
                                     argp: *mut ::libc::c_void,
                                     flags: ::libc::c_int,
                                     option: *mut SceKernelULMOption,
                                     status: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelGetOpenPsId(id: *mut SceKernelOpenPsId) -> ::libc::c_int;
    pub fn sceKernelCreateThread(name: *const ::libc::c_char,
                                 entry: SceKernelThreadEntry,
                                 initPriority: ::libc::c_int,
                                 stackSize: ::libc::c_int, attr: SceUInt,
                                 cpuAffinityMask: ::libc::c_int,
                                 option: *const SceKernelThreadOptParam)
     -> SceUID;
    pub fn sceKernelDeleteThread(thid: SceUID) -> ::libc::c_int;
    pub fn sceKernelStartThread(thid: SceUID, arglen: SceSize,
                                argp: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sceKernelExitThread(status: ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelExitDeleteThread(status: ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelWaitThreadEnd(thid: SceUID, stat: *mut ::libc::c_int,
                                  timeout: *mut SceUInt) -> ::libc::c_int;
    pub fn sceKernelWaitThreadEndCB(thid: SceUID, stat: *mut ::libc::c_int,
                                    timeout: *mut SceUInt) -> ::libc::c_int;
    pub fn sceKernelDelayThread(delay: SceUInt) -> ::libc::c_int;
    pub fn sceKernelDelayThreadCB(delay: SceUInt) -> ::libc::c_int;
    pub fn sceKernelChangeCurrentThreadAttr(unknown: ::libc::c_int,
                                            attr: SceUInt) -> ::libc::c_int;
    pub fn sceKernelChangeThreadPriority(thid: SceUID,
                                         priority: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelReleaseWaitThread(thid: SceUID) -> ::libc::c_int;
    pub fn sceKernelGetThreadId() -> ::libc::c_int;
    pub fn sceKernelGetThreadCurrentPriority() -> ::libc::c_int;
    pub fn sceKernelGetThreadExitStatus(thid: SceUID) -> ::libc::c_int;
    pub fn sceKernelCheckThreadStack() -> ::libc::c_int;
    pub fn sceKernelGetThreadStackFreeSize(thid: SceUID) -> ::libc::c_int;
    pub fn sceKernelGetThreadInfo(thid: SceUID,
                                  info: *mut SceKernelThreadInfo)
     -> ::libc::c_int;
    pub fn sceKernelGetThreadRunStatus(thid: SceUID,
                                       status: *mut SceKernelThreadRunStatus)
     -> ::libc::c_int;
    pub fn sceKernelCreateSema(name: *const ::libc::c_char, attr: SceUInt,
                               initVal: ::libc::c_int, maxVal: ::libc::c_int,
                               option: *mut SceKernelSemaOptParam) -> SceUID;
    pub fn sceKernelDeleteSema(semaid: SceUID) -> ::libc::c_int;
    pub fn sceKernelSignalSema(semaid: SceUID, signal: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelWaitSema(semaid: SceUID, signal: ::libc::c_int,
                             timeout: *mut SceUInt) -> ::libc::c_int;
    pub fn sceKernelWaitSemaCB(semaid: SceUID, signal: ::libc::c_int,
                               timeout: *mut SceUInt) -> ::libc::c_int;
    pub fn sceKernelPollSema(semaid: SceUID, signal: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelCancelSema(semaid: SceUID, setCount: ::libc::c_int,
                               numWaitThreads: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelGetSemaInfo(semaid: SceUID, info: *mut SceKernelSemaInfo)
     -> ::libc::c_int;
    pub fn sceKernelCreateMutex(name: *const ::libc::c_char, attr: SceUInt,
                                initCount: ::libc::c_int,
                                option: *mut SceKernelMutexOptParam)
     -> SceUID;
    pub fn sceKernelDeleteMutex(mutexid: SceUID) -> ::libc::c_int;
    pub fn sceKernelOpenMutex(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceKernelCloseMutex(mutexid: SceUID) -> ::libc::c_int;
    pub fn sceKernelLockMutex(mutexid: SceUID, lockCount: ::libc::c_int,
                              timeout: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceKernelLockMutexCB(mutexid: SceUID, lockCount: ::libc::c_int,
                                timeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelTryLockMutex(mutexid: SceUID, lockCount: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelUnlockMutex(mutexid: SceUID, unlockCount: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelCancelMutex(mutexid: SceUID, newCount: ::libc::c_int,
                                numWaitThreads: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelGetMutexInfo(mutexid: SceUID, info: SceKernelMutexInfo)
     -> ::libc::c_int;
    pub fn sceKernelCreateEventFlag(name: *const ::libc::c_char,
                                    attr: ::libc::c_int, bits: ::libc::c_int,
                                    opt: *mut SceKernelEventFlagOptParam)
     -> SceUID;
    pub fn sceKernelSetEventFlag(evid: SceUID, bits: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelClearEventFlag(evid: SceUID, bits: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelPollEventFlag(evid: ::libc::c_int, bits: ::libc::c_uint,
                                  wait: ::libc::c_uint,
                                  outBits: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelWaitEventFlag(evid: ::libc::c_int, bits: ::libc::c_uint,
                                  wait: ::libc::c_uint,
                                  outBits: *mut ::libc::c_uint,
                                  timeout: *mut SceUInt) -> ::libc::c_int;
    pub fn sceKernelWaitEventFlagCB(evid: ::libc::c_int, bits: ::libc::c_uint,
                                    wait: ::libc::c_uint,
                                    outBits: *mut ::libc::c_uint,
                                    timeout: *mut SceUInt) -> ::libc::c_int;
    pub fn sceKernelDeleteEventFlag(evid: ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelGetEventFlagInfo(event: SceUID,
                                     info: *mut SceKernelEventFlagInfo)
     -> ::libc::c_int;
    pub fn sceKernelCreateCallback(name: *const ::libc::c_char,
                                   attr: ::libc::c_uint,
                                   func: SceKernelCallbackFunction,
                                   arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sceKernelGetCallbackInfo(cb: SceUID,
                                    infop: *mut SceKernelCallbackInfo)
     -> ::libc::c_int;
    pub fn sceKernelDeleteCallback(cb: SceUID) -> ::libc::c_int;
    pub fn sceKernelNotifyCallback(cb: SceUID, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelCancelCallback(cb: SceUID) -> ::libc::c_int;
    pub fn sceKernelGetCallbackCount(cb: SceUID) -> ::libc::c_int;
    pub fn sceKernelCheckCallback() -> ::libc::c_int;
    pub fn sceKernelCreateMsgPipe(name: *const ::libc::c_char,
                                  part: ::libc::c_int, attr: ::libc::c_int,
                                  unk1: *mut ::libc::c_void,
                                  opt: *mut ::libc::c_void) -> SceUID;
    pub fn sceKernelDeleteMsgPipe(uid: SceUID) -> ::libc::c_int;
    pub fn sceKernelSendMsgPipe(uid: SceUID, message: *mut ::libc::c_void,
                                size: ::libc::c_uint, unk1: ::libc::c_int,
                                unk2: *mut ::libc::c_void,
                                timeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelSendMsgPipeCB(uid: SceUID, message: *mut ::libc::c_void,
                                  size: ::libc::c_uint, unk1: ::libc::c_int,
                                  unk2: *mut ::libc::c_void,
                                  timeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelTrySendMsgPipe(uid: SceUID, message: *mut ::libc::c_void,
                                   size: ::libc::c_uint, unk1: ::libc::c_int,
                                   unk2: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceKernelReceiveMsgPipe(uid: SceUID, message: *mut ::libc::c_void,
                                   size: ::libc::c_uint, unk1: ::libc::c_int,
                                   unk2: *mut ::libc::c_void,
                                   timeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelReceiveMsgPipeCB(uid: SceUID,
                                     message: *mut ::libc::c_void,
                                     size: ::libc::c_uint,
                                     unk1: ::libc::c_int,
                                     unk2: *mut ::libc::c_void,
                                     timeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelTryReceiveMsgPipe(uid: SceUID,
                                      message: *mut ::libc::c_void,
                                      size: ::libc::c_uint,
                                      unk1: ::libc::c_int,
                                      unk2: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceKernelCancelMsgPipe(uid: SceUID, psend: *mut ::libc::c_int,
                                  precv: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelGetMsgPipeInfo(uid: SceUID, info: *mut SceKernelMppInfo)
     -> ::libc::c_int;
    pub fn sceKernelGetSystemInfo(info: *mut SceKernelSystemInfo)
     -> ::libc::c_int;
    pub fn sceKernelGetThreadmgrUIDClass(uid: SceUID) -> SceKernelIdListType;
    pub fn sceKernelCreateLwMutex(pWork: *mut SceKernelLwMutexWork,
                                  pName: *const ::libc::c_char,
                                  attr: ::libc::c_uint,
                                  initCount: ::libc::c_int,
                                  pOptParam: *const SceKernelLwMutexOptParam)
     -> ::libc::c_int;
    pub fn sceKernelDeleteLwMutex(pWork: *mut SceKernelLwMutexWork)
     -> ::libc::c_int;
    pub fn sceKernelLockLwMutex(pWork: *mut SceKernelLwMutexWork,
                                lockCount: ::libc::c_int,
                                pTimeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelUnlockLwMutex(pWork: *mut SceKernelLwMutexWork,
                                  unlockCount: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceKernelCreateLwCond(pWork: *mut SceKernelLwCondWork,
                                 pName: *const ::libc::c_char,
                                 attr: ::libc::c_uint,
                                 pLwMutex: *mut SceKernelLwMutexWork,
                                 pOptParam: *const SceKernelLwCondOptParam)
     -> ::libc::c_int;
    pub fn sceKernelDeleteLwCond(pWork: *mut SceKernelLwCondWork)
     -> ::libc::c_int;
    pub fn sceKernelSignalLwCond(pWork: *mut SceKernelLwCondWork)
     -> ::libc::c_int;
    pub fn sceKernelWaitLwCond(pWork: *mut SceKernelLwCondWork,
                               pTimeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceKernelGetSystemTimeWide() -> SceInt64;
    pub fn sceKernelGetThreadTLSAddr(thid: SceUID, key: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn sceKernelGetTLSAddr(key: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn sceKernelExitProcess(res: ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelPowerTick(type_: ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelGetProcessTime(pSysClock: *mut SceKernelSysClock)
     -> ::libc::c_int;
    pub fn sceKernelGetProcessTimeLow() -> SceUInt32;
    pub fn sceKernelGetProcessTimeWide() -> SceUInt64;
    pub fn sceKernelGetProcessId() -> SceUID;
    pub fn sceKernelGetRandomNumber(output: *mut ::libc::c_void,
                                    size: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceKernelAllocMemBlock(name: *const ::libc::c_char,
                                  type_: SceKernelMemBlockType,
                                  size: ::libc::c_int,
                                  optp: *mut SceKernelAllocMemBlockOpt)
     -> SceUID;
    pub fn sceKernelFreeMemBlock(uid: SceUID) -> ::libc::c_int;
    pub fn sceKernelGetMemBlockBase(uid: SceUID,
                                    basep: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceKernelFindMemBlockByAddr(addr: *const ::libc::c_void,
                                       size: SceSize) -> SceUID;
    pub fn sceKernelGetMemBlockInfoByAddr(base: *mut ::libc::c_void,
                                          info: *mut SceKernelMemBlockInfo)
     -> ::libc::c_int;
    pub fn sceKernelGetMemBlockInfoByRange(base: *mut ::libc::c_void,
                                           size: SceSize,
                                           info: *mut SceKernelMemBlockInfo)
     -> ::libc::c_int;
    pub fn sceKernelAllocMemBlockForVM(name: *const ::libc::c_char,
                                       size: SceSize) -> SceUID;
    pub fn sceKernelSyncVMDomain(uid: SceUID, data: *mut ::libc::c_void,
                                 size: SceSize) -> ::libc::c_int;
    pub fn sceKernelOpenVMDomain() -> ::libc::c_int;
    pub fn sceKernelCloseVMDomain() -> ::libc::c_int;
    pub fn sceKernelOpenMemBlock(name: *const ::libc::c_char,
                                 flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceKernelCloseMemBlock(uid: SceUID) -> ::libc::c_int;
    pub fn sceKernelGetModelForCDialog() -> ::libc::c_int;
    pub fn sceHttpInit(poolSize: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpTerm() -> ::libc::c_int;
    pub fn sceHttpGetMemoryPoolStats(currentStat: *mut SceHttpMemoryPoolStats)
     -> ::libc::c_int;
    pub fn sceHttpSetAuthInfoCallback(id: ::libc::c_int,
                                      cbfunc: SceHttpAuthInfoCallback,
                                      userArg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceHttpSetAuthEnabled(id: ::libc::c_int, enable: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpGetAuthEnabled(id: ::libc::c_int,
                                 enable: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpSetRedirectCallback(id: ::libc::c_int,
                                      cbfunc: SceHttpRedirectCallback,
                                      userArg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceHttpSetAutoRedirect(id: ::libc::c_int, enable: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpGetAutoRedirect(id: ::libc::c_int,
                                  enable: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpSetResolveTimeOut(id: ::libc::c_int, usec: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpSetResolveRetry(id: ::libc::c_int, retry: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpSetConnectTimeOut(id: ::libc::c_int, usec: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpSetSendTimeOut(id: ::libc::c_int, usec: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpSetRecvTimeOut(id: ::libc::c_int, usec: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpSendRequest(reqId: ::libc::c_int,
                              postData: *const ::libc::c_void,
                              size: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpAbortRequest(reqId: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpGetResponseContentLength(reqId: ::libc::c_int,
                                           contentLength:
                                               *mut ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn sceHttpGetStatusCode(reqId: ::libc::c_int,
                                statusCode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpGetAllResponseHeaders(reqId: ::libc::c_int,
                                        header: *mut *mut ::libc::c_char,
                                        headerSize: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpReadData(reqId: ::libc::c_int, data: *mut ::libc::c_void,
                           size: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpAddRequestHeader(id: ::libc::c_int,
                                   name: *const ::libc::c_char,
                                   value: *const ::libc::c_char,
                                   mode: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpRemoveRequestHeader(id: ::libc::c_int,
                                      name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn sceHttpSetProxy(id: ::libc::c_int, enableProxyFlag: ::libc::c_int,
                           mode: ::libc::c_int,
                           newProxyHost: *const ::libc::c_char,
                           newProxyPort: ::libc::c_ushort) -> ::libc::c_int;
    pub fn sceHttpGetProxy(id: ::libc::c_int,
                           enabeProxyFlag: *mut ::libc::c_int,
                           mode: *mut ::libc::c_int,
                           proxy_host: *mut ::libc::c_char,
                           len: ::libc::c_uint,
                           proxy_port: *mut ::libc::c_ushort)
     -> ::libc::c_int;
    pub fn sceHttpEnableKeepAlive(id: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpDisableKeepAlive(id: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpEnableHttp0_9(id: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpDisableHttp0_9(id: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpParseResponseHeader(header: *const ::libc::c_char,
                                      headerLen: ::libc::c_uint,
                                      fieldStr: *const ::libc::c_char,
                                      fieldValue: *mut *const ::libc::c_char,
                                      valueLen: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpParseStatusLine(statusLine: *const ::libc::c_char,
                                  lineLen: ::libc::c_uint,
                                  httpMajorVer: *mut ::libc::c_int,
                                  httpMinorVer: *mut ::libc::c_int,
                                  responseCode: *mut ::libc::c_int,
                                  reasonPhrase: *mut *const ::libc::c_char,
                                  phraseLen: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpCreateTemplate(userAgent: *const ::libc::c_char,
                                 httpVer: ::libc::c_int,
                                 autoProxyConf: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpDeleteTemplate(tmplId: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpCreateConnection(tmplId: ::libc::c_int,
                                   serverName: *const ::libc::c_char,
                                   scheme: *const ::libc::c_char,
                                   port: ::libc::c_ushort,
                                   enableKeepalive: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpCreateConnectionWithURL(tmplId: ::libc::c_int,
                                          url: *const ::libc::c_char,
                                          enableKeepalive: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpDeleteConnection(connId: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpCreateRequest(connId: ::libc::c_int, method: ::libc::c_int,
                                path: *const ::libc::c_char,
                                contentLength: ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn sceHttpCreateRequestWithURL(connId: ::libc::c_int,
                                       method: ::libc::c_int,
                                       url: *const ::libc::c_char,
                                       contentLength: ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn sceHttpDeleteRequest(reqId: ::libc::c_int) -> ::libc::c_int;
    pub fn sceHttpSetResponseHeaderMaxSize(id: ::libc::c_int,
                                           headerSize: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpSetRecvBlockSize(id: ::libc::c_int,
                                   blockSize: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpSetRequestContentLength(id: ::libc::c_int,
                                          contentLength: ::libc::c_ulonglong)
     -> ::libc::c_int;
    pub fn sceHttpUriEscape(out: *mut ::libc::c_char,
                            require: *mut ::libc::c_uint,
                            prepare: ::libc::c_uint,
                            in_: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceHttpUriUnescape(out: *mut ::libc::c_char,
                              require: *mut ::libc::c_uint,
                              prepare: ::libc::c_uint,
                              in_: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sceHttpUriParse(out: *mut SceHttpUriElement,
                           srcUrl: *const ::libc::c_char,
                           pool: *mut ::libc::c_void,
                           require: *mut ::libc::c_uint,
                           prepare: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpUriBuild(out: *mut ::libc::c_char,
                           require: *mut ::libc::c_uint,
                           prepare: ::libc::c_uint,
                           srcElement: *const SceHttpUriElement,
                           option: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpUriMerge(mergedUrl: *mut ::libc::c_char,
                           url: *const ::libc::c_char,
                           relativeUrl: *const ::libc::c_char,
                           require: *mut ::libc::c_uint,
                           prepare: ::libc::c_uint, option: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceHttpUriSweepPath(dst: *mut ::libc::c_char,
                               src: *const ::libc::c_char,
                               srcSize: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpsLoadCert(caCertNum: ::libc::c_int,
                            caList: *mut *const SceHttpsData,
                            cert: *const SceHttpsData,
                            privKey: *const SceHttpsData) -> ::libc::c_int;
    pub fn sceHttpsUnloadCert() -> ::libc::c_int;
    pub fn sceHttpsEnableOption(sslFlags: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpsDisableOption(sslFlags: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpsGetSslError(id: ::libc::c_int, errNum: *mut ::libc::c_int,
                               detail: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpsSetSslCallback(id: ::libc::c_int, cbfunc: SceHttpsCallback,
                                  userArg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceHttpsGetCaList(caList: *mut SceHttpsCaList) -> ::libc::c_int;
    pub fn sceHttpsFreeCaList(caList: *mut SceHttpsCaList) -> ::libc::c_int;
    pub fn sceHttpSetCookieEnabled(id: ::libc::c_int, enable: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpGetCookieEnabled(id: ::libc::c_int,
                                   enable: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpGetCookie(url: *const ::libc::c_char,
                            cookie: *mut ::libc::c_char,
                            cookieLength: *mut ::libc::c_uint,
                            prepare: ::libc::c_uint, secure: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceHttpAddCookie(url: *const ::libc::c_char,
                            cookie: *const ::libc::c_char,
                            cookieLength: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceHttpSetCookieRecvCallback(id: ::libc::c_int,
                                        cbfunc: SceHttpCookieRecvCallback,
                                        userArg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceHttpSetCookieSendCallback(id: ::libc::c_int,
                                        cbfunc: SceHttpCookieSendCallback,
                                        userArg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceNetInit(param: *mut SceNetInitParam) -> ::libc::c_int;
    pub fn sceNetTerm() -> ::libc::c_int;
    pub fn sceNetShowIfconfig(p: *mut ::libc::c_void, b: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetShowRoute() -> ::libc::c_int;
    pub fn sceNetShowNetstat() -> ::libc::c_int;
    pub fn sceNetEmulationSet(param: *mut SceNetEmulationParam,
                              flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetEmulationGet(param: *mut SceNetEmulationParam,
                              flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetResolverCreate(name: *const ::libc::c_char,
                                param: *mut SceNetResolverParam,
                                flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetResolverStartNtoa(rid: ::libc::c_int,
                                   hostname: *const ::libc::c_char,
                                   addr: *mut SceNetInAddr,
                                   timeout: ::libc::c_int,
                                   retry: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetResolverStartAton(rid: ::libc::c_int,
                                   addr: *const SceNetInAddr,
                                   hostname: *mut ::libc::c_char,
                                   len: ::libc::c_int, timeout: ::libc::c_int,
                                   retry: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetResolverGetError(rid: ::libc::c_int,
                                  result: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetResolverDestroy(rid: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetResolverAbort(rid: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetDumpCreate(name: *const ::libc::c_char, len: ::libc::c_int,
                            flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetDumpRead(id: ::libc::c_int, buf: *mut ::libc::c_void,
                          len: ::libc::c_int, pflags: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetDumpDestroy(id: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetDumpAbort(id: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetEpollCreate(name: *const ::libc::c_char,
                             flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetEpollControl(eid: ::libc::c_int, op: ::libc::c_int,
                              id: ::libc::c_int, event: *mut SceNetEpollEvent)
     -> ::libc::c_int;
    pub fn sceNetEpollWait(eid: ::libc::c_int, events: *mut SceNetEpollEvent,
                           maxevents: ::libc::c_int, timeout: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetEpollWaitCB(eid: ::libc::c_int,
                             events: *mut SceNetEpollEvent,
                             maxevents: ::libc::c_int, timeout: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetEpollDestroy(eid: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetEpollAbort(eid: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetEtherStrton(str: *const ::libc::c_char,
                             n: *mut SceNetEtherAddr) -> ::libc::c_int;
    pub fn sceNetEtherNtostr(n: *const SceNetEtherAddr,
                             str: *mut ::libc::c_char, len: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceNetGetMacAddress(addr: *mut SceNetEtherAddr,
                               flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetSocket(name: *const ::libc::c_char, domain: ::libc::c_int,
                        type_: ::libc::c_int, protocol: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetAccept(s: ::libc::c_int, addr: *mut SceNetSockaddr,
                        addrlen: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetBind(s: ::libc::c_int, addr: *const SceNetSockaddr,
                      addrlen: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetConnect(s: ::libc::c_int, name: *const SceNetSockaddr,
                         namelen: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetGetpeername(s: ::libc::c_int, name: *mut SceNetSockaddr,
                             namelen: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetGetsockname(s: ::libc::c_int, name: *mut SceNetSockaddr,
                             namelen: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetGetsockopt(s: ::libc::c_int, level: ::libc::c_int,
                            optname: ::libc::c_int,
                            optval: *mut ::libc::c_void,
                            optlen: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetListen(s: ::libc::c_int, backlog: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetRecv(s: ::libc::c_int, buf: *mut ::libc::c_void,
                      len: ::libc::c_uint, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetRecvfrom(s: ::libc::c_int, buf: *mut ::libc::c_void,
                          len: ::libc::c_uint, flags: ::libc::c_int,
                          from: *mut SceNetSockaddr,
                          fromlen: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetRecvmsg(s: ::libc::c_int, msg: *mut SceNetMsghdr,
                         flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetSend(s: ::libc::c_int, msg: *const ::libc::c_void,
                      len: ::libc::c_uint, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetSendto(s: ::libc::c_int, msg: *const ::libc::c_void,
                        len: ::libc::c_uint, flags: ::libc::c_int,
                        to: *const SceNetSockaddr, tolen: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sceNetSendmsg(s: ::libc::c_int, msg: *const SceNetMsghdr,
                         flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetSetsockopt(s: ::libc::c_int, level: ::libc::c_int,
                            optname: ::libc::c_int,
                            optval: *const ::libc::c_void,
                            optlen: ::libc::c_uint) -> ::libc::c_int;
    pub fn sceNetShutdown(s: ::libc::c_int, how: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetSocketClose(s: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetSocketAbort(s: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetGetSockInfo(s: ::libc::c_int, info: *mut SceNetSockInfo,
                             n: ::libc::c_int, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetGetSockIdInfo(fds: *mut SceNetFdSet,
                               sockinfoflags: ::libc::c_int,
                               flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetGetStatisticsInfo(info: *mut SceNetStatisticsInfo,
                                   flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetSetDnsInfo(info: *mut SceNetDnsInfo, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetClearDnsCache(flags: ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetInetNtop(af: ::libc::c_int, src: *const ::libc::c_void,
                          dst: *mut ::libc::c_char, size: ::libc::c_uint)
     -> *const ::libc::c_char;
    pub fn sceNetInetPton(af: ::libc::c_int, src: *const ::libc::c_char,
                          dst: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sceNetHtonll(host64: ::libc::c_ulonglong) -> ::libc::c_ulonglong;
    pub fn sceNetHtonl(host32: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sceNetHtons(host16: ::libc::c_ushort) -> ::libc::c_ushort;
    pub fn sceNetNtohll(net64: ::libc::c_ulonglong) -> ::libc::c_ulonglong;
    pub fn sceNetNtohl(net32: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sceNetNtohs(net16: ::libc::c_ushort) -> ::libc::c_ushort;
    pub fn sceNetCtlInit() -> ::libc::c_int;
    pub fn sceNetCtlTerm();
    pub fn sceNetCtlCheckCallback() -> ::libc::c_int;
    pub fn sceNetCtlInetGetResult(eventType: ::libc::c_int,
                                  errorCode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetCtlAdhocGetResult(eventType: ::libc::c_int,
                                   errorCode: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetCtlInetGetInfo(code: ::libc::c_int, info: *mut SceNetCtlInfo)
     -> ::libc::c_int;
    pub fn sceNetCtlInetGetState(state: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetCtlGetNatInfo(natinfo: *mut SceNetCtlNatInfo)
     -> ::libc::c_int;
    pub fn sceNetCtlInetRegisterCallback(func: SceNetCtlCallback,
                                         arg: *mut ::libc::c_void,
                                         cid: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetCtlInetUnregisterCallback(cid: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetCtlAdhocRegisterCallback(func: SceNetCtlCallback,
                                          arg: *mut ::libc::c_void,
                                          cid: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetCtlAdhocUnregisterCallback(cid: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sceNetCtlAdhocGetState(state: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn sceNetCtlAdhocDisconnect() -> ::libc::c_int;
    pub fn sceNetCtlAdhocGetPeerList(buflen: *mut ::libc::c_uint,
                                     buf: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn sceNetCtlAdhocGetInAddr(inaddr: *mut SceNetInAddr)
     -> ::libc::c_int;
}
